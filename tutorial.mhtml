From: <Saved by Blink>
Snapshot-Content-Location: https://phpdelusions.net/pdo#like
Subject: (The only proper) PDO tutorial - Treating PHP Delusions
Date: Wed, 19 Aug 2020 00:21:27 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----"


------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: text/html
Content-ID: <frame-91D0006544BFDE5EABE8C8471C6B96BF@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://phpdelusions.net/pdo#like

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3Dwindows-1252"><link rel=3D"stylesheet" type=
=3D"text/css" href=3D"cid:css-e27e8652-3219-412c-b094-4d5354059d31@mhtml.bl=
ink" />
    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media =
queries--><!--[if lt IE 7 ]><html class=3D"ie ie6" lang=3D"en"> <![endif]--=
>
    <!--[if IE 7 ]><html class=3D"ie ie7" lang=3D"en"> <![endif]-->
    <!--[if IE 8 ]><html class=3D"ie ie8" lang=3D"en"> <![endif]-->
    <!--[if (gte IE 9)|!(IE)]><!--> <!--<![endif]-->
    <!--[if lt IE 9]>
    <script src=3D"js/html5shiv.js"></script>
    <script src=3D"js/respond.js"></script>
    <![endif]-->
    <!-- Mobile Devices Scale Trick-->
    <meta name=3D"google-site-verification" content=3D"rXSCgsT7Ek0Ybsq0OoRe=
n2NsI91_GOHSCXWmGQ3K8OM">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0">
    <!-- Seo Tags-->
    <meta property=3D"og:type" content=3D"article">
    <meta property=3D"og:title" content=3D"(The only proper) PDO tutorial">
    <meta property=3D"og:site_name" content=3D"Treating PHP delusions">
    <meta property=3D"og:description" content=3D"There are many tutorials o=
n PDO already, but unfortunately, most of them fail to explain the real ben=
efits of PDO, or even promote rather bad practices. The only two exceptions=
 are [phptherightway.com](http://www.phptherightway.com/#pdo_extension) and=
 [hashphp.org](http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers), =
but they miss a lot of important information. As a result, half of PDO's fe=
atures remain in obscurity and are almost never used by PHP developers, who=
, as a result, are constantly trying to reinvent the wheel which *already e=
xists in PDO.*
">
    <meta property=3D"og:url" content=3D"https://phpdelusions.net/pdo">
    <meta property=3D"og:image" content=3D"https://phpdelusions.net/img/php=
delusion-big.png">

    <meta name=3D"description" content=3D"There are many tutorials on PDO a=
lready, but unfortunately, most of them fail to explain the real benefits o=
f PDO, or even promote rather bad practices. The only two exceptions are [p=
hptherightway.com](http://www.phptherightway.com/#pdo_extension) and [hashp=
hp.org](http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers), but the=
y miss a lot of important information. As a result, half of PDO's features =
remain in obscurity and are almost never used by PHP developers, who, as a =
result, are constantly trying to reinvent the wheel which *already exists i=
n PDO.*
">

    <title>(The only proper) PDO tutorial - Treating PHP Delusions</title>
    <!-- Favicon-->
<link rel=3D"apple-touch-icon" sizes=3D"57x57" href=3D"https://phpdelusions=
.net/apple-touch-icon-57x57.png">
<link rel=3D"apple-touch-icon" sizes=3D"60x60" href=3D"https://phpdelusions=
.net/apple-touch-icon-60x60.png">
<link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"https://phpdelusions=
.net/apple-touch-icon-72x72.png">
<link rel=3D"apple-touch-icon" sizes=3D"76x76" href=3D"https://phpdelusions=
.net/apple-touch-icon-76x76.png">
<link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"https://phpdelusio=
ns.net/apple-touch-icon-114x114.png">
<link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://phpdelusio=
ns.net/apple-touch-icon-120x120.png">
<link rel=3D"apple-touch-icon" sizes=3D"144x144" href=3D"https://phpdelusio=
ns.net/apple-touch-icon-144x144.png">
<link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"https://phpdelusio=
ns.net/apple-touch-icon-152x152.png">
<link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://phpdelusio=
ns.net/apple-touch-icon-180x180.png">
<link rel=3D"icon" type=3D"image/png" href=3D"https://phpdelusions.net/favi=
con-32x32.png" sizes=3D"32x32">
<link rel=3D"icon" type=3D"image/png" href=3D"https://phpdelusions.net/andr=
oid-chrome-192x192.png" sizes=3D"192x192">
<link rel=3D"icon" type=3D"image/png" href=3D"https://phpdelusions.net/favi=
con-96x96.png" sizes=3D"96x96">
<link rel=3D"icon" type=3D"image/png" href=3D"https://phpdelusions.net/favi=
con-16x16.png" sizes=3D"16x16">
<link rel=3D"manifest" href=3D"https://phpdelusions.net/manifest.json">
<link rel=3D"mask-icon" href=3D"https://phpdelusions.net/safari-pinned-tab.=
svg" color=3D"#5bbad5">
<meta name=3D"msapplication-TileColor" content=3D"#da532c">
<meta name=3D"msapplication-TileImage" content=3D"/mstile-144x144.png">
<meta name=3D"theme-color" content=3D"#ffffff">
  =20
    <!-- StyleSheet-->
    <link rel=3D"stylesheet" href=3D"https://phpdelusions.net/bower_compone=
nts/bootstrap/dist/css/bootstrap.min.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"https://phpdelusions.net/css/phpdelusi=
ons.css" type=3D"text/css">
    <!-- Loading Fira Sans From Google-->
  </head>
  <body>
    <nav role=3D"navigation" class=3D"navbar navbar-phpfaq">
      <div class=3D"container">
        <div class=3D"col-xs-12">
          <div class=3D"navbar-header">
            <button type=3D"button" data-toggle=3D"collapse" data-target=3D=
"#bs-example-navbar-collapse-1" class=3D"navbar-toggle collapsed">
                <i class=3D"fa fa-bars icon-baton"></i>
                <span class=3D"sr-only">Menu</span>
            </button>
                      </div>
          <div id=3D"bs-example-navbar-collapse-1" class=3D"collapse navbar=
-collapse">
            <ul class=3D"nav navbar-nav navbar-left">

              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo"=
>PDO</a></li>
              <li><a href=3D"https://phpdelusions.net/mysqli">Mysqli</a></l=
i>
              <li><a href=3D"https://phpdelusions.net/sql_injection">SQL In=
jection</a></li>
              <li><a href=3D"https://phpdelusions.net/articles">Articles</a=
></li>
              <li><a href=3D"https://phpdelusions.net/safemysql">SafeMySQL<=
/a></li>
              <li><a href=3D"https://phpdelusions.net/fun">Fun</a></li>

            </ul>
          </div>
        </div>
      </div>
    </nav>

    <div class=3D"crumbs">
      <div class=3D"container">
        <div class=3D"col-xs-12">
          <ol class=3D"breadcrumb">
            <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>

            <li class=3D"active">PDO</li>

          </ol>
        </div>
      </div>
    </div>

    <div class=3D"container main-content">
        <div style=3D"float:right;margin: 0 15px 20px 0;">
<div id=3D"fb-root" sryle=3D"margin: 5px 5px;" class=3D" fb_reset"><div sty=
le=3D"position: absolute; top: -10000px; width: 0px; height: 0px;"><div></d=
iv></div></div>

            <span style=3D"vertical-align:sub;"><a class=3D"twitter-share-b=
utton" data-url=3D"http://phpdelusions.net/pdo" href=3D"https://twitter.com=
/share">Tweet</a> </span>
            <div class=3D"fb-like fb_iframe_widget" data-href=3D"http://php=
delusions.net//pdo" data-layout=3D"button_count" data-action=3D"like" data-=
show-faces=3D"false" data-share=3D"true" fb-xfbml-state=3D"rendered" fb-ifr=
ame-plugin-query=3D"action=3Dlike&amp;app_id=3D&amp;container_width=3D42&am=
p;href=3Dhttp%3A%2F%2Fphpdelusions.net%2F%2Fpdo&amp;layout=3Dbutton_count&a=
mp;locale=3Den_US&amp;sdk=3Djoey&amp;share=3Dtrue&amp;show_faces=3Dfalse"><=
span style=3D"vertical-align: bottom; width: 134px; height: 20px;"><iframe =
name=3D"f391c684662b2a4" width=3D"1000px" height=3D"1000px" data-testid=3D"=
fb:like Facebook Social Plugin" title=3D"fb:like Facebook Social Plugin" fr=
ameborder=3D"0" allowtransparency=3D"true" allowfullscreen=3D"true" scrolli=
ng=3D"no" allow=3D"encrypted-media" src=3D"cid:frame-F371D7F67508A055A46876=
2899F03832@mhtml.blink" style=3D"border: none; visibility: visible; width: =
134px; height: 20px;" class=3D""></iframe></span></div>
        </div>
      <div class=3D"col-xs-12 col-sm-7 col-md-8 mb-4">
      <h1>(The only proper) PDO tutorial</h1>
<ol><li><a href=3D"https://phpdelusions.net/pdo#why">Why PDO?</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#dsn">Connecting. DSN</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#query">Running queries. PDO::qu=
ery()</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#prepared">Prepared statements. =
Protection from SQL injections</a></li>
<ul>
<li><a href=3D"https://phpdelusions.net/pdo#methods">Binding methods</a></l=
i>
<li><a href=3D"https://phpdelusions.net/pdo#bindable">Query parts you can b=
ind</a></li>
</ul>
<li><a href=3D"https://phpdelusions.net/pdo#multiexec">Prepared statements.=
 Multiple execution</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#dml">Running SELECT INSERT, UPD=
ATE, or DELETE statements</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#foreach">Getting data out of st=
atement. foreach()</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#fetch">Getting data out of stat=
ement. fetch()</a></li>
<ul>
<li><a href=3D"https://phpdelusions.net/pdo#returntypes">Return types.</a><=
/li>
</ul>
<li><a href=3D"https://phpdelusions.net/pdo#fetchcolumn">Getting data out o=
f statement. fetchColumn()</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#fetchall">Getting data out of s=
tatement in dozens different formats. fetchAll()</a></li>
<ul>
<li><a href=3D"https://phpdelusions.net/pdo#array">Getting a plain array.</=
a></li>
<li><a href=3D"https://phpdelusions.net/pdo#column">Getting a column.</a></=
li>
<li><a href=3D"https://phpdelusions.net/pdo#pairs">Getting key-value pairs.=
</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#unique">Getting rows indexed by=
 unique field</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#group">Getting rows grouped by =
some field</a></li>
</ul>
<li><a href=3D"https://phpdelusions.net/pdo#errors">Error handling. Excepti=
ons</a></li>
<ul>
<li><a href=3D"https://phpdelusions.net/pdo#reporting_errors">Reporting PDO=
 errors</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#catch">Catching PDO exceptions<=
/a></li>
</ul>
<li><a href=3D"https://phpdelusions.net/pdo#count">Getting row count with P=
DO</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#affected">Affected rows and ins=
ert id</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#like">Prepared statements and L=
IKE clause</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#in">Prepared statements and IN =
clause</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#identifiers">Protecting table a=
nd field names</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#limit">A problem with LIMIT cla=
use</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#transactions">Transactions</a><=
/li>
<li><a href=3D"https://phpdelusions.net/pdo#call">Calling stored procedures=
 in PDO</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#multiquery">Running multiple qu=
eries with PDO</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#emulation">Emulation mode. PDO:=
:ATTR_EMULATE_PREPARES</a></li>
<ul>
<li><a href=3D"https://phpdelusions.net/pdo#emulation_on">When emulation mo=
de is turned ON</a></li>
<li><a href=3D"https://phpdelusions.net/pdo#emulation_off">When emulation m=
ode is turned OFF</a></li>
</ul>
<li><a href=3D"https://phpdelusions.net/pdo#mysqlnd">Mysqlnd and buffered q=
ueries. Huge datasets. </a></li>
<li style=3D"list-style-type: '&#9998;';"><a href=3D"https://phpdelusions.n=
et/pdo#comments">Comments (265)</a></li></ol><br>
<p>There are many tutorials on PDO already, but unfortunately, most of them=
 fail to explain the real benefits of PDO, or even promote rather bad pract=
ices. The only two exceptions are <a href=3D"http://www.phptherightway.com/=
#pdo_extension">phptherightway.com</a> and <a href=3D"http://wiki.hashphp.o=
rg/PDO_Tutorial_for_MySQL_Developers">hashphp.org</a>, but they miss a lot =
of important information. As a result, half of PDO's features remain in obs=
curity and are almost never used by PHP developers, who, as a result, are c=
onstantly trying to reinvent the wheel which <em>already exists in PDO.</em=
></p>
<p>Unlike those, this tutorial is written by someone who has used PDO for m=
any years, dug through it, and answered thousands questions on Stack Overfl=
ow (the <a href=3D"http://stackoverflow.com/help/badges/4220/pdo">sole gold=
 PDO badge bearer</a>). Following <a href=3D"https://phpdelusions.net/">the=
 mission of this site</a>, this article will disprove various delusions and=
 bad practices, while showing the right way instead.</p>
<p>Although this tutorial is based on <strong>mysql</strong> driver, the in=
formation, in general, is applicable for any driver supported.</p>
<h3 id=3D"why" class=3D"title-h3">Why PDO?</h3>
<p>First things first. Why <abbr title=3D"PHP Data Objects">PDO</abbr> at a=
ll?</p>
<p>PDO is a <a href=3D"https://en.wikipedia.org/wiki/Database_abstraction_l=
ayer">Database Access Abstraction Layer</a>. The abstraction, however, is t=
wo-fold: one is widely known but less significant, while another is obscure=
 but of most importance.</p>
<p>Everyone knows that PDO offers unified interface to access <a href=3D"ht=
tp://php.net/manual/en/pdo.drivers.php">many different databases</a>. Altho=
ugh this feature is magnificent by itself, it doesn't make a big deal for t=
he particular application, where only one database backend is used anyway. =
And, despite some rumors, it is impossible to switch database backends by c=
hanging a single line in PDO config - due to different SQL flavors (to do s=
o, one needs to use an averaged query language like <a href=3D"http://doctr=
ine-orm.readthedocs.org/projects/doctrine-orm/en/latest/reference/dql-doctr=
ine-query-language.html">DQL</a>). Thus, for the average LAMP developer, th=
is point is rather insignificant, and to him, PDO is just a more complicate=
d version of familiar <code>mysql(i)_query()</code> function. However, it i=
s not; it is much, much more.</p>
<p>PDO abstracts not only a database API, but also basic operations that ot=
herwise have to be repeated hundreds of times in every application, making =
your code extremely <abbr title=3D"Write Everything Twice">WET</abbr>. <a h=
ref=3D"https://phpdelusions.net/pdo/mysqli_comparison">Unlike <em>mysql</em=
> and <em>mysqli</em></a>, both of which are low level bare APIs not intend=
ed to be used directly (but only as a building material for some higher lev=
el abstraction layer), <code>PDO</code> <em>is</em> such an abstraction alr=
eady. Still incomplete though, but at least usable.</p>
<p>The real PDO benefits are:</p>
<ul>
<li><strong>security</strong> (<em>usable</em> prepared statements)</li>
<li><strong>usability</strong> (many helper functions to automate routine o=
perations)</li>
<li><strong>reusability</strong> (unified API to access multitude of databa=
ses, from SQLite to Oracle)</li>
</ul>
<p>Note that although PDO is the best out of native db drivers, for a moder=
n web-application consider to use an ORM with a Query Builder, or any other=
 higher level abstraction library, with only occasional fallback to vanilla=
 PDO. Good ORMs are Doctrine, Eloquent, RedBean, and Yii::AR. Aura.SQL is a=
 good example of a PDO wrapper with many additional features.</p>
<p>Either way, it's good to know the basic tools first. So, let's begin:</p=
>
<h3 id=3D"dsn" class=3D"title-h3">Connecting. DSN</h3>
<p>PDO has a fancy connection method called <a href=3D"https://en.wikipedia=
.org/wiki/Data_source_name">DSN</a>. It's nothing complicated though - inst=
ead of one plain and simple list of options, PDO asks you to input differen=
t configuration directives in three different places:</p>
<ul>
<li><code>database driver</code>, <code>host</code>, <code>db (schema) name=
</code> and <code>charset</code>, as well as less frequently used <code>por=
t</code> and <code>unix_socket</code> go into DSN;</li>
<li><code>username</code> and <code>password</code> go to constructor;</li>
<li>all other options go into options array.</li>
</ul>
<p>where DSN is a semicolon-delimited string, consists of <code>param=3Dval=
ue</code> pairs, that begins from the driver name and a colon:</p>
<pre><code><code><span style=3D"color: #0000BB">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;mysql</span><span style=3D"color: #007700">:</span><span style=3D"=
color: #0000BB">host</span><span style=3D"color: #007700">=3D</span><span s=
tyle=3D"color: #0000BB">localhost</span><span style=3D"color: #007700">;</s=
pan><span style=3D"color: #0000BB">dbname</span><span style=3D"color: #0077=
00">=3D</span><span style=3D"color: #0000BB">test</span><span style=3D"colo=
r: #007700">;</span><span style=3D"color: #0000BB">port</span><span style=
=3D"color: #007700">=3D</span><span style=3D"color: #0000BB">3306</span><sp=
an style=3D"color: #007700">;</span><span style=3D"color: #0000BB">charset<=
/span><span style=3D"color: #007700">=3D</span><span style=3D"color: #0000B=
B">utf8mb4<br>driver</span><span style=3D"color: #007700">^&nbsp;&nbsp;&nbs=
p;&nbsp;^&nbsp;</span><span style=3D"color: #0000BB">colon&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">=
^</span><span style=3D"color: #0000BB">param</span><span style=3D"color: #0=
07700">=3D</span><span style=3D"color: #0000BB">value&nbsp;pair&nbsp;&nbsp;=
&nbsp;&nbsp;</span><span style=3D"color: #007700">^</span><span style=3D"co=
lor: #0000BB">semicolon&nbsp;&nbsp;</span></code></code></pre>
<p>Note that it's important to follow the proper format - <strong>no spaces=
 or quotes or other decorations have to be used in DSN,</strong> but only p=
arameters, values and delimiters, as shown in the <a href=3D"http://php.net=
/manual/en/pdo.construct.php">manual</a>.</p>
<p>Here goes an example for mysql:</p>
<pre><code><code><span style=3D"color: #0000BB">$host&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'127.0=
.0.1'</span><span style=3D"color: #007700">;<br></span><span style=3D"color=
: #0000BB">$db&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&n=
bsp;</span><span style=3D"color: #DD0000">'test'</span><span style=3D"color=
: #007700">;<br></span><span style=3D"color: #0000BB">$user&nbsp;</span><sp=
an style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">=
'root'</span><span style=3D"color: #007700">;<br></span><span style=3D"colo=
r: #0000BB">$pass&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #DD0000">''</span><span style=3D"color: #007700">;<=
br></span><span style=3D"color: #0000BB">$charset&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'utf8mb4=
'</span><span style=3D"color: #007700">;<br><br></span><span style=3D"color=
: #0000BB">$dsn&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span>=
<span style=3D"color: #DD0000">"mysql:host=3D</span><span style=3D"color: #=
0000BB">$host</span><span style=3D"color: #DD0000">;dbname=3D</span><span s=
tyle=3D"color: #0000BB">$db</span><span style=3D"color: #DD0000">;charset=
=3D</span><span style=3D"color: #0000BB">$charset</span><span style=3D"colo=
r: #DD0000">"</span><span style=3D"color: #007700">;<br></span><span style=
=3D"color: #0000BB">$options&nbsp;</span><span style=3D"color: #007700">=3D=
&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">PD=
O</span><span style=3D"color: #007700">::</span><span style=3D"color: #0000=
BB">ATTR_ERRMODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><spa=
n style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</spa=
n><span style=3D"color: #0000BB">ERRMODE_EXCEPTION</span><span style=3D"col=
or: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #000=
0BB">PDO</span><span style=3D"color: #007700">::</span><span style=3D"color=
: #0000BB">ATTR_DEFAULT_FETCH_MODE&nbsp;</span><span style=3D"color: #00770=
0">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=
=3D"color: #007700">::</span><span style=3D"color: #0000BB">FETCH_ASSOC</sp=
an><span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span=
 style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span=
><span style=3D"color: #0000BB">ATTR_EMULATE_PREPARES&nbsp;&nbsp;&nbsp;</sp=
an><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color:=
 #0000BB">false</span><span style=3D"color: #007700">,<br>];<br>try&nbsp;{<=
br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$pdo=
&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;new&nbsp;</span><span =
style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">(</span><=
span style=3D"color: #0000BB">$dsn</span><span style=3D"color: #007700">,&n=
bsp;</span><span style=3D"color: #0000BB">$user</span><span style=3D"color:=
 #007700">,&nbsp;</span><span style=3D"color: #0000BB">$pass</span><span st=
yle=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$option=
s</span><span style=3D"color: #007700">);<br>}&nbsp;catch&nbsp;(\</span><sp=
an style=3D"color: #0000BB">PDOException&nbsp;$e</span><span style=3D"color=
: #007700">)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;\<=
/span><span style=3D"color: #0000BB">PDOException</span><span style=3D"colo=
r: #007700">(</span><span style=3D"color: #0000BB">$e</span><span style=3D"=
color: #007700">-&gt;</span><span style=3D"color: #0000BB">getMessage</span=
><span style=3D"color: #007700">(),&nbsp;(int)</span><span style=3D"color: =
#0000BB">$e</span><span style=3D"color: #007700">-&gt;</span><span style=3D=
"color: #0000BB">getCode</span><span style=3D"color: #007700">());<br>}</sp=
an><span style=3D"color: #0000BB"></span></code></code></pre>
<p>With all aforementioned variables properly set, we will have proper PDO =
instance in <code>$pdo</code> variable.</p>
<p>Important notes for the late mysql extension users:</p>
<ol>
<li>Unlike old <code>mysql_*</code> functions, which can be used anywhere i=
n the code, <code>PDO</code> instance is stored in a regular variable, whic=
h means it can be inaccessible inside functions - so, one has to make it ac=
cessible, by means of passing it via function parameters or using more adva=
nced techniques, such as IoC container.</li>
<li>The connection has to be made only once! No connects in every function.=
 No connects in every class constructor. Otherwise, multiple connections wi=
ll be created, which will eventually kill your database server. Thus, a sol=
e PDO instance has to be created and then used through whole script executi=
on.</li>
<li>It is very important to <strong>set charset through DSN</strong> - that=
's the only proper way because it tells PDO which charset is going to be us=
ed. Therefore forget about running <code>SET NAMES</code> query manually, e=
ither via <code>query()</code> or <code>PDO::MYSQL_ATTR_INIT_COMMAND</code>=
. Only if your PHP version is unacceptably outdated (namely below 5.3.6), y=
ou have to use <code>SET NAMES</code> query and always turn <a href=3D"http=
s://phpdelusions.net/pdo#emulation">emulation mode</a> off. </li>
</ol>
<p>More details regarding Mysql can be found in the corresponding chapter, =
<a href=3D"https://phpdelusions.net/pdo_examples/connect_to_mysql">Connecti=
ng to MySQL</a></p>
<h3 id=3D"query" class=3D"title-h3">Running queries. PDO::query()</h3>
<p>There are two ways to run a query in PDO.
If no variables are going to be used in the query, you can use the <a href=
=3D"http://php.net/manual/en/pdo.query.php">PDO::query()</a> method. It wil=
l run your query and return special object of <a href=3D"http://php.net/man=
ual/en/class.pdostatement.php">PDOStatement class</a> which can be roughly =
compared to a resource, returned by <code>mysql_query()</code>, especially =
in the way you can get actual rows out of it:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">'SELECT&nbsp;name&nbsp;FROM&nbsp;users'</span><span style=3D"col=
or: #007700">);<br>while&nbsp;(</span><span style=3D"color: #0000BB">$row&n=
bsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"co=
lor: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span =
style=3D"color: #0000BB">fetch</span><span style=3D"color: #007700">())<br>=
{<br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style=3D"color: #0000BB=
">$row</span><span style=3D"color: #007700">[</span><span style=3D"color: #=
DD0000">'name'</span><span style=3D"color: #007700">]&nbsp;.&nbsp;</span><s=
pan style=3D"color: #DD0000">"\n"</span><span style=3D"color: #007700">;<br=
>}</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Also, the <code>query()</code> method allows us to use a neat method cha=
ining for SELECT queries, which will be shown below.</p>
<h3 id=3D"prepared" class=3D"title-h3">Prepared statements. Protection from=
 SQL injections</h3>
<p>This is the main and the only important reason why you were deprived fro=
m your beloved <code>mysql_query()</code> function and thrown into the hars=
h world of Data Objects: PDO has prepared statements support out of the box=
. Prepared statement is <strong>the only proper way to run a query</strong>=
, if any variable is going to be used in it. The reason why it is so import=
ant is explained in detail in <a href=3D"https://phpdelusions.net/sql_injec=
tion">The Hitchhiker's Guide to SQL Injection prevention</a>.</p>
<p>So, for every query you run, if at least one variable is going to be use=
d, you have to substitute it with a <strong>placeholder</strong>, then prep=
are your query, and then execute it, passing variables separately.</p>
<p>Long story short, it is not as hard as it seems. In most cases, you need=
 only two functions - <a href=3D"http://php.net/manual/en/pdo.prepare.php">=
prepare()</a> and <a href=3D"http://php.net/manual/en/pdostatement.execute.=
php">execute()</a>.</p>
<p>First of all, you have to alter your query, adding placeholders in place=
 of variables. Say, a code like this</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;*&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;email&nbsp;=3D&nbsp;'</span><s=
pan style=3D"color: #0000BB">$email</span><span style=3D"color: #DD0000">'&=
nbsp;AND&nbsp;status=3D'</span><span style=3D"color: #0000BB">$status</span=
><span style=3D"color: #DD0000">'"</span><span style=3D"color: #007700">;</=
span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>will become</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'SELECT=
&nbsp;*&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;email&nbsp;=3D&nbsp;?&nbsp;AND=
&nbsp;status=3D?'</span><span style=3D"color: #007700">;</span><span style=
=3D"color: #0000BB"></span></code></code></pre>
<p>or</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'SELECT=
&nbsp;*&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;email&nbsp;=3D&nbsp;:email&nbs=
p;AND&nbsp;status=3D:status'</span><span style=3D"color: #007700">;</span><=
span style=3D"color: #0000BB"></span></code></code></pre>
<p>Note that PDO supports positional (<code>?</code>) and named (<code>:ema=
il</code>) placeholders, the latter always begins from a colon and can be w=
ritten using letters, digits and underscores only.
Also note that <strong>no quotes</strong> have to be ever used around place=
holders.</p>
<p>Having a query with placeholders, you have to prepare it, using the <cod=
e>PDO::prepare()</code> method. This function will return the same <code>PD=
OStatement</code> object we were talking about above, but <em>without any d=
ata attached to it</em>.</p>
<p>Finally, to get the query executed, you must run <code>execute()</code> =
method of this object, passing variables in it, in the form of array. And a=
fter that, you will be able to get the resulting data out of statement (if =
applicable):</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">'SELECT&nbsp;*&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;email&nbsp=
;=3D&nbsp;?&nbsp;AND&nbsp;status=3D?'</span><span style=3D"color: #007700">=
);<br></span><span style=3D"color: #0000BB">$stmt</span><span style=3D"colo=
r: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><span =
style=3D"color: #007700">([</span><span style=3D"color: #0000BB">$email</sp=
an><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000=
BB">$status</span><span style=3D"color: #007700">]);<br></span><span style=
=3D"color: #0000BB">$user&nbsp;</span><span style=3D"color: #007700">=3D&nb=
sp;</span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: =
#007700">-&gt;</span><span style=3D"color: #0000BB">fetch</span><span style=
=3D"color: #007700">();<br></span><span style=3D"color: #FF8000">//&nbsp;or=
<br></span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span style=3D"=
color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><=
span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">pr=
epare</span><span style=3D"color: #007700">(</span><span style=3D"color: #D=
D0000">'SELECT&nbsp;*&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;email&nbsp;=3D&n=
bsp;:email&nbsp;AND&nbsp;status=3D:status'</span><span style=3D"color: #007=
700">);<br></span><span style=3D"color: #0000BB">$stmt</span><span style=3D=
"color: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><=
span style=3D"color: #007700">([</span><span style=3D"color: #DD0000">'emai=
l'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span sty=
le=3D"color: #0000BB">$email</span><span style=3D"color: #007700">,&nbsp;</=
span><span style=3D"color: #DD0000">'status'&nbsp;</span><span style=3D"col=
or: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">$status</sp=
an><span style=3D"color: #007700">]);<br></span><span style=3D"color: #0000=
BB">$user&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span =
style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</=
span><span style=3D"color: #0000BB">fetch</span><span style=3D"color: #0077=
00">();</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>As you can see, for the positional placeholders, you have to supply a re=
gular array with values, while for the named placeholders, it has to be an =
associative array, where keys have to match the placeholder names in the qu=
ery. You cannot mix positional and named placeholders in the same query.</p=
>
<p>Please note that positional placeholders let you write shorter code, but=
 are sensitive to the order of arguments (which have to be exactly the same=
 as the order of the corresponding placeholders in the query). While named =
placeholders make your code more verbose, they allow random binding order.<=
/p>
<p>Also note that despite a widespread delusion, no "<code>:</code>" in the=
 keys is required.</p>
<p>After the execution you may start getting your data, using all supported=
 methods, as described down in this article.</p>
<p>More examples can be found in the <a href=3D"https://phpdelusions.net/pd=
o_examples">respective article</a>.</p>
<h4 id=3D"methods" class=3D"title-h4">Binding methods</h4>
<p>Passing data into <code>execute()</code> (like shown above) should be co=
nsidered default and most convenient method.
When this method is used, all values will be bound as <strong>strings</stro=
ng> (save for <code>NULL</code> values, that will be sent to the query as i=
s, i.e. as SQL <code>NULL</code>), but most of time it's all right and won'=
t cause any problem. </p>
<p>However, sometimes it's better to set the data type explicitly. Possible=
 cases are:</p>
<ul>
<li><a href=3D"https://phpdelusions.net/pdo#limit">LIMIT</a> clause (or any=
 other SQL clause that just cannot accept a string operand) if <a href=3D"h=
ttps://phpdelusions.net/pdo#emulation">emulation mode</a> is turned ON. </l=
i>
<li>complex queries with non-trivial query plan that can be affected by a w=
rong operand type</li>
<li>peculiar column types, like <code>BIGINT</code> or <code>BOOLEAN</code>=
 that require an operand of exact type to be bound (note that in order to b=
ind a BIGINT value with PDO::PARAM_INT you need a <a href=3D"https://phpdel=
usions.net/pdo#mysqlnd">mysqlnd</a>-based installation). </li>
</ul>
<p>In such a case explicit binding have to be used, for which you have a ch=
oice of two functions, <a href=3D"http://php.net/manual/en/pdostatement.bin=
dvalue.php">bindValue()</a> and <a href=3D"http://php.net/manual/en/pdostat=
ement.bindparam.php">bindParam()</a>. The former one has to be preferred, b=
ecause, unlike <code>bindParam()</code> it has no side effects to deal with=
.</p>
<h4 id=3D"bindable" class=3D"title-h4">Query parts you can bind</h4>
<p>It is very important to understand which query parts you can bind using =
prepared statements and which you cannot. In fact, the list is overwhelming=
ly short: only string and numeric literals can be bound. So you can tell th=
at as long as your data can be represented in the query as a numeric or a q=
uoted string literal - it can be bound. For all other cases you cannot use =
PDO prepared statements at all: neither an identifier, or a comma-separated=
 list, or a part of a quoted string literal or whatever else arbitrary quer=
y part cannot be bound using a prepared statement.</p>
<p>Workarounds for the most frequent use cases can be found in the <a href=
=3D"https://phpdelusions.net/pdo#like">corresponding part of the article</a=
></p>
<h3 id=3D"multiexec" class=3D"title-h3">Prepared statements. Multiple execu=
tion</h3>
<p>Sometimes you can use prepared statements for the multiple execution of =
a prepared query. It is slightly faster than performing the same query agai=
n and again, as it does query parsing only once.
This feature would have been more useful if it was possible to execute a st=
atement prepared in another PHP instance. But alas - it is not. So, you are=
 limited to repeating the same query only within the same instance, which i=
s seldom needed in regular PHP scripts and which is limiting the use of thi=
s feature to repeated inserts or updates:</p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span st=
yle=3D"color: #0000BB">1&nbsp;</span><span style=3D"color: #007700">=3D&gt;=
&nbsp;</span><span style=3D"color: #0000BB">1000</span><span style=3D"color=
: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000B=
B">5&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;&nbsp;</span><=
span style=3D"color: #0000BB">300</span><span style=3D"color: #007700">,<br=
>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">9&nbsp;</spa=
n><span style=3D"color: #007700">=3D&gt;&nbsp;&nbsp;</span><span style=3D"c=
olor: #0000BB">200</span><span style=3D"color: #007700">,<br>];<br></span><=
span style=3D"color: #0000BB">$stmt&nbsp;</span><span style=3D"color: #0077=
00">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><span style=
=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">prepare</spa=
n><span style=3D"color: #007700">(</span><span style=3D"color: #DD0000">'UP=
DATE&nbsp;users&nbsp;SET&nbsp;bonus&nbsp;=3D&nbsp;bonus&nbsp;+&nbsp;?&nbsp;=
WHERE&nbsp;id&nbsp;=3D&nbsp;?'</span><span style=3D"color: #007700">);<br>f=
oreach&nbsp;(</span><span style=3D"color: #0000BB">$data&nbsp;</span><span =
style=3D"color: #007700">as&nbsp;</span><span style=3D"color: #0000BB">$id&=
nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=
=3D"color: #0000BB">$bonus</span><span style=3D"color: #007700">)<br>{<br>&=
nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><s=
pan style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">exe=
cute</span><span style=3D"color: #007700">([</span><span style=3D"color: #0=
000BB">$bonus</span><span style=3D"color: #007700">,&nbsp;</span><span styl=
e=3D"color: #0000BB">$id</span><span style=3D"color: #007700">]);<br>}</spa=
n><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Note that this feature is a bit overrated. Not only it is needed too sel=
dom to talk about, but the performance gain is not that big - query parsing=
 is <i>real</i> fast these times.</p>
<p>Note that you can get this advantage only when <a href=3D"https://phpdel=
usions.net/pdo#emulation">emulation mode</a> is turned <strong>off</strong>=
.</p>
<h3 id=3D"dml" class=3D"title-h3">Running SELECT INSERT, UPDATE, or DELETE =
statements</h3>
<p>Come on folks.
There is absolutely nothing special in these queries. To PDO they all the s=
ame. It doesn't matter which query you are running.</p>
<p>Just like it was shown above, what you need is to prepare a query with p=
laceholders, and then execute it, sending variables separately. Either for =
<code>DELETE</code> and <code>SELECT</code> query the process is essentiall=
y the same. The only difference is (as <abbr title=3D"Data Manipulation Lan=
guage, INSERT, UPDATE and DELETE queries">DML</abbr> queries do not return =
any data), that you can use the method chaining and thus call <code>execute=
()</code> right along with <code>prepare()</code>:</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"UPDATE=
&nbsp;users&nbsp;SET&nbsp;name&nbsp;=3D&nbsp;?&nbsp;WHERE&nbsp;id&nbsp;=3D&=
nbsp;?"</span><span style=3D"color: #007700">;<br></span><span style=3D"col=
or: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span st=
yle=3D"color: #0000BB">prepare</span><span style=3D"color: #007700">(</span=
><span style=3D"color: #0000BB">$sql</span><span style=3D"color: #007700">)=
-&gt;</span><span style=3D"color: #0000BB">execute</span><span style=3D"col=
or: #007700">([</span><span style=3D"color: #0000BB">$name</span><span styl=
e=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$id</span=
><span style=3D"color: #007700">]);</span><span style=3D"color: #0000BB"></=
span></code></code></pre>
<p>However, if you want to get the number of affected rows, the code will h=
ave to be the same boresome three lines:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"DELETE&nbsp;FROM&nbsp;goods&nbsp;WHERE&nbsp;category&nbsp;=3D=
&nbsp;?"</span><span style=3D"color: #007700">);<br></span><span style=3D"c=
olor: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span=
 style=3D"color: #0000BB">execute</span><span style=3D"color: #007700">([</=
span><span style=3D"color: #0000BB">$cat</span><span style=3D"color: #00770=
0">]);<br></span><span style=3D"color: #0000BB">$deleted&nbsp;</span><span =
style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$st=
mt</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #=
0000BB">rowCount</span><span style=3D"color: #007700">();</span><span style=
=3D"color: #0000BB"></span></code></code></pre>
<p>More examples can be found in the <a href=3D"https://phpdelusions.net/pd=
o_examples">respective article</a>.</p>
<h3 id=3D"foreach" class=3D"title-h3">Getting data out of statement. foreac=
h()</h3>
<p>The most basic and direct way to get multiple rows from a statement woul=
d be <code>foreach()</code> loop. Thanks to <a href=3D"http://php.net/manua=
l/en/class.traversable.php">Traversable</a> interface, <code>PDOStatement</=
code> can be iterated over by using <code>foreach()</code> operator:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">'SELECT&nbsp;name&nbsp;FROM&nbsp;users'</span><span style=3D"col=
or: #007700">);<br>foreach&nbsp;(</span><span style=3D"color: #0000BB">$stm=
t&nbsp;</span><span style=3D"color: #007700">as&nbsp;</span><span style=3D"=
color: #0000BB">$row</span><span style=3D"color: #007700">)<br>{<br>&nbsp;&=
nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style=3D"color: #0000BB">$row</span=
><span style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'nam=
e'</span><span style=3D"color: #007700">]&nbsp;.&nbsp;</span><span style=3D=
"color: #DD0000">"\n"</span><span style=3D"color: #007700">;<br>}</span><sp=
an style=3D"color: #0000BB"></span></code></code></pre>
<p>Note that this method is memory-friendly, as it doesn't load all the res=
ulting rows in the memory but delivers them one by one (though keep in mind=
 this <a href=3D"https://phpdelusions.net/pdo#mysqlnd">issue</a>).</p>
<h3 id=3D"fetch" class=3D"title-h3">Getting data out of statement. fetch()<=
/h3>
<p>We have seen this function already, but let's take a closer look. It fet=
ches a single row from database, and moves the internal pointer in the resu=
lt set, so consequent calls to this function will return all the resulting =
rows one by one. Which makes this method a rough analogue to <code>mysql_fe=
tch_array()</code> but it works in a slightly different way: instead of man=
y separate functions (<code>mysql_fetch_assoc()</code>, <code>mysql_fetch_r=
ow()</code>, etc), there is only one, but its behavior can be changed by a =
parameter. There are many fetch modes in PDO, and we will discuss them late=
r, but here are few for starter:</p>
<ul>
<li><code>PDO::FETCH_NUM</code> returns enumerated array</li>
<li><code>PDO::FETCH_ASSOC</code> returns associative array</li>
<li><code>PDO::FETCH_BOTH</code> - both of the above</li>
<li><code>PDO::FETCH_OBJ</code> returns object</li>
<li><code>PDO::FETCH_LAZY</code> allows all three (numeric associative and =
object) methods without memory overhead.</li>
</ul>
<p>From the above you can tell that this function have to be used in two ca=
ses:</p>
<ol>
<li>
<p>When only one row is expected - to get that only row. For example,</p>
<pre><code><code><span style=3D"color: #0000BB">$row&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">fetch</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span style=3D=
"color: #0000BB">FETCH_ASSOC</span><span style=3D"color: #007700">);</span>=
<span style=3D"color: #0000BB"></span></code></code></pre>
<p>Will give you single row from the statement, in the form of associative =
array.</p>
</li>
<li>When we need to process the returned data somehow before use. In this c=
ase it have to be run through usual while loop, like one shown <a href=3D"h=
ttps://phpdelusions.net/pdo#query">above</a>.</li>
</ol>
<p>Another useful mode is <code>PDO::FETCH_CLASS</code>, which can create a=
n object of particular class</p>
<pre><code><code><span style=3D"color: #0000BB">$news&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">'SELECT&nbsp;*&nbsp;FROM&nbsp;news'</span><span style=3D"color: =
#007700">)-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span s=
tyle=3D"color: #007700">(</span><span style=3D"color: #0000BB">PDO</span><s=
pan style=3D"color: #007700">::</span><span style=3D"color: #0000BB">FETCH_=
CLASS</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"col=
or: #DD0000">'News'</span><span style=3D"color: #007700">);</span><span sty=
le=3D"color: #0000BB"></span></code></code></pre>
<p>will produce an array filled with objects of News class, setting class p=
roperties from returned values. Note that in this mode</p>
<ul>
<li>properties are set <em>before</em> constructor call</li>
<li>for all undefined properties <code>__set</code> magic method will be ca=
lled</li>
<li>if there is no <code>__set</code> method in the class, then new propert=
y will be created</li>
<li>private properties will be filled as well, which is a bit unexpected bu=
t quite handy</li>
</ul>
<p>Note that default mode is <code>PDO::FETCH_BOTH</code>, but you can chan=
ge it using <code>PDO::ATTR_DEFAULT_FETCH_MODE</code> configuration option =
as shown in the connection example. Thus, once set, it can be omitted most =
of the time.</p>
<h4 id=3D"returntypes" class=3D"title-h4">Return types.</h4>
<p>Only when PDO is built upon <a href=3D"https://phpdelusions.net/pdo#mysq=
lnd">mysqlnd</a> <em>and</em> <a href=3D"https://phpdelusions.net/pdo#emula=
tion">emulation mode</a> is <strong>off</strong>, then PDO will return <cod=
e>int</code> and <code>float</code> values with respective types. Say, if w=
e create a table</p>
<pre><code><code><span style=3D"color: #0000BB">create&nbsp;table&nbsp;type=
test&nbsp;</span><span style=3D"color: #007700">(</span><span style=3D"colo=
r: #0000BB">string&nbsp;varchar</span><span style=3D"color: #007700">(</spa=
n><span style=3D"color: #0000BB">255</span><span style=3D"color: #007700">)=
,&nbsp;`</span><span style=3D"color: #DD0000">int</span><span style=3D"colo=
r: #007700">`&nbsp;</span><span style=3D"color: #0000BB">int</span><span st=
yle=3D"color: #007700">,&nbsp;`</span><span style=3D"color: #DD0000">float<=
/span><span style=3D"color: #007700">`&nbsp;</span><span style=3D"color: #0=
000BB">float</span><span style=3D"color: #007700">,&nbsp;`</span><span styl=
e=3D"color: #DD0000">null</span><span style=3D"color: #007700">`&nbsp;</spa=
n><span style=3D"color: #0000BB">int</span><span style=3D"color: #007700">)=
;<br></span><span style=3D"color: #0000BB">insert&nbsp;into&nbsp;typetest&n=
bsp;values</span><span style=3D"color: #007700">(</span><span style=3D"colo=
r: #DD0000">'foo'</span><span style=3D"color: #007700">,</span><span style=
=3D"color: #0000BB">1</span><span style=3D"color: #007700">,</span><span st=
yle=3D"color: #0000BB">1.1</span><span style=3D"color: #007700">,</span><sp=
an style=3D"color: #0000BB">NULL</span><span style=3D"color: #007700">);</s=
pan><span style=3D"color: #0000BB"></span></code></code></pre>
<p>And then query it from mysqlnd-based PDO with emulation turned off, the =
output will be</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">array(</span><span style=3D"color: #0000BB">4</span><span style=
=3D"color: #007700">)&nbsp;{<br>&nbsp;&nbsp;[</span><span style=3D"color: #=
DD0000">"string"</span><span style=3D"color: #007700">]&nbsp;=3D&gt;&nbsp;<=
/span><span style=3D"color: #0000BB">string</span><span style=3D"color: #00=
7700">(</span><span style=3D"color: #0000BB">3</span><span style=3D"color: =
#007700">)&nbsp;</span><span style=3D"color: #DD0000">"foo"<br>&nbsp;&nbsp;=
</span><span style=3D"color: #007700">[</span><span style=3D"color: #DD0000=
">"int"</span><span style=3D"color: #007700">]&nbsp;&nbsp;&nbsp;&nbsp;=3D&g=
t;&nbsp;</span><span style=3D"color: #0000BB">int</span><span style=3D"colo=
r: #007700">(</span><span style=3D"color: #0000BB">1</span><span style=3D"c=
olor: #007700">)<br>&nbsp;&nbsp;[</span><span style=3D"color: #DD0000">"flo=
at"</span><span style=3D"color: #007700">]&nbsp;&nbsp;=3D&gt;&nbsp;</span><=
span style=3D"color: #0000BB">float</span><span style=3D"color: #007700">(<=
/span><span style=3D"color: #0000BB">1.1</span><span style=3D"color: #00770=
0">)<br>&nbsp;&nbsp;[</span><span style=3D"color: #DD0000">"null"</span><sp=
an style=3D"color: #007700">]&nbsp;&nbsp;&nbsp;=3D&gt;&nbsp;</span><span st=
yle=3D"color: #0000BB">NULL<br></span><span style=3D"color: #007700">}</spa=
n><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Otherwise the familiar <code>mysql_fetch_array()</code> behavior will be=
 followed - all values returned as strings with only <code>NULL</code> retu=
rned as <code>NULL</code>.</p>
<p>If for some reason you don't like this behavior and prefer the old style=
 with strings and NULLs only, then you can use the following configuration =
option to override it:</p>
<pre><code><code><span style=3D"color: #0000BB">$pdo</span><span style=3D"c=
olor: #007700">-&gt;</span><span style=3D"color: #0000BB">setAttribute</spa=
n><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">PDO=
</span><span style=3D"color: #007700">::</span><span style=3D"color: #0000B=
B">ATTR_STRINGIFY_FETCHES</span><span style=3D"color: #007700">,&nbsp;</spa=
n><span style=3D"color: #0000BB">true</span><span style=3D"color: #007700">=
);&nbsp;</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Note that for the <code>DECIMAL</code> type the string is always returne=
d, due to nature of this type intended to retain the precise value, unlike =
deliberately non-precise FLOAT and DOUBLE types.</p>
<h3 id=3D"fetchcolumn" class=3D"title-h3">Getting data out of statement. fe=
tchColumn()</h3>
<p>A neat helper function that returns value of the singe field of returned=
 row. Very handy when we are selecting only one field:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #FF8000">//&nbsp;Getting&nbsp;the&nbsp;name&nbsp;based&nbsp;on&nbsp;id<br=
></span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span style=3D"col=
or: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><spa=
n style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">prepa=
re</span><span style=3D"color: #007700">(</span><span style=3D"color: #DD00=
00">"SELECT&nbsp;name&nbsp;FROM&nbsp;table&nbsp;WHERE&nbsp;id=3D?"</span><s=
pan style=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$s=
tmt</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: =
#0000BB">execute</span><span style=3D"color: #007700">([</span><span style=
=3D"color: #0000BB">$id</span><span style=3D"color: #007700">]);<br></span>=
<span style=3D"color: #0000BB">$name&nbsp;</span><span style=3D"color: #007=
700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><span style=
=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">fetchColumn<=
/span><span style=3D"color: #007700">();<br><br></span><span style=3D"color=
: #FF8000">//&nbsp;getting&nbsp;number&nbsp;of&nbsp;rows&nbsp;in&nbsp;the&n=
bsp;table&nbsp;utilizing&nbsp;method&nbsp;chaining<br></span><span style=3D=
"color: #0000BB">$count&nbsp;</span><span style=3D"color: #007700">=3D&nbsp=
;</span><span style=3D"color: #0000BB">$pdo</span><span style=3D"color: #00=
7700">-&gt;</span><span style=3D"color: #0000BB">query</span><span style=3D=
"color: #007700">(</span><span style=3D"color: #DD0000">"SELECT&nbsp;count(=
*)&nbsp;FROM&nbsp;table"</span><span style=3D"color: #007700">)-&gt;</span>=
<span style=3D"color: #0000BB">fetchColumn</span><span style=3D"color: #007=
700">();</span><span style=3D"color: #0000BB"></span></code></code></pre>
<h3 id=3D"fetchall" class=3D"title-h3">Getting data out of statement in doz=
ens different formats. fetchAll()</h3>
<p>That's most interesting function, with most astonishing features.
Mostly thanks to its existence one can call PDO a wrapper, as this function=
 can automate many operations otherwise performed manually.</p>
<p><code>PDOStatement::fetchAll()</code> returns an array that consists of =
<b>all the rows</b> returned by the query.
From this fact we can make two conclusions:</p>
<ol>
<li>This function should not be used if many* rows have been selected. In s=
uch a case, a conventional while loop should be used to fetch rows one by o=
ne instead of getting them all as an array at once.<br>
* <em>"many" means more than is suitable to be shown on the average web pag=
e.</em></li>
<li>This function is mostly useful in a modern web application that never o=
utputs data right away during fetching, but rather passes it to template.</=
li>
</ol>
<p>You'd be amazed, in how many different formats this function can return =
data in (and how little an average PHP user knows of them), all controlled =
by <code>PDO::FETCH_*</code> variables.
Some of them are:</p>
<h4 id=3D"array" class=3D"title-h4">Getting a plain array.</h4>
<p>By default, this function will return just simple enumerated array consi=
sts of all the returned rows. Row formatting constants, such as <code>PDO::=
FETCH_NUM</code>, <code>PDO::FETCH_ASSOC</code>, <code>PDO::FETCH_OBJ</code=
> etc can change the row format. </p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">'SELECT&nbsp;name&nbsp;FROM&nbsp;users'</span><span style=3D"col=
or: #007700">)-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><sp=
an style=3D"color: #007700">(</span><span style=3D"color: #0000BB">PDO</spa=
n><span style=3D"color: #007700">::</span><span style=3D"color: #0000BB">FE=
TCH_ASSOC</span><span style=3D"color: #007700">);<br></span><span style=3D"=
color: #0000BB">var_export</span><span style=3D"color: #007700">(</span><sp=
an style=3D"color: #0000BB">$data</span><span style=3D"color: #007700">);<b=
r></span><span style=3D"color: #FF8000">/*<br>array&nbsp;(<br>&nbsp;&nbsp;0=
&nbsp;=3D&gt;&nbsp;array('John'),<br>&nbsp;&nbsp;1&nbsp;=3D&gt;&nbsp;array(=
'Mike'),<br>&nbsp;&nbsp;2&nbsp;=3D&gt;&nbsp;array('Mary'),<br>&nbsp;&nbsp;3=
&nbsp;=3D&gt;&nbsp;array('Kathy'),<br>)*/</span><span style=3D"color: #0000=
BB"></span></code></code></pre>
<h4 id=3D"column" class=3D"title-h4">Getting a column.</h4>
<p>It is often very handy to get plain one-dimensional array right out of t=
he query, if only one column out of many rows being fetched. Here you go:</=
p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">'SELECT&nbsp;name&nbsp;FROM&nbsp;users'</span><span style=3D"col=
or: #007700">)-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><sp=
an style=3D"color: #007700">(</span><span style=3D"color: #0000BB">PDO</spa=
n><span style=3D"color: #007700">::</span><span style=3D"color: #0000BB">FE=
TCH_COLUMN</span><span style=3D"color: #007700">);<br></span><span style=3D=
"color: #FF8000">/*&nbsp;array&nbsp;(<br>&nbsp;&nbsp;0&nbsp;=3D&gt;&nbsp;'J=
ohn',<br>&nbsp;&nbsp;1&nbsp;=3D&gt;&nbsp;'Mike',<br>&nbsp;&nbsp;2&nbsp;=3D&=
gt;&nbsp;'Mary',<br>&nbsp;&nbsp;3&nbsp;=3D&gt;&nbsp;'Kathy',<br>)*/</span><=
span style=3D"color: #0000BB"></span></code></code></pre>
<h4 id=3D"pairs" class=3D"title-h4">Getting key-value pairs.</h4>
<p>Also extremely useful format, when we need to get the same column, but i=
ndexed not by numbers in order but by another field. Here goes <code>PDO::F=
ETCH_KEY_PAIR</code> constant:</p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">'SELECT&nbsp;id,&nbsp;name&nbsp;FROM&nbsp;users'</span><span sty=
le=3D"color: #007700">)-&gt;</span><span style=3D"color: #0000BB">fetchAll<=
/span><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB"=
>PDO</span><span style=3D"color: #007700">::</span><span style=3D"color: #0=
000BB">FETCH_KEY_PAIR</span><span style=3D"color: #007700">);<br></span><sp=
an style=3D"color: #FF8000">/*&nbsp;array&nbsp;(<br>&nbsp;&nbsp;104&nbsp;=
=3D&gt;&nbsp;'John',<br>&nbsp;&nbsp;110&nbsp;=3D&gt;&nbsp;'Mike',<br>&nbsp;=
&nbsp;120&nbsp;=3D&gt;&nbsp;'Mary',<br>&nbsp;&nbsp;121&nbsp;=3D&gt;&nbsp;'K=
athy',<br>)*/</span><span style=3D"color: #0000BB"></span></code></code></p=
re>
<p>Note that you have to select only two columns for this mode, first of wh=
ich have to be unique.</p>
<h4 id=3D"unique" class=3D"title-h4">Getting rows indexed by unique field</=
h4>
<p>Same as above, but getting not one column but full row, yet indexed by a=
n unique field, thanks to
<code>PDO::FETCH_UNIQUE</code> constant:</p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">'SELECT&nbsp;*&nbsp;FROM&nbsp;users'</span><span style=3D"color:=
 #007700">)-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span =
style=3D"color: #007700">(</span><span style=3D"color: #0000BB">PDO</span><=
span style=3D"color: #007700">::</span><span style=3D"color: #0000BB">FETCH=
_UNIQUE</span><span style=3D"color: #007700">);<br></span><span style=3D"co=
lor: #FF8000">/*&nbsp;array&nbsp;(<br>&nbsp;&nbsp;104&nbsp;=3D&gt;&nbsp;arr=
ay&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;'name'&nbsp;=3D&gt;&nbsp;'John',<br>&n=
bsp;&nbsp;&nbsp;&nbsp;'car'&nbsp;=3D&gt;&nbsp;'Toyota',<br>&nbsp;&nbsp;),<b=
r>&nbsp;&nbsp;110&nbsp;=3D&gt;&nbsp;array&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp=
;'name'&nbsp;=3D&gt;&nbsp;'Mike',<br>&nbsp;&nbsp;&nbsp;&nbsp;'car'&nbsp;=3D=
&gt;&nbsp;'Ford',<br>&nbsp;&nbsp;),<br>&nbsp;&nbsp;120&nbsp;=3D&gt;&nbsp;ar=
ray&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;'name'&nbsp;=3D&gt;&nbsp;'Mary',<br>&=
nbsp;&nbsp;&nbsp;&nbsp;'car'&nbsp;=3D&gt;&nbsp;'Mazda',<br>&nbsp;&nbsp;),<b=
r>&nbsp;&nbsp;121&nbsp;=3D&gt;&nbsp;array&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp=
;'name'&nbsp;=3D&gt;&nbsp;'Kathy',<br>&nbsp;&nbsp;&nbsp;&nbsp;'car'&nbsp;=
=3D&gt;&nbsp;'Mazda',<br>&nbsp;&nbsp;),<br>)*/</span><span style=3D"color: =
#0000BB"></span></code></code></pre>
<p>Note that first column selected have to be unique (in this query it is a=
ssumed that first column is id, but to be sure better list it explicitly).<=
/p>
<h4 id=3D"group" class=3D"title-h4">Getting rows grouped by some field</h4>
<p><code>PDO::FETCH_GROUP</code> will group rows into a nested array, where=
 indexes will be unique values from the first columns, and values will be a=
rrays similar to ones returned by regular <code>fetchAll()</code>. The foll=
owing code, for example, will separate boys from girls and put them into di=
fferent arrays:</p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">'SELECT&nbsp;sex,&nbsp;name,&nbsp;car&nbsp;FROM&nbsp;users'</spa=
n><span style=3D"color: #007700">)-&gt;</span><span style=3D"color: #0000BB=
">fetchAll</span><span style=3D"color: #007700">(</span><span style=3D"colo=
r: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span style=
=3D"color: #0000BB">FETCH_GROUP</span><span style=3D"color: #007700">);<br>=
array&nbsp;(<br>&nbsp;&nbsp;</span><span style=3D"color: #DD0000">'male'&nb=
sp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;array&nbsp;(<br>&nbsp=
;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">0&nbsp;</span><spa=
n style=3D"color: #007700">=3D&gt;&nbsp;array&nbsp;(<br>&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span style=3D"color: #DD0000">'name'&nbsp;</span><=
span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #DD=
0000">'John'</span><span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</span><span style=3D"color: #DD0000">'car'&nbsp;</span><sp=
an style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #DD00=
00">'Toyota'</span><span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&n=
bsp;),<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">1&n=
bsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;array&nbsp;(<br>&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #DD0000">'name=
'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span styl=
e=3D"color: #DD0000">'Mike'</span><span style=3D"color: #007700">,<br>&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #DD0000">'car'&=
nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=
=3D"color: #DD0000">'Ford'</span><span style=3D"color: #007700">,<br>&nbsp;=
&nbsp;&nbsp;&nbsp;),<br>&nbsp;&nbsp;),<br>&nbsp;&nbsp;</span><span style=3D=
"color: #DD0000">'female'&nbsp;</span><span style=3D"color: #007700">=3D&gt=
;&nbsp;array&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color:=
 #0000BB">0&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;array&n=
bsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #=
DD0000">'name'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</sp=
an><span style=3D"color: #DD0000">'Mary'</span><span style=3D"color: #00770=
0">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #D=
D0000">'car'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span=
><span style=3D"color: #DD0000">'Mazda'</span><span style=3D"color: #007700=
">,<br>&nbsp;&nbsp;&nbsp;&nbsp;),<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span s=
tyle=3D"color: #0000BB">1&nbsp;</span><span style=3D"color: #007700">=3D&gt=
;&nbsp;array&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span sty=
le=3D"color: #DD0000">'name'&nbsp;</span><span style=3D"color: #007700">=3D=
&gt;&nbsp;</span><span style=3D"color: #DD0000">'Kathy'</span><span style=
=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span s=
tyle=3D"color: #DD0000">'car'&nbsp;</span><span style=3D"color: #007700">=
=3D&gt;&nbsp;</span><span style=3D"color: #DD0000">'Mazda'</span><span styl=
e=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;),<br>&nbsp;&nbsp;),<br>)=
</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>So, this is the ideal solution for such a popular demand like "group eve=
nts by date" or "group goods by category". Some real life use cases:</p>
<ul>
<li><a href=3D"http://stackoverflow.com/q/35317555/285587">How to multiple =
query results in order to reduce the query number?</a></li>
<li><a href=3D"http://stackoverflow.com/a/41263854/285587">List records gro=
uped by category name</a> </li>
</ul>
<p><strong>Other modes</strong></p>
<p>Of course, there is a <code>PDO::FETCH_FUNC</code> for the functional pr=
ogramming fans. </p>
<p>More modes are coming soon.</p>
<h3 id=3D"errors" class=3D"title-h3">Error handling. Exceptions</h3>
<p>Although there are several error handling modes in PDO, the only proper =
one is <code>PDO::ERRMODE_EXCEPTION</code>. So, one ought to always set it =
this way, either by adding this line after creation of PDO instance, </p>
<pre><code><code><span style=3D"color: #0000BB">$dbh</span><span style=3D"c=
olor: #007700">-&gt;</span><span style=3D"color: #0000BB">setAttribute</spa=
n><span style=3D"color: #007700">(&nbsp;</span><span style=3D"color: #0000B=
B">PDO</span><span style=3D"color: #007700">::</span><span style=3D"color: =
#0000BB">ATTR_ERRMODE</span><span style=3D"color: #007700">,&nbsp;</span><s=
pan style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</s=
pan><span style=3D"color: #0000BB">ERRMODE_EXCEPTION&nbsp;</span><span styl=
e=3D"color: #007700">);</span><span style=3D"color: #0000BB"></span></code>=
</code></pre>
<p>or as a connection option, as demonstrated in the example above. And thi=
s is <em>all</em> you need for the basic error reporting. </p>
<h4 id=3D"reporting_errors" class=3D"title-h4">Reporting PDO errors</h4>
<p><strong>TL;DR:</strong><br>
Despite what all other tutorials say, <strong>you don't need a <code>try..c=
atch</code> operator to report PDO errors</strong>. Catch an exception only=
 if you have a handling scenario other than just reporting it. Otherwise ju=
st let it bubble up to a site-wide handler (note that you don't have to wri=
te one, there is a basic built-in handler in PHP, which is quite good).</p>
<p>The only exception (pun not intended) is the creation of the PDO instanc=
e, which in case of error might reveal the connection credentials (that wou=
ld be the part of the stack trace). In order to hide them, we can wrap the =
connection code into a <code>try..catch</code> operator and then throw a ne=
w <code>ErrorException</code> that contains only the message but not the cr=
edentials.</p>
<p><strong>A long rant on the matter:</strong>   </p>
<p>Despite a widespread delusion, you should never catch errors to report t=
hem. A module (like a database layer) should not report its errors. This fu=
nction has to be delegated to an application-wide handler. All we need is t=
o raise an error (in the form of exception) - which we already did. That's =
all. Nor should you "<em>always wrap your PDO operations in a <code>try/cat=
ch</code></em>" like the most popular tutorial from tutsplus recommends. Qu=
ite contrary, catching an exception should be rather an exceptional case (p=
un intended).</p>
<p>In fact, there is nothing special in PDO exceptions - they are errors al=
l the same. Thus, you have to treat them exactly the same way as other erro=
rs. If you had an error handler before, you shouldn't create a dedicated on=
e for PDO. If you didn't care - it's all right too, as PHP is good with bas=
ic error handling and will conduct PDO exceptions all right.</p>
<p>Exception handling is one of the problems with PDO tutorials. Being acqu=
ainted with exceptions for the first time when starting with PDO, authors c=
onsider exceptions dedicated to this library, and start diligently (but imp=
roperly) handling exceptions for PDO only. This is utter nonsense. If one p=
aid no special attention to any exceptions before, they shouldn't have chan=
ged their habit for PDO. If one didn't use <code>try..catch</code> before, =
they should keep with that, eventually learning how to use exceptions and w=
hen it is suitable to catch them.</p>
<p>So now you can tell that the PHP manual is wrong, <a href=3D"http://php.=
net/manual/en/pdo.connections.php">stating that</a></p>
<blockquote>
<p>If your application does not catch the exception thrown from the PDO con=
structor, the default action taken by the zend engine is to terminate the s=
cript and display a back trace. This back trace will likely reveal the full=
 database connection details, including the username and password.</p>
</blockquote>
<p>However, <strong>there is no such thing as "the displaying of a back tra=
ce"!</strong> What zend engine <em>really</em> does is just convert an unca=
ught exception into a fatal error. And then this fatal error is treated <st=
rong>like any other error</strong> - so it will be displayed only if approp=
riate <code>php.ini</code> directive is set.
Thus, although you may or you may not catch an exception, it has absolutely=
 nothing to do with displaying sensitive information, because it's <strong>=
a totally different configuration setting</strong> in response to this. So,=
 do not catch PDO exceptions to report them. Instead, configure your server=
 properly:</p>
<p>On a development server just turn displaying errors on:</p>
<pre><code><code><span style=3D"color: #0000BB">ini_set</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #DD0000">'display_errors'=
</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #=
0000BB">1</span><span style=3D"color: #007700">);</span><span style=3D"colo=
r: #0000BB"></span></code></code></pre>
<p>While on a production server turn displaying errors off while logging er=
rors on:</p>
<pre><code><code><span style=3D"color: #0000BB">ini_set</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #DD0000">'display_errors'=
</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #=
0000BB">0</span><span style=3D"color: #007700">);<br></span><span style=3D"=
color: #0000BB">ini_set</span><span style=3D"color: #007700">(</span><span =
style=3D"color: #DD0000">'log_errors'</span><span style=3D"color: #007700">=
,&nbsp;</span><span style=3D"color: #0000BB">1</span><span style=3D"color: =
#007700">);</span><span style=3D"color: #0000BB"></span></code></code></pre=
>
<ul>
<li>keep in mind that <em>there are other errors that shouldn't be revealed=
 to the user as well.</em>  </li>
</ul>
<h4 id=3D"catch" class=3D"title-h4">Catching PDO exceptions</h4>
<p>You may want to catch PDO errors only in two cases:</p>
<ol>
<li>If you are writing a wrapper for PDO, and you want to augment the error=
 info with some additional data, like query string. In this case, catch the=
 exception, gather the required information, and <strong>re-throw another E=
xception</strong>.</li>
<li>
<p>If you have a <strong>certain scenario</strong> for handling errors in t=
he particular part of code. Some examples are: </p>
<ul>
<li>if the error can be bypassed, you can use try..catch for this. However,=
 do not make it a habit. Empty catch in every aspect works as error suppres=
sion operator, <a href=3D"http://programmers.stackexchange.com/questions/21=
9788/is-error-suppressing-bad-practice">and so equally evil it is</a>.</li>
<li>if there is an action that has to be taken in case of failure, i.e. <a =
href=3D"https://phpdelusions.net/pdo#transactions">transaction</a> rollback=
.</li>
<li>if you are waiting for a particular error to handle. In this case, catc=
h the exception, see if the error is one you're looking for, and then handl=
e this one. Otherwise just throw it again - so it will bubble up to the han=
dler in the usual way.</li>
</ul>
</li>
</ol>
<p>E.g.:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"colo=
r: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span sty=
le=3D"color: #0000BB">prepare</span><span style=3D"color: #007700">(</span>=
<span style=3D"color: #DD0000">"INSERT&nbsp;INTO&nbsp;users&nbsp;VALUES&nbs=
p;(NULL,?,?,?,?)"</span><span style=3D"color: #007700">)-&gt;</span><span s=
tyle=3D"color: #0000BB">execute</span><span style=3D"color: #007700">(</spa=
n><span style=3D"color: #0000BB">$data</span><span style=3D"color: #007700"=
>);<br>}&nbsp;catch&nbsp;(</span><span style=3D"color: #0000BB">PDOExceptio=
n&nbsp;$e</span><span style=3D"color: #007700">)&nbsp;{<br>&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #0000BB">$existingkey&nbsp;</span><spa=
n style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"=
Integrity&nbsp;constraint&nbsp;violation:&nbsp;1062&nbsp;Duplicate&nbsp;ent=
ry"</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nb=
sp;(</span><span style=3D"color: #0000BB">strpos</span><span style=3D"color=
: #007700">(</span><span style=3D"color: #0000BB">$e</span><span style=3D"c=
olor: #007700">-&gt;</span><span style=3D"color: #0000BB">getMessage</span>=
<span style=3D"color: #007700">(),&nbsp;</span><span style=3D"color: #0000B=
B">$existingkey</span><span style=3D"color: #007700">)&nbsp;!=3D=3D&nbsp;</=
span><span style=3D"color: #0000BB">FALSE</span><span style=3D"color: #0077=
00">)&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span style=3D"color: #FF8000">//&nbsp;Take&nbsp;some&nbsp;action&nbsp;if&n=
bsp;there&nbsp;is&nbsp;a&nbsp;key&nbsp;constraint&nbsp;violation,&nbsp;i.e.=
&nbsp;duplicate&nbsp;name<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"=
color: #007700">}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;throw&nbsp;</span><span style=3D"color: #0000BB">$e</span><span =
style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</span><span st=
yle=3D"color: #0000BB"></span></code></code></pre>
<p>However, in general, no dedicated treatment for PDO exceptions is ever n=
eeded. In short, to have PDO errors properly reported:</p>
<ol>
<li>Set PDO in exception mode.</li>
<li>Do not use <code>try..catch</code> to report errors. </li>
<li>Configure PHP for proper error reporting
<ul>
<li>on a <strong>live</strong> site set <code>display_errors=3Doff</code> a=
nd <code>log_errors=3Don</code></li>
<li>on a <strong>development</strong> site, you may want to set <code>displ=
ay_errors=3Don</code></li>
<li>of course, <code>error_reporting</code> has to be set to E_ALL in both =
cases</li>
</ul></li>
</ol>
<p>As a result, you will be always notified of all database errors without =
a single line of extra code! <a href=3D"https://phpdelusions.net/try-catch"=
>Further reading</a>.</p>
<h3 id=3D"count" class=3D"title-h3">Getting row count with PDO</h3>
<p>You don't needed it.</p>
<p>Although PDO offers a function for returning the number of rows found by=
 the query, <code>PDOstatement::rowCount()</code>, you scarcely need it. Re=
ally.</p>
<p>If you think it over, you will see that this is a most misused function =
in the web. Most of time it is used not to <i>count</i> anything, but as a =
mere flag - just to see if there was any data returned. But for such a case=
 you have the data itself! Just get your data, using either <code>fetch()</=
code> or <code>fetchAll()</code> - and it will serve as such a flag all rig=
ht! Say, to see if there is any user with such a name, just select a row:</=
p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SELECT&nbsp;1&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;name=3D?"<=
/span><span style=3D"color: #007700">);<br></span><span style=3D"color: #00=
00BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span style=3D=
"color: #0000BB">execute</span><span style=3D"color: #007700">([</span><spa=
n style=3D"color: #0000BB">$name</span><span style=3D"color: #007700">]);<b=
r></span><span style=3D"color: #0000BB">$userExists&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</s=
pan><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000B=
B">fetchColumn</span><span style=3D"color: #007700">();</span><span style=
=3D"color: #0000BB"></span></code></code></pre>
<p>Exactly the same thing with getting either a single row or an array with=
 rows:</p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;table"</span><span style=3D"color:=
 #007700">)-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span =
style=3D"color: #007700">();<br>if&nbsp;(</span><span style=3D"color: #0000=
BB">$data</span><span style=3D"color: #007700">)&nbsp;{<br>&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #FF8000">//&nbsp;You&nbsp;have&nbsp;th=
e&nbsp;data!&nbsp;No&nbsp;need&nbsp;for&nbsp;the&nbsp;rowCount()&nbsp;ever!=
<br></span><span style=3D"color: #007700">}</span><span style=3D"color: #00=
00BB"></span></code></code></pre>
<p>Remember that here you don't need the <i>count</i>, the actual number of=
 rows, but rather a boolean flag. So you got it.</p>
<p>Not to mention that the second most popular use case for this function s=
hould never be used at all. One should never use the <code>rowCount()</code=
> to count rows in database! Instead, one has to ask a database to count th=
em, and return the result in a <b>single</b> row:</p>
<pre><code><code><span style=3D"color: #0000BB">$count&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo<=
/span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #000=
0BB">query</span><span style=3D"color: #007700">(</span><span style=3D"colo=
r: #DD0000">"SELECT&nbsp;count(1)&nbsp;FROM&nbsp;t"</span><span style=3D"co=
lor: #007700">)-&gt;</span><span style=3D"color: #0000BB">fetchColumn</span=
><span style=3D"color: #007700">();</span><span style=3D"color: #0000BB"></=
span></code></code></pre>
<p>is the only proper way.</p>
<p>In essence:</p>
<ul>
<li>if you need to know how many rows in the table, use <code>SELECT COUNT(=
*)</code> query.</li>
<li>if you need to know whether your query returned any data - check that d=
ata.</li>
<li>if you still need to know how many rows has been returned by some query=
 (though I hardly can imagine a case), then you can either use <code>rowCou=
nt()</code> or simply call <code>count()</code> on the array returned by <c=
ode>fetchAll()</code> (if applicable).</li>
</ul>
<p>Thus you could tell that the <a href=3D"http://stackoverflow.com/a/88338=
2/285587/">top answer for this question on Stack Overflow</a> is essentiall=
y pointless and harmful - a call to <code>rowCount()</code> could be never =
substituted with <code>SELECT count(*)</code> query - their purpose is esse=
ntially different, while running an extra query only to get the number of r=
ows returned by other query makes absolutely no sense. </p>
<h3 id=3D"affected" class=3D"title-h3">Affected rows and insert id</h3>
<p>PDO is using the same function for returning both number of rows returne=
d by SELECT statement and number of rows affected by <abbr title=3D"Data Ma=
nipulation Language, INSERT, UPDATE and DELETE queries">DML</abbr> queries =
- <code>PDOstatement::rowCount()</code>. Thus, to get the number of rows af=
fected, just call this function after performing a query. </p>
<p>Another frequently asked question is caused by the fact that mysql won't=
 update the row, if new value is the same as old one. Thus number of rows a=
ffected could differ from the number of rows matched by the WHERE clause. S=
ometimes it is required to know this latter number. </p>
<p>Although you can tell <code>rowCount()</code> to return the number of ro=
ws matched instead of rows affected by setting <code>PDO::MYSQL_ATTR_FOUND_=
ROWS</code> option to TRUE, but, as this is a connection-only option and th=
us you cannot change it's behavior during runtime, you will have to stick t=
o only one mode for the application, which could be not very convenient. </=
p>
<p>Note that <code>PDO::MYSQL_ATTR_FOUND_ROWS</code> is not guaranteed to w=
ork, as it's described in the <a href=3D"https://phpdelusions.net/pdo#comme=
nt-276">comment</a> below.</p>
<p>Unfortunately, there is no PDO counterpart for the <code>mysql(i)_info()=
</code> function which output can be easily parsed and desired number found=
. This is one of minor PDO drawbacks.</p>
<p>An auto-generated identifier from a sequence or auto_inclement field in =
mysql can be obtained from the <a href=3D"http://php.net/manual/en/pdo.last=
insertid.php">PDO::lastInsertId</a> function. An answer to a frequently ask=
ed question, "whether this function is safe to use in concurrent environmen=
t?" is positive: yes, it is safe. Being just an interface to MySQL C API <a=
 href=3D"http://dev.mysql.com/doc/refman/5.7/en/mysql-insert-id.html">mysql=
_insert_id()</a> function it's perfectly safe. </p>
<h3 id=3D"like" class=3D"title-h3">Prepared statements and LIKE clause</h3>
<p>Despite PDO's overall ease of use, there are some gotchas anyway, and I =
am going to explain some.</p>
<p>One of them is using placeholders with <code>LIKE</code> SQL clause. At =
first one would think that such a query will do:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;table&nbsp;WHERE&nbsp;name&nbsp;=
LIKE&nbsp;'%?%'"</span><span style=3D"color: #007700">);</span><span style=
=3D"color: #0000BB"></span></code></code></pre>
<p>but soon they will learn that it will produce an error. To understand it=
s nature one has to understand that, <a href=3D"https://phpdelusions.net/pd=
o#bindable">like it was said above</a>, <i>a placeholder have to represent =
a complete data literal only</i> - a string or a number namely. And by no m=
eans can it represent either a part of a literal or some arbitrary SQL part=
. So, when working with LIKE, we have to prepare our <strong>complete liter=
al</strong> first, and then send it to the query the usual way:</p>
<pre><code><code><span style=3D"color: #0000BB">$search&nbsp;</span><span s=
tyle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"%</=
span><span style=3D"color: #0000BB">$search</span><span style=3D"color: #DD=
0000">%"</span><span style=3D"color: #007700">;<br></span><span style=3D"co=
lor: #0000BB">$stmt&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&nb=
sp;</span><span style=3D"color: #0000BB">$pdo</span><span style=3D"color: #=
007700">-&gt;</span><span style=3D"color: #0000BB">prepare</span><span styl=
e=3D"color: #007700">(</span><span style=3D"color: #DD0000">"SELECT&nbsp;*&=
nbsp;FROM&nbsp;table&nbsp;WHERE&nbsp;name&nbsp;LIKE&nbsp;?"</span><span sty=
le=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$stmt</sp=
an><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB=
">execute</span><span style=3D"color: #007700">([</span><span style=3D"colo=
r: #0000BB">$search</span><span style=3D"color: #007700">]);<br></span><spa=
n style=3D"color: #0000BB">$data&nbsp;</span><span style=3D"color: #007700"=
>=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><span style=3D"=
color: #007700">-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><=
span style=3D"color: #007700">();</span><span style=3D"color: #0000BB"></sp=
an></code></code></pre>
<h3 id=3D"in" class=3D"title-h3">Prepared statements and IN clause</h3>
<p>Just like it was said above, it is impossible to substitute an arbitrary=
 query part with a placeholder. Any string you bind through a placeholder w=
ill be put into query as a single string literal. For example, a <em>string=
</em> <code>'1,2,3'</code> will be bound as a <em>string</em>, resulting in=
</p>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;</span><span st=
yle=3D"color: #007700">*&nbsp;</span><span style=3D"color: #0000BB">FROM&nb=
sp;table&nbsp;WHERE&nbsp;column&nbsp;IN&nbsp;</span><span style=3D"color: #=
007700">(</span><span style=3D"color: #DD0000">'1,2,3'</span><span style=3D=
"color: #007700">)</span><span style=3D"color: #0000BB"></span></code></cod=
e></pre>
<p>making SQL to search for just <em>one</em> value.</p>
<p>To make it right, one needs separated values, to make a query look like<=
/p>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;</span><span st=
yle=3D"color: #007700">*&nbsp;</span><span style=3D"color: #0000BB">FROM&nb=
sp;table&nbsp;WHERE&nbsp;column&nbsp;IN&nbsp;</span><span style=3D"color: #=
007700">(</span><span style=3D"color: #DD0000">'1'</span><span style=3D"col=
or: #007700">,</span><span style=3D"color: #DD0000">'2'</span><span style=
=3D"color: #007700">,</span><span style=3D"color: #DD0000">'3'</span><span =
style=3D"color: #007700">)</span><span style=3D"color: #0000BB"></span></co=
de></code></pre>
<p>Thus, for the comma-separated values, like for <code>IN()</code> SQL ope=
rator, one must create a set of <code>?</code>s manually and put them into =
the query:</p>
<pre><code><code><span style=3D"color: #0000BB">$arr&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;[</span><span style=3D"color: #0000BB">1</spa=
n><span style=3D"color: #007700">,</span><span style=3D"color: #0000BB">2</=
span><span style=3D"color: #007700">,</span><span style=3D"color: #0000BB">=
3</span><span style=3D"color: #007700">];<br></span><span style=3D"color: #=
0000BB">$in&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #0000BB">str_repeat</span><span style=3D"color: #00=
7700">(</span><span style=3D"color: #DD0000">'?,'</span><span style=3D"colo=
r: #007700">,&nbsp;</span><span style=3D"color: #0000BB">count</span><span =
style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$arr</span>=
<span style=3D"color: #007700">)&nbsp;-&nbsp;</span><span style=3D"color: #=
0000BB">1</span><span style=3D"color: #007700">)&nbsp;.&nbsp;</span><span s=
tyle=3D"color: #DD0000">'?'</span><span style=3D"color: #007700">;<br></spa=
n><span style=3D"color: #0000BB">$sql&nbsp;</span><span style=3D"color: #00=
7700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT&nbsp;*&nbsp;FR=
OM&nbsp;table&nbsp;WHERE&nbsp;column&nbsp;IN&nbsp;(</span><span style=3D"co=
lor: #0000BB">$in</span><span style=3D"color: #DD0000">)"</span><span style=
=3D"color: #007700">;<br></span><span style=3D"color: #0000BB">$stm&nbsp;</=
span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #=
0000BB">$db</span><span style=3D"color: #007700">-&gt;</span><span style=3D=
"color: #0000BB">prepare</span><span style=3D"color: #007700">(</span><span=
 style=3D"color: #0000BB">$sql</span><span style=3D"color: #007700">);<br><=
/span><span style=3D"color: #0000BB">$stm</span><span style=3D"color: #0077=
00">-&gt;</span><span style=3D"color: #0000BB">execute</span><span style=3D=
"color: #007700">(</span><span style=3D"color: #0000BB">$arr</span><span st=
yle=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$data&nb=
sp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"col=
or: #0000BB">$stm</span><span style=3D"color: #007700">-&gt;</span><span st=
yle=3D"color: #0000BB">fetchAll</span><span style=3D"color: #007700">();</s=
pan><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Not very convenient, but compared to mysqli it's <a href=3D"https://phpd=
elusions.net/pdo/mysqli_comparison#in"><em>amazingly</em> concise</a>.</p>
<p>In case there are other placeholders in the query, you could use <code>a=
rray_merge()</code> function to join all the variables into a single array,=
 adding your other variables in the form of arrays, in the order they appea=
r in your query:</p>
<pre><code><code><span style=3D"color: #0000BB">$arr&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;[</span><span style=3D"color: #0000BB">1</spa=
n><span style=3D"color: #007700">,</span><span style=3D"color: #0000BB">2</=
span><span style=3D"color: #007700">,</span><span style=3D"color: #0000BB">=
3</span><span style=3D"color: #007700">];<br></span><span style=3D"color: #=
0000BB">$in&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #0000BB">str_repeat</span><span style=3D"color: #00=
7700">(</span><span style=3D"color: #DD0000">'?,'</span><span style=3D"colo=
r: #007700">,&nbsp;</span><span style=3D"color: #0000BB">count</span><span =
style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$arr</span>=
<span style=3D"color: #007700">)&nbsp;-&nbsp;</span><span style=3D"color: #=
0000BB">1</span><span style=3D"color: #007700">)&nbsp;.&nbsp;</span><span s=
tyle=3D"color: #DD0000">'?'</span><span style=3D"color: #007700">;<br></spa=
n><span style=3D"color: #0000BB">$sql&nbsp;</span><span style=3D"color: #00=
7700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT&nbsp;*&nbsp;FR=
OM&nbsp;table&nbsp;WHERE&nbsp;foo=3D?&nbsp;AND&nbsp;column&nbsp;IN&nbsp;(</=
span><span style=3D"color: #0000BB">$in</span><span style=3D"color: #DD0000=
">)&nbsp;AND&nbsp;bar=3D?&nbsp;AND&nbsp;baz=3D?"</span><span style=3D"color=
: #007700">;<br></span><span style=3D"color: #0000BB">$stm&nbsp;</span><spa=
n style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$=
db</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #=
0000BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D=
"color: #0000BB">$sql</span><span style=3D"color: #007700">);<br></span><sp=
an style=3D"color: #0000BB">$params&nbsp;</span><span style=3D"color: #0077=
00">=3D&nbsp;</span><span style=3D"color: #0000BB">array_merge</span><span =
style=3D"color: #007700">([</span><span style=3D"color: #0000BB">$foo</span=
><span style=3D"color: #007700">],&nbsp;</span><span style=3D"color: #0000B=
B">$arr</span><span style=3D"color: #007700">,&nbsp;[</span><span style=3D"=
color: #0000BB">$bar</span><span style=3D"color: #007700">,&nbsp;</span><sp=
an style=3D"color: #0000BB">$baz</span><span style=3D"color: #007700">]);<b=
r></span><span style=3D"color: #0000BB">$stm</span><span style=3D"color: #0=
07700">-&gt;</span><span style=3D"color: #0000BB">execute</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #0000BB">$params</span><s=
pan style=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$d=
ata&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=
=3D"color: #0000BB">$stm</span><span style=3D"color: #007700">-&gt;</span><=
span style=3D"color: #0000BB">fetchAll</span><span style=3D"color: #007700"=
>();</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>In case you are using named placeholders, the code would be a little mor=
e complex, as you have to create a sequence of the named placeholders, e.g.=
 <code>:id0,:id1,:id2</code>. So the code would be:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #FF8000">//&nbsp;other&nbsp;parameters&nbsp;that&nbsp;are&nbsp;going&nbsp=
;into&nbsp;query<br></span><span style=3D"color: #0000BB">$params&nbsp;</sp=
an><span style=3D"color: #007700">=3D&nbsp;[</span><span style=3D"color: #D=
D0000">"foo"&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span=
><span style=3D"color: #DD0000">"foo"</span><span style=3D"color: #007700">=
,&nbsp;</span><span style=3D"color: #DD0000">"bar"&nbsp;</span><span style=
=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #DD0000">"bar=
"</span><span style=3D"color: #007700">];<br><br></span><span style=3D"colo=
r: #0000BB">$ids&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;[</spa=
n><span style=3D"color: #0000BB">1</span><span style=3D"color: #007700">,</=
span><span style=3D"color: #0000BB">2</span><span style=3D"color: #007700">=
,</span><span style=3D"color: #0000BB">3</span><span style=3D"color: #00770=
0">];<br></span><span style=3D"color: #0000BB">$in&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">""</span=
><span style=3D"color: #007700">;<br>foreach&nbsp;(</span><span style=3D"co=
lor: #0000BB">$ids&nbsp;</span><span style=3D"color: #007700">as&nbsp;</spa=
n><span style=3D"color: #0000BB">$i&nbsp;</span><span style=3D"color: #0077=
00">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">$item</span><span st=
yle=3D"color: #007700">)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=
=3D"color: #0000BB">$key&nbsp;</span><span style=3D"color: #007700">=3D&nbs=
p;</span><span style=3D"color: #DD0000">":id"</span><span style=3D"color: #=
007700">.</span><span style=3D"color: #0000BB">$i</span><span style=3D"colo=
r: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000=
BB">$in&nbsp;</span><span style=3D"color: #007700">.=3D&nbsp;</span><span s=
tyle=3D"color: #DD0000">"</span><span style=3D"color: #0000BB">$key</span><=
span style=3D"color: #DD0000">,"</span><span style=3D"color: #007700">;<br>=
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$in_params</s=
pan><span style=3D"color: #007700">[</span><span style=3D"color: #0000BB">$=
key</span><span style=3D"color: #007700">]&nbsp;=3D&nbsp;</span><span style=
=3D"color: #0000BB">$item</span><span style=3D"color: #007700">;&nbsp;</spa=
n><span style=3D"color: #FF8000">//&nbsp;collecting&nbsp;values&nbsp;into&n=
bsp;key-value&nbsp;array<br></span><span style=3D"color: #007700">}<br></sp=
an><span style=3D"color: #0000BB">$in&nbsp;</span><span style=3D"color: #00=
7700">=3D&nbsp;</span><span style=3D"color: #0000BB">rtrim</span><span styl=
e=3D"color: #007700">(</span><span style=3D"color: #0000BB">$in</span><span=
 style=3D"color: #007700">,</span><span style=3D"color: #DD0000">","</span>=
<span style=3D"color: #007700">);&nbsp;</span><span style=3D"color: #FF8000=
">//&nbsp;:id0,:id1,:id2<br><br></span><span style=3D"color: #0000BB">$sql&=
nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"c=
olor: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;table&nbsp;WHERE&nbsp;foo=3D:f=
oo&nbsp;AND&nbsp;id&nbsp;IN&nbsp;(</span><span style=3D"color: #0000BB">$in=
</span><span style=3D"color: #DD0000">)&nbsp;AND&nbsp;bar=3D:bar"</span><sp=
an style=3D"color: #007700">;<br></span><span style=3D"color: #0000BB">$stm=
&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"=
color: #0000BB">$db</span><span style=3D"color: #007700">-&gt;</span><span =
style=3D"color: #0000BB">prepare</span><span style=3D"color: #007700">(</sp=
an><span style=3D"color: #0000BB">$sql</span><span style=3D"color: #007700"=
>);<br></span><span style=3D"color: #0000BB">$stm</span><span style=3D"colo=
r: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><span =
style=3D"color: #007700">(</span><span style=3D"color: #0000BB">array_merge=
</span><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB=
">$params</span><span style=3D"color: #007700">,</span><span style=3D"color=
: #0000BB">$in_params</span><span style=3D"color: #007700">));&nbsp;</span>=
<span style=3D"color: #FF8000">//&nbsp;just&nbsp;merge&nbsp;two&nbsp;arrays=
<br></span><span style=3D"color: #0000BB">$data&nbsp;</span><span style=3D"=
color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stm</span><=
span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">fe=
tchAll</span><span style=3D"color: #007700">();</span><span style=3D"color:=
 #0000BB"></span></code></code></pre>
<p>Luckily, for the named placeholders we don't have to follow the strict o=
rder, so we can merge our arrays in any order.</p>
<h3 id=3D"identifiers" class=3D"title-h3">Protecting table and field names<=
/h3>
<p>On Stack Overflow I've seen overwhelming number of PHP users implementin=
g <a href=3D"https://phpdelusions.net/pdo/lame_update">the most fatal PDO c=
ode</a>, thinking that only data values have to be protected. But of course=
 it is not.</p>
<p>Unfortunately, PDO has no placeholder for identifiers (table and field n=
ames), so a developer must manually filter them out. Such a filter is often=
 called a "white list" (where we only list allowed values) as opposed to a =
"black list" where we list disallowed values. Here is a brief example</p>
<pre><code><code><span style=3D"color: #0000BB">$orders&nbsp;&nbsp;</span><=
span style=3D"color: #007700">=3D&nbsp;[</span><span style=3D"color: #DD000=
0">"name"</span><span style=3D"color: #007700">,</span><span style=3D"color=
: #DD0000">"price"</span><span style=3D"color: #007700">,</span><span style=
=3D"color: #DD0000">"qty"</span><span style=3D"color: #007700">];&nbsp;</sp=
an><span style=3D"color: #FF8000">//&nbsp;the&nbsp;white&nbsp;list&nbsp;of&=
nbsp;allowed&nbsp;fierld&nbsp;names<br></span><span style=3D"color: #0000BB=
">$key&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;</span><span style=3D"color: #0000BB">array_search</span><span sty=
le=3D"color: #007700">(</span><span style=3D"color: #0000BB">$_GET</span><s=
pan style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'sort'<=
/span><span style=3D"color: #007700">],&nbsp;</span><span style=3D"color: #=
0000BB">$orders</span><span style=3D"color: #007700">);&nbsp;</span><span s=
tyle=3D"color: #FF8000">//&nbsp;see&nbsp;if&nbsp;we&nbsp;have&nbsp;such&nbs=
p;a&nbsp;name<br></span><span style=3D"color: #0000BB">$orderby&nbsp;</span=
><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000=
BB">$orders</span><span style=3D"color: #007700">[</span><span style=3D"col=
or: #0000BB">$key</span><span style=3D"color: #007700">];&nbsp;</span><span=
 style=3D"color: #FF8000">//if&nbsp;not,&nbsp;first&nbsp;one&nbsp;will&nbsp=
;be&nbsp;set&nbsp;automatically.&nbsp;smart&nbsp;enuf&nbsp;:)</span><span s=
tyle=3D"color: #0000BB"></span></code></code></pre>
<p>the same approach should be used for the direction, although the code wo=
uld be a bit simpler</p>
<pre><code><code><span style=3D"color: #0000BB">$direction&nbsp;</span><spa=
n style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">_=
GET</span><span style=3D"color: #007700">[</span><span style=3D"color: #DD0=
000">'direction'</span><span style=3D"color: #007700">]&nbsp;=3D=3D&nbsp;</=
span><span style=3D"color: #DD0000">'DESC'&nbsp;</span><span style=3D"color=
: #007700">?&nbsp;</span><span style=3D"color: #DD0000">'DESC'&nbsp;</span>=
<span style=3D"color: #007700">:&nbsp;</span><span style=3D"color: #DD0000"=
>'ASC'</span><span style=3D"color: #007700">;</span><span style=3D"color: #=
0000BB"></span></code></code></pre>
<p>having gottent these two variables this way will make them 100% safe</p>
<pre><code><code><span style=3D"color: #0000BB">$query&nbsp;&nbsp;&nbsp;</s=
pan><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #D=
D0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;`table`&nbsp;ORDER&nbsp;BY&nbsp;</span=
><span style=3D"color: #0000BB">$orderby</span><span style=3D"color: #DD000=
0">&nbsp;</span><span style=3D"color: #0000BB">$direction</span><span style=
=3D"color: #DD0000">"</span><span style=3D"color: #007700">;&nbsp;</span><s=
pan style=3D"color: #FF8000">//&nbsp;sound&nbsp;and&nbsp;safe</span><span s=
tyle=3D"color: #0000BB"></span></code></code></pre>
<p>The same approach must be used every time a table of a field name is goi=
ng to be used in the query. </p>
<h3 id=3D"limit" class=3D"title-h3">A problem with LIMIT clause</h3>
<p>Another problem is related to the SQL <code>LIMIT</code> clause. When in=
 <a href=3D"https://phpdelusions.net/pdo#emulation">emulation mode</a> (whi=
ch is on by default), PDO substitutes placeholders with actual data, instea=
d of sending it separately. And with "lazy" binding (using array in <code>e=
xecute()</code>), PDO treats every parameter as a string. As a result, the =
prepared <code>LIMIT ?,?</code> query becomes <code>LIMIT '10', '10'</code>=
 which is invalid syntax that causes query to fail.</p>
<p>There are two solutions:</p>
<p>One is <a href=3D"https://phpdelusions.net/pdo#emulation">turning emulat=
ion off</a> (as MySQL can sort all placeholders properly). To do so one can=
 run this code:</p>
<pre><code><code><span style=3D"color: #0000BB">$conn</span><span style=3D"=
color: #007700">-&gt;</span><span style=3D"color: #0000BB">setAttribute</sp=
an><span style=3D"color: #007700">(&nbsp;</span><span style=3D"color: #0000=
BB">PDO</span><span style=3D"color: #007700">::</span><span style=3D"color:=
 #0000BB">ATTR_EMULATE_PREPARES</span><span style=3D"color: #007700">,&nbsp=
;</span><span style=3D"color: #0000BB">false&nbsp;</span><span style=3D"col=
or: #007700">);</span><span style=3D"color: #0000BB"></span></code></code><=
/pre>
<p>And parameters can be kept in <code>execute()</code>:</p>
<pre><code><code><span style=3D"color: #0000BB">$conn</span><span style=3D"=
color: #007700">-&gt;</span><span style=3D"color: #0000BB">setAttribute</sp=
an><span style=3D"color: #007700">(&nbsp;</span><span style=3D"color: #0000=
BB">PDO</span><span style=3D"color: #007700">::</span><span style=3D"color:=
 #0000BB">ATTR_EMULATE_PREPARES</span><span style=3D"color: #007700">,&nbsp=
;</span><span style=3D"color: #0000BB">false&nbsp;</span><span style=3D"col=
or: #007700">);<br></span><span style=3D"color: #0000BB">$stmt&nbsp;</span>=
<span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000B=
B">$pdo</span><span style=3D"color: #007700">-&gt;</span><span style=3D"col=
or: #0000BB">prepare</span><span style=3D"color: #007700">(</span><span sty=
le=3D"color: #DD0000">'SELECT&nbsp;*&nbsp;FROM&nbsp;table&nbsp;LIMIT&nbsp;?=
,&nbsp;?'</span><span style=3D"color: #007700">);<br></span><span style=3D"=
color: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><spa=
n style=3D"color: #0000BB">execute</span><span style=3D"color: #007700">([<=
/span><span style=3D"color: #0000BB">$offset</span><span style=3D"color: #0=
07700">,&nbsp;</span><span style=3D"color: #0000BB">$limit</span><span styl=
e=3D"color: #007700">]);<br></span><span style=3D"color: #0000BB">$data&nbs=
p;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"colo=
r: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span st=
yle=3D"color: #0000BB">fetchAll</span><span style=3D"color: #007700">();</s=
pan><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Another way would be to bind these variables explicitly while setting th=
e proper param type:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">'SELECT&nbsp;*&nbsp;FROM&nbsp;table&nbsp;LIMIT&nbsp;?,&nbsp;?'=
</span><span style=3D"color: #007700">);<br></span><span style=3D"color: #0=
000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span style=
=3D"color: #0000BB">bindParam</span><span style=3D"color: #007700">(</span>=
<span style=3D"color: #0000BB">1</span><span style=3D"color: #007700">,&nbs=
p;</span><span style=3D"color: #0000BB">$offset</span><span style=3D"color:=
 #007700">,</span><span style=3D"color: #0000BB">PDO</span><span style=3D"c=
olor: #007700">::</span><span style=3D"color: #0000BB">PARAM_INT</span><spa=
n style=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$stm=
t</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0=
000BB">bindParam</span><span style=3D"color: #007700">(</span><span style=
=3D"color: #0000BB">2</span><span style=3D"color: #007700">,&nbsp;</span><s=
pan style=3D"color: #0000BB">$limit</span><span style=3D"color: #007700">,<=
/span><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #00770=
0">::</span><span style=3D"color: #0000BB">PARAM_INT</span><span style=3D"c=
olor: #007700">);<br></span><span style=3D"color: #0000BB">$stmt</span><spa=
n style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">execu=
te</span><span style=3D"color: #007700">();<br></span><span style=3D"color:=
 #0000BB">$data&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span>=
<span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-=
&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span style=3D"col=
or: #007700">();</span><span style=3D"color: #0000BB"></span></code></code>=
</pre>
<p>One peculiar thing about <code>PDO::PARAM_INT</code>: for some reason it=
 does not enforce the type casting. Thus, using it on a number that has a s=
tring type will cause the aforementioned error: </p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SELECT&nbsp;1&nbsp;LIMIT&nbsp;?"</span><span style=3D"color: =
#007700">);<br></span><span style=3D"color: #0000BB">$stmt</span><span styl=
e=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">bindValue</=
span><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">=
1</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: =
#DD0000">"1"</span><span style=3D"color: #007700">,&nbsp;</span><span style=
=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span=
 style=3D"color: #0000BB">PARAM_INT</span><span style=3D"color: #007700">);=
<br></span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color:=
 #007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><span st=
yle=3D"color: #007700">();</span><span style=3D"color: #0000BB"></span></co=
de></code></pre>
<p>But change <code>"1"</code> in the example to <code>1</code> - and every=
thing will go smooth.</p>
<h3 id=3D"transactions" class=3D"title-h3">Transactions</h3>
<p>To successfully run a transaction, you have to make sure that error mode=
 is set to exceptions, and learn three canonical methods:</p>
<ul>
<li><code>beginTransaction()</code> to start a transaction</li>
<li><code>commit()</code> to commit one</li>
<li><code>rollback()</code> to cancel all the changes you made since transa=
ction start.</li>
</ul>
<p>Exceptions are essential for transactions because they can be caught. So=
 in case one of the queries failed, the execution will be stopped and moved=
 straight to the catch block, where the whole transaction will be rolled ba=
ck.</p>
<p>So a typical example would be like</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"colo=
r: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span sty=
le=3D"color: #0000BB">beginTransaction</span><span style=3D"color: #007700"=
>();<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$stmt=
&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"=
color: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span=
 style=3D"color: #0000BB">prepare</span><span style=3D"color: #007700">(</s=
pan><span style=3D"color: #DD0000">"INSERT&nbsp;INTO&nbsp;users&nbsp;(name)=
&nbsp;VALUES&nbsp;(?)"</span><span style=3D"color: #007700">);<br>&nbsp;&nb=
sp;&nbsp;&nbsp;foreach&nbsp;([</span><span style=3D"color: #DD0000">'Joe'</=
span><span style=3D"color: #007700">,</span><span style=3D"color: #DD0000">=
'Ben'</span><span style=3D"color: #007700">]&nbsp;as&nbsp;</span><span styl=
e=3D"color: #0000BB">$name</span><span style=3D"color: #007700">)<br>&nbsp;=
&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</sp=
an><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700=
">-&gt;</span><span style=3D"color: #0000BB">execute</span><span style=3D"c=
olor: #007700">([</span><span style=3D"color: #0000BB">$name</span><span st=
yle=3D"color: #007700">]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><span style=3D"col=
or: #007700">-&gt;</span><span style=3D"color: #0000BB">commit</span><span =
style=3D"color: #007700">();<br>}catch&nbsp;(</span><span style=3D"color: #=
0000BB">Exception&nbsp;$e</span><span style=3D"color: #007700">){<br>&nbsp;=
&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><span st=
yle=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">rollback<=
/span><span style=3D"color: #007700">();<br>&nbsp;&nbsp;&nbsp;&nbsp;throw&n=
bsp;</span><span style=3D"color: #0000BB">$e</span><span style=3D"color: #0=
07700">;<br>}</span><span style=3D"color: #0000BB"></span></code></code></p=
re>
<p>Please note the following important things:</p>
<ul>
<li>PDO error reporting mode should be set to <code>PDO::ERRMODE_EXCEPTION<=
/code></li>
<li>you have catch an <code>Exception</code>, not <code>PDOException</code>=
, as it doesn't matter what particular exception aborted the execution.</li=
>
<li>you should re-throw an exception after rollback, to be notified of the =
problem the usual way.</li>
<li>also make sure that a table engine supports transactions (i.e. for Mysq=
l it should be InnoDB, not MyISAM)</li>
<li>there are no Data definition language (DDL) statements that define or m=
odify database schema among queries in your transaction, as such a query wi=
ll cause an implicit commit</li>
</ul>
<h3 id=3D"call" class=3D"title-h3">Calling stored procedures in PDO</h3>
<p>There is one thing about stored procedures any programmer stumbles upon =
at first: every stored procedure always returns <strong>one extra result se=
t</strong>: one (or many) results with actual data and one just empty. Whic=
h means if you try to call a procedure and then proceed to another query, t=
hen <b>"Cannot execute queries while other unbuffered queries are active"</=
b> error will occur, because you have to clear that extra empty result firs=
t. Thus, after calling a stored procedure that is intended to return only o=
ne result set, just call <a href=3D"http://php.net/manual/en/pdostatement.n=
extrowset.php"><code>PDOStatement::nextRowset()</code></a> once (of course =
after fetching all the returned data from statement, or it will be discarde=
d):</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">"CALL&nbsp;bar()"</span><span style=3D"color: #007700">);<br></s=
pan><span style=3D"color: #0000BB">$data&nbsp;</span><span style=3D"color: =
#007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><span s=
tyle=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">fetchAll=
</span><span style=3D"color: #007700">();<br></span><span style=3D"color: #=
0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span style=
=3D"color: #0000BB">nextRowset</span><span style=3D"color: #007700">();</sp=
an><span style=3D"color: #0000BB"></span></code></code></pre>
<p>While for the stored procedures returning many result sets the behavior =
will be the same as with <a href=3D"https://phpdelusions.net/pdo#multiquery=
">multiple queries execution</a>: </p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"CALL&nbsp;foo()"</span><span style=3D"color: #007700">);<br><=
/span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007=
700">-&gt;</span><span style=3D"color: #0000BB">execute</span><span style=
=3D"color: #007700">();<br>do&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><spa=
n style=3D"color: #0000BB">$data&nbsp;</span><span style=3D"color: #007700"=
>=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><span style=3D"=
color: #007700">-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><=
span style=3D"color: #007700">();<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span s=
tyle=3D"color: #0000BB">var_dump</span><span style=3D"color: #007700">(</sp=
an><span style=3D"color: #0000BB">$data</span><span style=3D"color: #007700=
">);<br>}&nbsp;while&nbsp;(</span><span style=3D"color: #0000BB">$stmt</spa=
n><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB"=
>nextRowset</span><span style=3D"color: #007700">()&nbsp;&amp;&amp;&nbsp;</=
span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #0077=
00">-&gt;</span><span style=3D"color: #0000BB">columnCount</span><span styl=
e=3D"color: #007700">());</span><span style=3D"color: #0000BB"></span></cod=
e></code></pre>
<p>However, as you can see here is another trick have to be used: remember =
that extra result set? It  is so essentially <em>empty</em> that even an at=
tempt to fetch from it will produce an error. So, we cannot use just <code>=
while ($stmt-&gt;nextRowset())</code>. Instead, we have to check also for e=
mpty result. For which purpose <code>PDOStatement::columnCount()</code> is =
just excellent.</p>
<p>This feature is one of essential differences between old mysql ext and m=
odern libraries: after calling a stored procedure with <code>mysql_query()<=
/code> there was no way to continue working with the same connection, becau=
se there is no <code>nextResult()</code> function for <code>mysql ext</code=
>. One had to close the connection and then open a new one again in order t=
o run other queries after calling a stored procedure. </p>
<p>Calling a stored procedure is a rare case where <code>bindParam()</code>=
 use is justified, as it's the only way to handle <code>OUT</code> and <cod=
e>INOUT</code> parameters. The example can be found in the <a href=3D"http:=
//php.net/manual/en/pdo.prepared-statements.php#example-1009">corresponding=
 manual chapter</a>. However, <strong>for mysql it doesn't work.</strong> Y=
ou have to resort to an <a href=3D"http://stackoverflow.com/a/23749445/2855=
87">SQL variable and an extra call</a>.</p>
<p>Note that for the different databases the syntax could be different as w=
ell. For example, to run a sored procedure against Microsoft SQL server, us=
e the following format</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"EXEC&nbsp;stored_procedure&nbsp;?&nbsp;?"</span><span style=
=3D"color: #007700">);</span><span style=3D"color: #0000BB"></span></code><=
/code></pre>
<p>where ? marks are placeholders. Note that no braces should be used in th=
e call.</p>
<h3 id=3D"multiquery" class=3D"title-h3">Running multiple queries with PDO<=
/h3>
<blockquote>
<p>Note there are no reasons to stuff multiple queries in a single call, an=
d generally you don't need this functionality. Running queries one by one i=
s equal in every way to running them in a batch. The only use case for this=
 functionality I can think of is when you need to execute an existing SQL d=
ump  and check for the results. </p>
</blockquote>
<p>When in <a href=3D"https://phpdelusions.net/pdo#emulation">emulation mod=
e</a>, PDO can run mutiple queries in the same statement, either via query(=
) or <code>prepare()/execute()</code>. To access the result of consequent q=
ueries one has to use <a href=3D"http://php.net/manual/en/pdostatement.next=
rowset.php"><code>PDOStatement::nextRowset()</code></a>:  </p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SELECT&nbsp;?;SELECT&nbsp;?"</span><span style=3D"color: #007=
700">);<br></span><span style=3D"color: #0000BB">$stmt</span><span style=3D=
"color: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><=
span style=3D"color: #007700">([</span><span style=3D"color: #0000BB">1</sp=
an><span style=3D"color: #007700">,</span><span style=3D"color: #0000BB">2<=
/span><span style=3D"color: #007700">]);<br>do&nbsp;{<br>&nbsp;&nbsp;&nbsp;=
&nbsp;</span><span style=3D"color: #0000BB">$data&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</s=
pan><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000B=
B">fetchAll</span><span style=3D"color: #007700">();<br>&nbsp;&nbsp;&nbsp;&=
nbsp;</span><span style=3D"color: #0000BB">var_dump</span><span style=3D"co=
lor: #007700">(</span><span style=3D"color: #0000BB">$data</span><span styl=
e=3D"color: #007700">);<br>}&nbsp;while&nbsp;(</span><span style=3D"color: =
#0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span style=
=3D"color: #0000BB">nextRowset</span><span style=3D"color: #007700">());</s=
pan><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Within this loop you'll be able to gather all the related information fr=
om the every query, like affected rows, auto-generated id or errors occurre=
d. </p>
<p>It is important to understand that at the point of <code>execute()</code=
> PDO will report the error <strong>for the first query only</strong>. But =
if error occurred at any of consequent queries, to get that error one has t=
o iterate over results. Despite some <a href=3D"https://bugs.php.net/bug.ph=
p?id=3D61613">ignorant opinions</a>, PDO can not and should not report all =
the errors at once. Some people just cannot grasp the problem at whole, and=
 don't understand that error message is not the only outcome from the query=
. There could be a dataset returned, or some metadata like insert id. To ge=
t these, one has to iterate over resultsets, one by one. But to be able to =
throw an error immediately, PDO would have to iterate automatically, and th=
us <strong>discard some results</strong>. Which would be a clear nonsense.<=
/p>
<p>Unlike <code>mysqli_multi_query()</code> PDO doesn't make an asynchronou=
s call, so you can't  "fire and forget" - send bulk of queries to mysql and=
 close connection, PHP will wait until last query gets executed.</p>
<h3 id=3D"emulation" class=3D"title-h3">Emulation mode. PDO::ATTR_EMULATE_P=
REPARES</h3>
<p>One of the most controversial PDO configuration options is <code>PDO::AT=
TR_EMULATE_PREPARES</code>. What does it do? PDO can run your queries in tw=
o ways: </p>
<ol>
<li>It can use a <b>real</b> or native prepared statement:<br>
When prepare() is called, your query with placeholders gets sent to mysql a=
s is, with all the question marks you put in (in case named placeholders ar=
e used, they are substituted with ?s as well), while actual data goes later=
, when execute() is called. </li>
<li>It can use <b>emulated</b> prepared statement, when your query is sent =
to mysql as proper SQL, with all the data in place, <b>properly formatted</=
b>. In this case only one roundtrip to database happens, with <code>execute=
()</code> call. For some drivers (including mysql) emulation mode is turned=
 <code>ON</code> by default.</li>
</ol>
<p>Both methods has their drawbacks and advantages but, and - I have to str=
ess on it - both being <b>equally secure</b>, if used properly. Despite rat=
her appealing tone of the popular <a href=3D"http://stackoverflow.com/a/122=
02218/285587">article on Stack Overflow</a>, in the end it says that <b>if =
you are using supported versions of PHP and MySQL properly, you are 100% sa=
fe</b>.
All you have to do is to set encoding in the DSN, as it shown in the <a hre=
f=3D"https://phpdelusions.net/pdo#dsn">example above</a>, and your emulated=
 prepared statements will be as secure as real ones. </p>
<p>Note that when native mode is used, <strong>the data is never appears in=
 the query</strong>, which is parsed by the engine as is, with all the plac=
eholders in place. If you're looking into Mysql query log for your prepared=
 query, you have to understand that it's just an artificial query that has =
been created solely for logging purpose, but not a real one that has been e=
xecuted.</p>
<p>Other issues with emulation mode as follows:</p>
<h4 id=3D"emulation_on" class=3D"title-h4">When emulation mode is turned ON=
</h4>
<p>one can use a handy feature of named prepared statements - a placeholder=
 with same name could be used any number of times in the same query, while =
corresponding variable have to be bound only once. For some obscure reason =
this functionality is disabled when emulation mode is off:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;t&nbsp;WHERE&nbsp;foo&nbsp;LIKE&=
nbsp;:search&nbsp;OR&nbsp;bar&nbsp;LIKE&nbsp;:search"</span><span style=3D"=
color: #007700">);<br></span><span style=3D"color: #0000BB">$stmt</span><sp=
an style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">exec=
ute</span><span style=3D"color: #007700">([</span><span style=3D"color: #DD=
0000">'search'</span><span style=3D"color: #007700">]&nbsp;=3D&gt;&nbsp;</s=
pan><span style=3D"color: #DD0000">"%</span><span style=3D"color: #0000BB">=
$search</span><span style=3D"color: #DD0000">%"</span><span style=3D"color:=
 #007700">);`</span><span style=3D"color: #DD0000"></span></code></code></p=
re>
<p>Also, when emulation is <code>ON</code>, PDO is able to run <a href=3D"h=
ttps://phpdelusions.net/pdo#multiquery">multiple queries in one prepared st=
atement</a>.</p>
<p>Also, as native prepared statements support only certain query types, yo=
u can run some queries with prepared statements only when emulation is <cod=
e>ON</code>. The following code will return table names in emulation mode a=
nd error otherwise:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SHOW&nbsp;TABLES&nbsp;LIKE&nbsp;?"</span><span style=3D"color=
: #007700">);<br></span><span style=3D"color: #0000BB">$stmt</span><span st=
yle=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</=
span><span style=3D"color: #007700">([</span><span style=3D"color: #DD0000"=
>"%</span><span style=3D"color: #0000BB">$name</span><span style=3D"color: =
#DD0000">%"</span><span style=3D"color: #007700">]);<br></span><span style=
=3D"color: #0000BB">var_dump</span><span style=3D"color: #007700">(</span><=
span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-&=
gt;</span><span style=3D"color: #0000BB">fetchAll</span><span style=3D"colo=
r: #007700">());</span><span style=3D"color: #0000BB"></span></code></code>=
</pre>
<h4 id=3D"emulation_off" class=3D"title-h4">When emulation mode is turned O=
FF</h4>
<p>One could bother not with parameter types, as mysql will sort all the ty=
pes properly. Thus, even string can be bound to LIMIT parameters, as it was=
 noted in the <a href=3D"https://phpdelusions.net/pdo#limit">corresponding =
chapter</a>. </p>
<p>Also, this mode will allow to use the advantage of <a href=3D"https://ph=
pdelusions.net/pdo#multiexec">single prepare-multiple execute</a> feature.<=
/p>
<p>It's hard to decide which mode have to be preferred, but for usability s=
ake I would rather turn it <code>OFF</code>, to avoid a hassle with <code>L=
IMIT</code> clause. Other issues could be considered negligible in comparis=
on. </p>
<h3 id=3D"mysqlnd" class=3D"title-h3">Mysqlnd and buffered queries. Huge da=
tasets. </h3>
<p>Recently all PHP extensions that work with mysql database were updated b=
ased on a low-level library called <code>mysqlnd</code>, which replaced old=
 <code>libmysql</code> client. Thus some changes in the PDO behavior, mostl=
y described above and one that follows: </p>
<p>There is one thing called <a href=3D"http://php.net/manual/en/mysqlinfo.=
concepts.buffering.php">buffered queries</a>. Although you probably didn't =
notice it, you were using them all the way. Unfortunately, here are bad new=
s for you: unlike old PHP versions, where you were using buffered queries v=
irtually for free, modern versions built upon <a href=3D"http://php.net/man=
ual/en/book.mysqlnd.php">mysqlnd driver</a> won't let you to do that anymor=
e:</p>
<blockquote>
<p>When using libmysqlclient as library PHP's memory limit won't count the =
memory used for result sets unless the data is fetched into PHP variables. =
<strong>With mysqlnd the memory accounted for will include the full result =
set.</strong></p>
</blockquote>
<p>The whole thing is about a resultset, which stands for all the data foun=
d by the query. </p>
<p>When your SELECT query gets executed, there are two ways to deliver the =
results in your script: buffered and unbuffered one. When buffered method i=
s used, all the data returned by the query <strong>gets copied in the scrip=
t's memory</strong> at once. While in unbuffered mode a database server fee=
ds the found rows one by one.</p>
<p>So you can tell that in buffered mode a resultset is always burdening up=
 the memory on the server <em>even if fetching weren't started at all</em>.=
 Which is why it is not advisable to select huge datasets if you don't need=
 all the data from it. </p>
<p>Nonetheless, when old libmysql-based clients were used, this problem did=
n't bother PHP uers too much, because the memory consumed by the resultset =
didn't count in the the <code>memory_get_usage()</code> and <code>memory_li=
mit</code>. </p>
<p>But with mysqlnd things got changed, and the resultset returned by the b=
uffered query will be count towards both <code>memory_get_usage()</code> an=
d <code>memory_limit</code>, no matter which way you choose to get the resu=
lt:</p>
<pre><code><code><span style=3D"color: #0000BB">$pdo</span><span style=3D"c=
olor: #007700">-&gt;</span><span style=3D"color: #0000BB">query</span><span=
 style=3D"color: #007700">(</span><span style=3D"color: #DD0000">"create&nb=
sp;temporary&nbsp;table&nbsp;pdo_memtest&nbsp;(i&nbsp;int)"</span><span sty=
le=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$pdo</spa=
n><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB"=
>query</span><span style=3D"color: #007700">(</span><span style=3D"color: #=
DD0000">"insert&nbsp;into&nbsp;pdo_memtest&nbsp;values&nbsp;(1),(1),(1),(1)=
,(1),(1),(1),(1),(1),(1)"</span><span style=3D"color: #007700">);<br></span=
><span style=3D"color: #0000BB">$sql&nbsp;</span><span style=3D"color: #007=
700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT&nbsp;REPEAT('&n=
bsp;',&nbsp;1024&nbsp;*&nbsp;1024)&nbsp;as&nbsp;big&nbsp;FROM&nbsp;pdo_memt=
est"</span><span style=3D"color: #007700">;<br><br></span><span style=3D"co=
lor: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span s=
tyle=3D"color: #0000BB">setAttribute</span><span style=3D"color: #007700">(=
</span><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #0077=
00">::</span><span style=3D"color: #0000BB">MYSQL_ATTR_USE_BUFFERED_QUERY</=
span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #00=
00BB">FALSE</span><span style=3D"color: #007700">);<br></span><span style=
=3D"color: #0000BB">$mem&nbsp;</span><span style=3D"color: #007700">=3D&nbs=
p;</span><span style=3D"color: #0000BB">memory_get_usage</span><span style=
=3D"color: #007700">();<br></span><span style=3D"color: #0000BB">$stmt&nbsp=
;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color=
: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span styl=
e=3D"color: #0000BB">query</span><span style=3D"color: #007700">(</span><sp=
an style=3D"color: #0000BB">$sql</span><span style=3D"color: #007700">);<br=
>while(</span><span style=3D"color: #0000BB">$row&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</s=
pan><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000B=
B">fetch</span><span style=3D"color: #007700">());<br>echo&nbsp;</span><spa=
n style=3D"color: #DD0000">"Memory&nbsp;used:&nbsp;"</span><span style=3D"c=
olor: #007700">.</span><span style=3D"color: #0000BB">round</span><span sty=
le=3D"color: #007700">((</span><span style=3D"color: #0000BB">memory_get_us=
age</span><span style=3D"color: #007700">()&nbsp;-&nbsp;</span><span style=
=3D"color: #0000BB">$mem</span><span style=3D"color: #007700">)&nbsp;/&nbsp=
;</span><span style=3D"color: #0000BB">1024&nbsp;</span><span style=3D"colo=
r: #007700">/&nbsp;</span><span style=3D"color: #0000BB">1024</span><span s=
tyle=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">2</spa=
n><span style=3D"color: #007700">).</span><span style=3D"color: #DD0000">"M=
\n"</span><span style=3D"color: #007700">;<br><br></span><span style=3D"col=
or: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span st=
yle=3D"color: #0000BB">setAttribute</span><span style=3D"color: #007700">(<=
/span><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #00770=
0">::</span><span style=3D"color: #0000BB">MYSQL_ATTR_USE_BUFFERED_QUERY</s=
pan><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #000=
0BB">TRUE</span><span style=3D"color: #007700">);<br></span><span style=3D"=
color: #0000BB">$mem&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</=
span><span style=3D"color: #0000BB">memory_get_usage</span><span style=3D"c=
olor: #007700">();<br></span><span style=3D"color: #0000BB">$stmt&nbsp;</sp=
an><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #00=
00BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span style=3D"=
color: #0000BB">query</span><span style=3D"color: #007700">(</span><span st=
yle=3D"color: #0000BB">$sql</span><span style=3D"color: #007700">);<br>whil=
e(</span><span style=3D"color: #0000BB">$row&nbsp;</span><span style=3D"col=
or: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><sp=
an style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">fetc=
h</span><span style=3D"color: #007700">());<br>echo&nbsp;</span><span style=
=3D"color: #DD0000">"Memory&nbsp;used:&nbsp;"</span><span style=3D"color: #=
007700">.</span><span style=3D"color: #0000BB">round</span><span style=3D"c=
olor: #007700">((</span><span style=3D"color: #0000BB">memory_get_usage</sp=
an><span style=3D"color: #007700">()&nbsp;-&nbsp;</span><span style=3D"colo=
r: #0000BB">$mem</span><span style=3D"color: #007700">)&nbsp;/&nbsp;</span>=
<span style=3D"color: #0000BB">1024&nbsp;</span><span style=3D"color: #0077=
00">/&nbsp;</span><span style=3D"color: #0000BB">1024</span><span style=3D"=
color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">2</span><span =
style=3D"color: #007700">).</span><span style=3D"color: #DD0000">"M\n"</spa=
n><span style=3D"color: #007700">;</span><span style=3D"color: #0000BB"></s=
pan></code></code></pre>
<p>will give you</p>
<pre><code><code><span style=3D"color: #0000BB">Memory&nbsp;used</span><spa=
n style=3D"color: #007700">:&nbsp;</span><span style=3D"color: #0000BB">1M<=
br>Memory&nbsp;used</span><span style=3D"color: #007700">:&nbsp;</span><spa=
n style=3D"color: #0000BB">20.04M</span></code></code></pre>
<p>which means that with buffered query the memory is consumed <strong>even=
 if you're fetching rows one by one!</strong> </p>
<p>So, keep in mind that if you are selecting a really huge amount of data,=
 always set <code>PDO::MYSQL_ATTR_USE_BUFFERED_QUERY</code> to <code>FALSE<=
/code>. </p>
<p>Of course, there are drawbacks. One is infamous </p>
<blockquote>
<p>Cannot execute queries while other unbuffered queries are active</p>
</blockquote>
<p>error message which means that until you won't retrieve all the selected=
 rows from the unbuffered query, it will be impossible to run any other que=
ry against hte same database connection.</p>
<p>And a couple minor ones, </p>
<ol>
<li>With unbuffered query you can't use <code>rowCount()</code> method (whi=
ch is useless, as we learned <a href=3D"https://phpdelusions.net/pdo#count"=
>above</a>) </li>
<li>Moving (seeking) the current resultset internal pointer back and forth =
(which is useless as well).</li>
</ol><br>
          <div>
            <h3 class=3D"uppercase mb-1">Related articles:</h3>
            <ul class=3D"link-list">
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
pdo_wrapper">Simple yet efficient PDO wrapper</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
mysqli_comparison">Usability problems of mysqli compared to PDO</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
fetch_modes">PDO Fetch Modes</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
sql_injection_example">An SQL injection against which prepared statements w=
on't help</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
common_mistakes">Your first database wrapper's childhood diseases</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
objects">Fetching objects with PDO</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
mcve">MCVE or How to debug database interactions with PDO</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
password_hash">Authenticating a user using PDO and password_verify()</a></l=
i>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
cargo_cult_prepared_statement">A cargo cult prepared statement</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
whitelisting_helper_function">Whitelisting helper function</a></li>
            </ul>
          </div>
<br>
<br>
      </div>

      <div class=3D"col-xs-12 col-sm-5 col-md-4">
        <div class=3D"sidebar pb-6">
          <div class=3D"sidebar-block bg-secondary p-3">
            <h3 class=3D"uppercase mb-1"><a href=3D"https://phpdelusions.ne=
t/pdo#comments">Got a question?</a></h3>
            <p class=3D"mb-0">I am the only person to hold a gold badge in=
=20
            <a href=3D"http://stackoverflow.com/help/badges/4220/pdo" rel=
=3D"nofollow"><img height=3D"24" title=3D"PDO gold badge" src=3D"https://ph=
pdelusions.net/img/badge-pdo.png"></a>,
            <a href=3D"http://stackoverflow.com/help/badges/6342/mysqli" re=
l=3D"nofollow"><img height=3D"24" title=3D"Mysqli gold badge" src=3D"https:=
//phpdelusions.net/img/badge-mysqli.png"></a>
            and=20
            <a href=3D"http://stackoverflow.com/help/badges/5981/sql-inject=
ion" rel=3D"nofollow"><img height=3D"24" title=3D"SQL Injection gold badge"=
 src=3D"https://phpdelusions.net/img/badge-sql-injection.png"></a>
             on Stack Overflow and I am eager to show the right way for PHP=
 developers.</p>
            <p>Besides, your questions let me make my articles even better,=
 so you are more than welcome to ask any question you got.</p>
            <p class=3D"mb-0"><a href=3D"https://phpdelusions.net/pdo#comme=
nts" style=3D"text-decoration:underline;">Click here to ask!</a></p>
          </div>
          <div class=3D"sidebar-block bg-primary p-3">
            <a href=3D"https://phpdelusions.net/articles/error_reporting">
                <span class=3D"uppercase">Latest article:</span><br>
                PHP Error Reporting
            </a>
          </div>

          <div class=3D"sidebar-block bg-primary-10 p-3">
            <h3 class=3D"uppercase mb-1">SEE ALSO:</h3>
            <ul class=3D"link-list">
              <li class=3D"active"><a href=3D"https://phpdelusions.net/top"=
>Top 10 PHP delusions</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo_=
examples">PDO Examples</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/mysq=
li_examples">Mysqli Examples</a></li>
              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
pdo_wrapper">Simple yet efficient PDO wrapper</a></li>

              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
mysqli_comparison">Usability problems of mysqli compared to PDO</a></li>

              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
fetch_modes">PDO Fetch Modes</a></li>

              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
sql_injection_example">An SQL injection against which prepared statements w=
on't help</a></li>

              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
common_mistakes">Your first database wrapper's childhood diseases</a></li>

              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
objects">Fetching objects with PDO</a></li>

              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
mcve">MCVE or How to debug database interactions with PDO</a></li>

              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
password_hash">Authenticating a user using PDO and password_verify()</a></l=
i>

              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
cargo_cult_prepared_statement">A cargo cult prepared statement</a></li>

              <li class=3D"active"><a href=3D"https://phpdelusions.net/pdo/=
whitelisting_helper_function">Whitelisting helper function</a></li>

            </ul>
          </div>
          <div class=3D"sidebar-block bg-primary-11 p-3">
              <h3 class=3D"uppercase mb-1">Latest comments:</h3>
              <ul class=3D"last-comments-list">
=20
                <li>
	                16.08.20 23:02<br><span class=3D"comment-author">Dalton</s=
pan>
                	for <a href=3D"https://phpdelusions.net/pdo_examples/selec=
t#comment-886">SELECT query with PDO:</a><br>
	                <span class=3D"comment">I am trying to select files with o=
wner=3D'xHswu' and format=3D'mkv'.
Here's my $sql:

    $sql =3D... </span><br>
	                <a href=3D"https://phpdelusions.net/pdo_examples/select#co=
mment-886">read more</a>
		        </li>
=20
                <li>
	                04.08.20 17:16<br><span class=3D"comment-author">Jake</spa=
n>
                	for <a href=3D"https://phpdelusions.net/pdo_examples/updat=
e#comment-885">UPDATE query using PDO:</a><br>
	                <span class=3D"comment">Hey YourCommonSense, im in a probl=
em with the UPDATE, three months trying to solve it, and I... </span><br>
	                <a href=3D"https://phpdelusions.net/pdo_examples/update#co=
mment-885">read more</a>
		        </li>
=20
                <li>
	                02.08.20 18:06<br><span class=3D"comment-author">Virgil Bi=
erschwale</span>
                	for <a href=3D"https://phpdelusions.net/pdo#comment-884">(=
The only proper) PDO tutorial:</a><br>
	                <span class=3D"comment">converting my mapping site to PDO =
and it works great until I try and retrieve 10,000... </span><br>
	                <a href=3D"https://phpdelusions.net/pdo#comment-884">read =
more</a>
		        </li>
=20
                <li>
	                28.07.20 14:58<br><span class=3D"comment-author">lokesh</s=
pan>
                	for <a href=3D"https://phpdelusions.net/pdo_examples/check=
_email_exists#comment-883">How to check if email exists in the database?:</=
a><br>
	                <span class=3D"comment">Hii i am lokesh </span><br>
	                <a href=3D"https://phpdelusions.net/pdo_examples/check_ema=
il_exists#comment-883">read more</a>
		        </li>
=20
                <li>
	                20.07.20 12:05<br><span class=3D"comment-author">John</spa=
n>
                	for <a href=3D"https://phpdelusions.net/articles/error_rep=
orting#comment-882">PHP error reporting:</a><br>
	                <span class=3D"comment">I tried your solution "Converting =
errors to exceptions" but the problem is that the script... </span><br>
	                <a href=3D"https://phpdelusions.net/articles/error_reporti=
ng#comment-882">read more</a>
		        </li>
              </ul>

          </div>

          <div class=3D"sidebar-block bg-primary-10 p-3" align=3D"center">
<a class=3D"twitter-timeline" href=3D"https://twitter.com/ShrapnelCol" data=
-widget-id=3D"732288407301435392" width=3D"300" height=3D"400" data-chrome=
=3D"noheader nofooter noborder">Tweets by @ShrapnelCol</a>

          </div>

          </div>
        </div>
        </div>
     =20
     =20
   =20
   =20
    <div class=3D"comments pt-3 pb-3">
      <div class=3D"container" id=3D"comments">
        <div class=3D"col-lg-6 col-md-9 col-sm-9">
          <h2>Add a comment</h2>
          <p>Please refrain from sending spam or advertising of any sort.<b=
r>
          Messages with hyperlinks will be pending for moderator's review.<=
/p>
          <p><b>Markdown is now supported:</b>
          </p><ul>
          <li><code>&gt;</code> before and an empty line after for a quote
          </li><li>four spaces to mark a block of code=20
          </li></ul>
          <p></p>
          <form class=3D"form-horizontal form-phpfaq mt-3" method=3D"POST">
            <div class=3D"form-group">
              <label for=3D"comment-name" class=3D"col-sm-4 control-label">=
Your name</label>
              <div class=3D"col-sm-8">
                <input type=3D"text" name=3D"name" id=3D"comment-name" clas=
s=3D"form-control" value=3D"">
              </div>
            </div>
            <div class=3D"form-group">
              <label for=3D"comment-email" class=3D"col-sm-4 control-label"=
>Are you a robot?</label>
              <div class=3D"col-sm-8">
                <input type=3D"text" name=3D"email" id=3D"comment-email" cl=
ass=3D"form-control">
              </div>
            </div>
            <div class=3D"form-group">
              <label for=3D"comment-comment" class=3D"col-sm-4 control-labe=
l">Message</label>
              <div class=3D"col-sm-8">
                <textarea name=3D"body" rows=3D"5" id=3D"comment-comment" c=
lass=3D"form-control"></textarea>
              </div>
            </div>
            <div class=3D"form-group">
              <label for=3D"comment-city" class=3D"col-sm-4 control-label">=
Address</label>
              <div class=3D"col-sm-8">
                <input type=3D"text" name=3D"city" id=3D"comment-city" clas=
s=3D"form-control" value=3D"">
                <p class=3D"form-control-static">If you want to get a reply=
 from admin, you may enter your E=97mail address above</p>
              </div>
            </div>
            <div class=3D"form-group">
              <div class=3D"col-sm-4"></div>
              <div class=3D"col-sm-8 col-md-4 col-lg-4">
			     =20
			     =20
                <button type=3D"submit" class=3D"btn btn-phpfaq btn-block">=
Send</button>
              </div>
            </div>
          </form>

        </div>
      </div>
    </div>
    <div class=3D"comments pt-6">
      <div class=3D"container">
        <div class=3D"col-xs-12 col-sm-7 col-md-8">
          <h2 class=3D"h1">Comments:</h2>
          <ul class=3D"comments-list">
=20
            <li class=3D"comment" id=3D"comment-884">
              <div class=3D"comment-author">
              	Virgil Bierschwale, 02.08.20 18:06              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>conv=
erting my mapping site to PDO and it works great until I try and retrieve 1=
0,000 records.</p>
<p>Not sure how to write a for loop for pdo.
Found this example and tried it, but I'm missing something and was wonderin=
g if you had any recommendations.</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;EMPLOYER_NAME,&nbsp;SECONDARY_ENTITY_BUSINESS_NAME,&nbsp;wlat,&nbsp;w=
lng&nbsp;<br>FROM&nbsp;h1bdisclosuredataFY2020&nbsp;<br>where&nbsp;EMPLOYER=
_NAME&nbsp;like&nbsp;'%"&nbsp;</span><span style=3D"color: #007700">.&nbsp;=
</span><span style=3D"color: #0000BB">$this</span><span style=3D"color: #00=
7700">-&gt;</span><span style=3D"color: #0000BB">srchname&nbsp;</span><span=
 style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #DD0000">"%'&=
nbsp;<br>or&nbsp;SECONDARY_ENTITY_BUSINESS_NAME&nbsp;like&nbsp;'%"&nbsp;</s=
pan><span style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #000=
0BB">$this</span><span style=3D"color: #007700">-&gt;</span><span style=3D"=
color: #0000BB">srchname&nbsp;</span><span style=3D"color: #007700">.&nbsp;=
</span><span style=3D"color: #DD0000">"%'&nbsp;"</span><span style=3D"color=
: #007700">;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span style=3D"color: #0000BB">$stmt&nbsp;</span><span style=3D"color: #007=
700">=3D&nbsp;</span><span style=3D"color: #0000BB">$this</span><span style=
=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">conn</span><=
span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">pr=
epare</span><span style=3D"color: #007700">(</span><span style=3D"color: #0=
000BB">$sql</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$stmt</sp=
an><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB=
">execute</span><span style=3D"color: #007700">();<br>&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #FF8000">//return&n=
bsp;$stmt-&gt;fetchAll(PDO::FETCH_ASSOC);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;//$stmt-&gt;closeCursor();<br><br>&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$sql</sp=
an><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB=
">SetFetchMode</span><span style=3D"color: #007700">(</span><span style=3D"=
color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span sty=
le=3D"color: #0000BB">FETCH_ASSOC</span><span style=3D"color: #007700">);<b=
r>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(</span><span style=
=3D"color: #0000BB">$row&nbsp;</span><span style=3D"color: #007700">=3D&nbs=
p;</span><span style=3D"color: #0000BB">$sql</span><span style=3D"color: #0=
07700">-&gt;</span><span style=3D"color: #0000BB">fetch</span><span style=
=3D"color: #007700">())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style=3D"color: #0000=
BB">$row</span><span style=3D"color: #007700">[</span><span style=3D"color:=
 #DD0000">'EMPLOYER_NAME'</span><span style=3D"color: #007700">]&nbsp;.&nbs=
p;</span><span style=3D"color: #DD0000">"\n"</span><span style=3D"color: #0=
07700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;echo&nbsp;</span><span style=3D"color: #0000BB">$row</span><span s=
tyle=3D"color: #007700">[</span><span style=3D"color: #DD0000">'SECONDARY_E=
NTITY_BUSINESS_NAME'</span><span style=3D"color: #007700">]&nbsp;.&nbsp;</s=
pan><span style=3D"color: #DD0000">"\n"</span><span style=3D"color: #007700=
">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;echo&nbsp;</span><span style=3D"color: #0000BB">$row</span><span style=
=3D"color: #007700">[</span><span style=3D"color: #DD0000">'wlat'</span><sp=
an style=3D"color: #007700">]&nbsp;.&nbsp;</span><span style=3D"color: #DD0=
000">"\n"</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span sty=
le=3D"color: #0000BB">$row</span><span style=3D"color: #007700">[</span><sp=
an style=3D"color: #DD0000">'wlng'</span><span style=3D"color: #007700">]&n=
bsp;.&nbsp;</span><span style=3D"color: #DD0000">"\n"</span><span style=3D"=
color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</spa=
n><span style=3D"color: #0000BB"></span></code></code></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Virgil!</p>
<p>Technically it should work. </p>
<p>If it doesn't then it would be a good idea to provide some description o=
f the result you get. </p>
<p>Besides, you are using PDO prepared statement entirely wrong. Please rea=
d the article above.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-875">
              <div class=3D"comment-author">
              	Kerstin, 02.07.20 12:30              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you for the tutorial. It helps a lot!</p>
<p>I want to comment on the section on the rowCount() method: You are writi=
ng that one scarcely needs it because normally you only need to know if the=
re is 0 or more lines.
But I use it a lot, especially when I need to know if I have to use plural =
or singular in a text. E.g. "You have 1 new message" or "2 new messages". F=
or that it is not sufficient to just know if there is date or not.
You present an alternative with getting it directly from the database and s=
tate that this is a better way to do it. Could you please tell why? For per=
formance reasons?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Kerstin!</p>
<p>Thank you for a good question. Yes, exactly, it's for the performance re=
asons. As a rule of thumb, one should always select the exact information t=
hey need from a database:</p>
<ul>
<li>if you need the rows then select the rows using fetchAll() and then you=
 can use PHP's count() to get the number</li>
<li>if you don't need the rows but only the number, then select the number<=
/li>
</ul>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-873">
              <div class=3D"comment-author">
              	Bogdan, 10.06.20 21:29              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Plea=
se write a book called PHP Idiots. I will buy two copies. Thank you!</p></d=
iv>
            </li>
=20
            <li class=3D"comment" id=3D"comment-871">
              <div class=3D"comment-author">
              	Ken, 28.05.20 21:18              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Is t=
here a way to get your blogs as one "book"/pdf.  I am more comfortable read=
ing on paper than on line.</p>
<p>Thanks Ken</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ken!</p>
<p>No, there is no PDF version but as far as I know there are many services=
 that convert a web page to PDF. I never used it myself though but I hope t=
he result would be satisfactory</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-866">
              <div class=3D"comment-author">
              	ptmp727, 22.05.20 20:52              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I am=
 building a small framework of my own and I am not creating an ORM, But I h=
ave a DAO per entity/table which manages the relations superficially,</p>
<p>I read about multi queries being exactly the same as one by one in every=
 way,</p>
<p>So what is the best way to do multiple insert, update,delete in one hit?
If I did all these in one single query, would it not be faster?</p>
<p>If not, then maybe its easier to just do one query separately?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello!</p>
<p>No, you have read it wrong. Doing a multi query is NOT the same as doing=
 one.<br>
And no, it is not faster either.</p>
<p>The proper way to run multiple DML  queries is to use a <em>transaction<=
/em> and a prepared statement:</p>
<ol>
<li>Prepare your DELETE, INSERT or UPDATE query</li>
<li>then start a transaction</li>
<li>then execute your prepared query with different sets of data in a loop<=
/li>
<li>Then commit the transaction</li>
</ol>
<p>You can get an example here: <a href=3D"https://phpdelusions.net/pdo_exa=
mples/insert#multiple">https://phpdelusions.net/pdo_examples/insert#multipl=
e</a></p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-854">
              <div class=3D"comment-author">
              	Ivano Dagna, 10.05.20 18:13              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o! I have a simple table with a massive number of records, and this is caus=
ing memory and timeout issues when I use fetchAll(). I think using a cursor=
 would solve them, but I never used them.
May you please give me an advice or point me towards a good source of examp=
les?
Thanks in advance
Ivano</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ivano!</p>
<p>You can find the example here: <a href=3D"https://phpdelusions.net/pdo_e=
xamples/select#multiple">https://phpdelusions.net/pdo_examples/select#multi=
ple</a></p>
<p>Also, consider using unbuffered query, as explained here: <a href=3D"htt=
ps://phpdelusions.net/pdo#mysqlnd">https://phpdelusions.net/pdo#mysqlnd</a>=
</p>
<p>However, in the first place you should consider to process lesser amount=
s of data. You can use WHERE or LIMIT clauses to limit the amount of rows s=
elected. Also, when applicable, you can ask a database to perform all calcu=
lations and return the result in a single row.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-851">
              <div class=3D"comment-author">
              	Ian Sebryk, 29.04.20 11:50              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>i ha=
ve a db field that i want to use to track intervals.  i want to push comple=
ted intervals onto the db field when they are completed.  to wit:</p>
<pre><code class=3D"language-mysql">intervals =3D '10'
intervals =3D '1020'   &lt;-- pushing 20 onto the field
intervals =3D '102040'   &lt;-- pushing 40 onto the field
intervals =3D '102040SP'   &lt;-- pushing SP onto the field</code></pre>
<p>the values will never decrement (and order doesn't really matter, if tha=
t's a factor), so i'm only looking for a way to <code>UPDATE</code> the fie=
ld, but i have no idea how to do that because <code>UPDATE tbl SET ...</cod=
e> just overwrites the existing contents.  i looked into <code>CONCAT</code=
>, but that works with variables the user provides, not with existing data =
AND additional user data.  if i were to write some PSEUDO code, it might lo=
ok like this:</p>
<pre><code class=3D"language-php">UPDATE tbl PUSHTO interval VALUE newInter=
val WHERE id=3D'id' AND date=3D'date'</code></pre>
<p>so.  how would i structure my query for PDO?  would there be any issues =
with validation?  can you help me out here?  thanks in advance for your tim=
e.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ian!</p>
<p>Although CONCAT certainly works with variables the user provides, I woul=
d <strong>strongly</strong> suggest to normalize your table structure inste=
ad. </p>
<p>To normalize in the database world means to eliminate questions like thi=
s. Intervals should be really really a <strong>separate table</strong> wher=
e you add intervals on the distinct <strong>rows</strong>.</p>
<p>You can then even get the same string in your SELECT query using a GROUP=
_CONCAT() function, id needed.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-835">
              <div class=3D"comment-author">
              	Wanze, 26.03.20 01:14              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>How =
does inserting file into mysql table work from .csv file. I have a pdo db.
Thanks.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-834">
              <div class=3D"comment-author">
              	AnrDaemon, 23.03.20 02:59              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>@Ing=
us, did you run same query in mysql console by hands?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-833">
              <div class=3D"comment-author">
              	Ingus, 20.03.20 22:43              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o there! Could you help me understand why this query is not showing any row=
?</p>
<pre><code><code><span style=3D"color: #0000BB">$Query&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$main=
</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #00=
00BB">con</span><span style=3D"color: #007700">-&gt;</span><span style=3D"c=
olor: #0000BB">prepare</span><span style=3D"color: #007700">(</span><span s=
tyle=3D"color: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;earnings&nbsp;WHERE&n=
bsp;user&nbsp;=3D&nbsp;?&nbsp;ORDER&nbsp;BY&nbsp;id&nbsp;DESC&nbsp;LIMIT&nb=
sp;?,&nbsp;?"</span><span style=3D"color: #007700">);<br></span><span style=
=3D"color: #0000BB">$Query</span><span style=3D"color: #007700">-&gt;</span=
><span style=3D"color: #0000BB">execute</span><span style=3D"color: #007700=
">([</span><span style=3D"color: #0000BB">$_SESSION</span><span style=3D"co=
lor: #007700">[</span><span style=3D"color: #DD0000">'UID'</span><span styl=
e=3D"color: #007700">],&nbsp;</span><span style=3D"color: #0000BB">$start</=
span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #00=
00BB">$limit</span><span style=3D"color: #007700">]);<br>while(</span><span=
 style=3D"color: #0000BB">$row&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;</span><span style=3D"color: #0000BB">$Query</span><span style=3D"=
color: #007700">-&gt;</span><span style=3D"color: #0000BB">fetch</span><spa=
n style=3D"color: #007700">()){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<=
br>}</span><span style=3D"color: #0000BB"></span></code></code></pre></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-832">
              <div class=3D"comment-author">
              	Michael, 18.03.20 21:10              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi -=
 Thank you for the excellent site and invaluable information! I=91m followi=
ng your advice in using prepared statements to lessen any risk on a site I=
=92m building. I would like to use a prepared PDO statement for an INSERT..=
.ON DUPLICATE KEY and an example would be very much appreciated. Thank you.=
</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-831">
              <div class=3D"comment-author">
              	James Miller, 13.03.20 00:00              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I se=
e not examples of an UPDATE stored procedure in PDO. I have tried to make t=
his work, but have failed. I have not problem with UPDATE PDO, but not call=
ing a sproc for an update. Is this possible or is it nonsensical to try and=
 use?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-829">
              <div class=3D"comment-author">
              	Coulston, 10.03.20 12:59              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>How =
can I create two forms on one page that submits form data in two different =
scripts; Let's say a login page and a registration page that submits data o=
n two different scripts, one for login and another for registration</p></di=
v>
            </li>
=20
            <li class=3D"comment" id=3D"comment-827">
              <div class=3D"comment-author">
              	Noel, 02.03.20 13:01              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hey,=
 great article, well done. Im not sure if i missed it but how do you close =
the connection and statement? In mysql you close the database connection an=
d statement, is that something you do with PDO or did i miss something.</p>=
</div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-826">
              <div class=3D"comment-author">
              	Sergio A. Kessler, 22.02.20 00:43              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>ok, =
what about this:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #FF8000">//&nbsp;the&nbsp;list&nbsp;of&nbsp;allowed&nbsp;field&nbsp;names=
<br></span><span style=3D"color: #0000BB">$allowed&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;[</span><span style=3D"color: #DD0000">"name"<=
/span><span style=3D"color: #007700">,</span><span style=3D"color: #DD0000"=
>"surname"</span><span style=3D"color: #007700">,</span><span style=3D"colo=
r: #DD0000">"email"</span><span style=3D"color: #007700">];<br><br></span><=
span style=3D"color: #0000BB">$primary_key_name&nbsp;</span><span style=3D"=
color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'id'</span><=
span style=3D"color: #007700">;<br></span><span style=3D"color: #0000BB">$p=
rimary_key_value&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span=
><span style=3D"color: #0000BB">48</span><span style=3D"color: #007700">;<b=
r><br></span><span style=3D"color: #FF8000">/******************************=
*****************<br>&nbsp;*&nbsp;update&nbsp;the&nbsp;record<br>&nbsp;*/<b=
r></span><span style=3D"color: #0000BB">$set&nbsp;</span><span style=3D"col=
or: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">implode</span><=
span style=3D"color: #007700">(</span><span style=3D"color: #DD0000">'=3D?,=
&nbsp;'</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"c=
olor: #0000BB">array_keys</span><span style=3D"color: #007700">(</span><spa=
n style=3D"color: #0000BB">array_intersect_key</span><span style=3D"color: =
#007700">(</span><span style=3D"color: #0000BB">$new_row</span><span style=
=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$allowed</=
span><span style=3D"color: #007700">)))&nbsp;.&nbsp;</span><span style=3D"c=
olor: #DD0000">'=3D?'</span><span style=3D"color: #007700">;<br><br></span>=
<span style=3D"color: #0000BB">$sql&nbsp;</span><span style=3D"color: #0077=
00">=3D&nbsp;</span><span style=3D"color: #DD0000">"update&nbsp;table1&nbsp=
;set&nbsp;</span><span style=3D"color: #0000BB">$set</span><span style=3D"c=
olor: #DD0000">&nbsp;where&nbsp;</span><span style=3D"color: #0000BB">$prim=
ary_key_name</span><span style=3D"color: #DD0000">&nbsp;=3D&nbsp;?"</span><=
span style=3D"color: #007700">;<br><br></span><span style=3D"color: #0000BB=
">$sql_params&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><s=
pan style=3D"color: #0000BB">array_values</span><span style=3D"color: #0077=
00">(</span><span style=3D"color: #0000BB">$new_row</span><span style=3D"co=
lor: #007700">);<br></span><span style=3D"color: #0000BB">$sql_params</span=
><span style=3D"color: #007700">[]&nbsp;=3D&nbsp;</span><span style=3D"colo=
r: #0000BB">$primary_key_value</span><span style=3D"color: #007700">;<br><b=
r></span><span style=3D"color: #0000BB">$st&nbsp;</span><span style=3D"colo=
r: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$db</span><span =
style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">prepare=
</span><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB=
">$sql</span><span style=3D"color: #007700">);<br></span><span style=3D"col=
or: #0000BB">$st</span><span style=3D"color: #007700">-&gt;</span><span sty=
le=3D"color: #0000BB">execute</span><span style=3D"color: #007700">(</span>=
<span style=3D"color: #0000BB">$sql_params</span><span style=3D"color: #007=
700">);<br></span><span style=3D"color: #FF8000">/*<br>&nbsp;*&nbsp;/update=
&nbsp;the&nbsp;record<br>&nbsp;********************************************=
****/</span><span style=3D"color: #0000BB"></span></code></code></pre></div=
>
            </li>
=20
            <li class=3D"comment" id=3D"comment-824">
              <div class=3D"comment-author">
              	Sergio A. Kessler, 19.02.20 16:17              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>WRT:=
</p>
<pre><code><code><span style=3D"color: #0000BB">$in&nbsp;&nbsp;</span><span=
 style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">st=
r_repeat</span><span style=3D"color: #007700">(</span><span style=3D"color:=
 #DD0000">'?,'</span><span style=3D"color: #007700">,&nbsp;</span><span sty=
le=3D"color: #0000BB">count</span><span style=3D"color: #007700">(</span><s=
pan style=3D"color: #0000BB">$arr</span><span style=3D"color: #007700">)&nb=
sp;-&nbsp;</span><span style=3D"color: #0000BB">1</span><span style=3D"colo=
r: #007700">)&nbsp;.&nbsp;</span><span style=3D"color: #DD0000">'?'</span><=
span style=3D"color: #007700">;</span><span style=3D"color: #0000BB"></span=
></code></code></pre>
<p>if $arr is empty, you still get a '?', I use:</p>
<pre><code><code><span style=3D"color: #0000BB">$in&nbsp;&nbsp;</span><span=
 style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">im=
plode</span><span style=3D"color: #007700">(</span><span style=3D"color: #D=
D0000">','</span><span style=3D"color: #007700">,&nbsp;</span><span style=
=3D"color: #0000BB">array_fill</span><span style=3D"color: #007700">(</span=
><span style=3D"color: #0000BB">0</span><span style=3D"color: #007700">,&nb=
sp;</span><span style=3D"color: #0000BB">count</span><span style=3D"color: =
#007700">(</span><span style=3D"color: #0000BB">$arr</span><span style=3D"c=
olor: #007700">),&nbsp;</span><span style=3D"color: #DD0000">'?'</span><spa=
n style=3D"color: #007700">));</span><span style=3D"color: #0000BB"></span>=
</code></code></pre>
<p>where if $arr is empty, $in is also empty</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>If array is empty then empty in() clause =
will cause an SQL error, so it has to be checked before the query execution=
.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-823">
              <div class=3D"comment-author">
              	Sergio A. Kessler, 19.02.20 03:13              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I li=
ke to use: </p>
<pre><code><code><span style=3D"color: #0000BB">&nbsp;</span><span style=3D=
"color: #FF8000">/***********************************************<br>&nbsp;=
*&nbsp;update&nbsp;the&nbsp;record<br>&nbsp;*/<br></span><span style=3D"col=
or: #0000BB">$set&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #0000BB">implode</span><span style=3D"color: #00770=
0">(</span><span style=3D"color: #DD0000">'=3D?,&nbsp;'</span><span style=
=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">array_keys=
</span><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB=
">$new_row</span><span style=3D"color: #007700">))&nbsp;.&nbsp;</span><span=
 style=3D"color: #DD0000">'=3D?'</span><span style=3D"color: #007700">;<br>=
<br></span><span style=3D"color: #0000BB">$sql&nbsp;</span><span style=3D"c=
olor: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"update&nbsp;=
centro_donacion&nbsp;set&nbsp;</span><span style=3D"color: #0000BB">$set</s=
pan><span style=3D"color: #DD0000">&nbsp;where&nbsp;</span><span style=3D"c=
olor: #0000BB">$primary_key_name</span><span style=3D"color: #DD0000">&nbsp=
;=3D&nbsp;?"</span><span style=3D"color: #007700">;<br><br></span><span sty=
le=3D"color: #0000BB">$sql_params&nbsp;</span><span style=3D"color: #007700=
">=3D&nbsp;</span><span style=3D"color: #0000BB">array_values</span><span s=
tyle=3D"color: #007700">(</span><span style=3D"color: #0000BB">$new_row</sp=
an><span style=3D"color: #007700">);<br></span><span style=3D"color: #0000B=
B">$sql_params</span><span style=3D"color: #007700">[]&nbsp;=3D&nbsp;</span=
><span style=3D"color: #0000BB">$primary_key_value</span><span style=3D"col=
or: #007700">;<br><br></span><span style=3D"color: #0000BB">$st&nbsp;</span=
><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000=
BB">$db</span><span style=3D"color: #007700">-&gt;</span><span style=3D"col=
or: #0000BB">prepare</span><span style=3D"color: #007700">(</span><span sty=
le=3D"color: #0000BB">$sql</span><span style=3D"color: #007700">);<br></spa=
n><span style=3D"color: #0000BB">$st</span><span style=3D"color: #007700">-=
&gt;</span><span style=3D"color: #0000BB">execute</span><span style=3D"colo=
r: #007700">(</span><span style=3D"color: #0000BB">$sql_params</span><span =
style=3D"color: #007700">);<br></span><span style=3D"color: #FF8000">/*<br>=
*&nbsp;/update&nbsp;the&nbsp;record<br>************************************=
************/</span><span style=3D"color: #0000BB"></span></code></code></p=
re></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Sergio!</p>
<p>With this code you've got two problems: </p>
<ul>
<li>potential but <strong>very real</strong> security breach. Field names /=
 array keys being added to the query <strong>absolutely untreated</strong><=
/li>
<li>a possible formatting issue. the field name may happen to coincide with=
  mysql reserved word and it will result in the query error. </li>
</ul>
<p>I've got an article that covers both problems, please check it out: <a h=
ref=3D"https://phpdelusions.net/pdo_examples/dynamical_update">https://phpd=
elusions.net/pdo_examples/dynamical_update</a></p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-816">
              <div class=3D"comment-author">
              	GioMBG, 09.02.20 20:53              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi M=
aster,
for the purpose of security, on a machine that connects to the dbs only loc=
ally, does it make sense to read the users dbs with a connection other than=
 the one used to read other dbs ??
now therefore I make 2 types of different connections ( $conn1 &amp; $conn2=
 ) through 2 db.inc.php that I carry inside my functions through :
global $conn1, $conn2...
now I made some changes and managing 2 different types of connections becam=
e really problematic, and I think to understand the bad pratice of call the=
 connections with global...
so I was wondering if it made sense to keep them separate or go MUCH simple=
r keeping one for all without having problem recalling one connection only =
in my functions with global $conn...
suggestions ?
always thanks
Gio</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Gio!</p>
<p>I don't see any reason to have an extra connections. As a rule, every we=
bsite is using just a single connection. I have a feeling that anyone who r=
ecommends an extra connection for the extra security never used it in the r=
eal life.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-812">
              <div class=3D"comment-author">
              	John Thompson, 31.01.20 06:06              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I'm =
trying to make my PDO code portable. With mysqli you can have you database,=
 host, username/password in a db.inc or db.php then include it when you sta=
rt your code. I am not finding that I'm able to do that. For example:</p>
<p>db.inc/db.php</p>
<pre><code><code><span style=3D"color: #0000BB">$host&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"Serve=
r"</span><span style=3D"color: #007700">;<br></span><span style=3D"color: #=
0000BB">$database&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #DD0000">"Cats"</span><span style=3D"color: #007700=
">;<br></span><span style=3D"color: #0000BB">$user&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"Frank"<=
/span><span style=3D"color: #007700">;<br></span><span style=3D"color: #000=
0BB">$password&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><=
span style=3D"color: #DD0000">"something"</span><span style=3D"color: #0077=
00">;</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>On the php file to do the action:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">include(</span><span style=3D"color: #0000BB">db</span><span sty=
le=3D"color: #007700">.</span><span style=3D"color: #0000BB">php</span><spa=
n style=3D"color: #007700">);</span><span style=3D"color: #0000BB"></span><=
/code></code></pre>
<p>Then call your variables and run the mysqli connection then the query.
If I try that in PDO I get errors. Is this just not done? Or there's a prop=
er way to have 1 file with my DSN, username, password and database name?</p=
>
<p>Thank You in advance,</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello John!</p>
<p>Of course it can be done. </p>
<p>The error is not some imminent but probably some mistake in your impleme=
ntation. A few problems I can spot right away:</p>
<ul>
<li>there is no opening php tag in db.php. the first line should be &lt;?ph=
p</li>
<li>there are missing quotes when you call include. it should be include 'd=
b.php';</li>
<li>dubious path to db.php. Make sure you are providing a correct <em>absol=
ute</em> path to a file. Check out the relevant article: <a href=3D"https:/=
/phpdelusions.net/articles/paths">https://phpdelusions.net/articles/paths</=
a></li>
</ul>
<p>If you still encounter some errors, try to google them - usually there a=
re many answers on Stack Overflow explainig the problem.</p>              <=
/div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-803">
              <div class=3D"comment-author">
              	Charles Henderson, 20.01.20 21:53              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Ok, =
first let me just say, I am not asking you to explain to me how to do this,=
 just asking if it is possible. I asked if anyone could point me in the rig=
ht direction on how to do it on Stack Exchange and was told that the answer=
 to that question could fill books lol. So basically I just want to know if=
 it is possible to do, and if it is, I will roll up my sleeves and do a lot=
 of reading.</p>
<p>Basically we currently have a customer invoicing program made in Access,=
 forms built in Access and using Access database. There are 2 main parts, t=
he customer info and the invoice itself. It looks like there is a customer =
table and an invoice table. When an invoice is made it links to the custome=
r by the incremental ID of the invoice. Basically I would like to make a we=
b form that has all the information on one page. Top has customer info, and=
 if it is a new customer the info can put inputted and submitted to databas=
e, if it is a return customer then the customer can be looked up by custome=
r ID, license number, or lastname, and the rest of the info autofilled from=
 the record. Then the invoice can be filled out and submitted, linking the =
invoice to the customer. In the end an invoice can be saved, emailed, or pr=
inted. Does that sound like something that is possible to make? If I did no=
t do a good job explaining I can send you screenshots of what we are curren=
tly using and of what I would like the new one to look like. Thank you in a=
dvance for any help you can offer.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Charles!</p>
<p>Well, everything is doable, the question is the amount of effort you are=
 willing to spend. </p>
<p>The easiest way would be to ditch everything you have now and rebuild th=
e system using PHP HTML and SQLite. For this stack the task is of low to mo=
derate complexity, can be done in a month if you have no prior experience.<=
/p>
<p>If you still need the connection to your existing Access database, it wo=
uld be tricky to achieve and clumsy to maintain. And I've got no solution f=
rom top off my head right now.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-801">
              <div class=3D"comment-author">
              	Ingus, 10.01.20 13:14              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Repl=
aying to your last reply (Ingus, 10.01.20 11:16):
Thanks for fetch() fix!</p>
<p>But what if i had like this:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if(</span><span style=3D"color: #0000BB">mysqli_num_rows</span><=
span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$resul=
t</span><span style=3D"color: #007700">)=3D=3D</span><span style=3D"color: =
#0000BB">0</span><span style=3D"color: #007700">){&nbsp;</span><span style=
=3D"color: #FF8000">//do&nbsp;something&nbsp;}<br></span><span style=3D"col=
or: #007700">if(</span><span style=3D"color: #0000BB">mysqli_num_rows</span=
><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$res=
ult</span><span style=3D"color: #007700">)=3D=3D</span><span style=3D"color=
: #0000BB">1</span><span style=3D"color: #007700">){&nbsp;</span><span styl=
e=3D"color: #FF8000">//do&nbsp;something&nbsp;else&nbsp;}<br></span><span s=
tyle=3D"color: #007700">if(</span><span style=3D"color: #0000BB">mysqli_num=
_rows</span><span style=3D"color: #007700">(</span><span style=3D"color: #0=
000BB">$result</span><span style=3D"color: #007700">)=3D=3D</span><span sty=
le=3D"color: #0000BB">5</span><span style=3D"color: #007700">){&nbsp;</span=
><span style=3D"color: #FF8000">//do&nbsp;something&nbsp;else&nbsp;}</span>=
<span style=3D"color: #0000BB"></span></code></code></pre>
<p>How to get same result with PDO?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>I can't even think where you would need s=
uch a code but you can fetch all rows into array using fetchAll() and then =
count them</p>
<pre><code><code><span style=3D"color: #0000BB">$rows&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$resul=
t</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0=
000BB">fetchAll</span><span style=3D"color: #007700">();<br></span><span st=
yle=3D"color: #0000BB">$count&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;</span><span style=3D"color: #0000BB">count</span><span style=3D"c=
olor: #007700">(</span><span style=3D"color: #0000BB">$rows</span><span sty=
le=3D"color: #007700">);<br>if(</span><span style=3D"color: #0000BB">$count=
&nbsp;</span><span style=3D"color: #007700">=3D=3D&nbsp;</span><span style=
=3D"color: #0000BB">0</span><span style=3D"color: #007700">){&nbsp;</span><=
span style=3D"color: #FF8000">//do&nbsp;something&nbsp;}<br></span><span st=
yle=3D"color: #007700">elseif(</span><span style=3D"color: #0000BB">$count&=
nbsp;</span><span style=3D"color: #007700">=3D=3D&nbsp;</span><span style=
=3D"color: #0000BB">1</span><span style=3D"color: #007700">){&nbsp;</span><=
span style=3D"color: #FF8000">//do&nbsp;something&nbsp;else&nbsp;}<br></spa=
n><span style=3D"color: #007700">elseif(</span><span style=3D"color: #0000B=
B">$count&nbsp;</span><span style=3D"color: #007700">=3D=3D&nbsp;</span><sp=
an style=3D"color: #0000BB">5</span><span style=3D"color: #007700">){&nbsp;=
</span><span style=3D"color: #FF8000">//do&nbsp;something&nbsp;else&nbsp;}<=
/span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>But wait. <strong>If you need only count, but not the data itself</stron=
g> then select only count.</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SELECT&nbsp;count(*)&nbsp;FROM&nbsp;my_table&nbsp;WHERE&nbsp;=
id=3D?&nbsp;AND&nbsp;username=3D?&nbsp;AND&nbsp;email=3D?&nbsp;ORDER&nbsp;B=
Y&nbsp;id&nbsp;DESC"</span><span style=3D"color: #007700">);<br></span><spa=
n style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;=
</span><span style=3D"color: #0000BB">execute</span><span style=3D"color: #=
007700">([</span><span style=3D"color: #0000BB">$val1</span><span style=3D"=
color: #007700">,</span><span style=3D"color: #0000BB">$val2</span><span st=
yle=3D"color: #007700">,</span><span style=3D"color: #0000BB">$val3</span><=
span style=3D"color: #007700">]);<br></span><span style=3D"color: #0000BB">=
$count&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span sty=
le=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</spa=
n><span style=3D"color: #0000BB">fetchColumn</span><span style=3D"color: #0=
07700">();<br>if(</span><span style=3D"color: #0000BB">$count&nbsp;</span><=
span style=3D"color: #007700">=3D=3D&nbsp;</span><span style=3D"color: #000=
0BB">0</span><span style=3D"color: #007700">){&nbsp;</span><span style=3D"c=
olor: #FF8000">//do&nbsp;something&nbsp;}</span><span style=3D"color: #0000=
BB"></span></code></code></pre>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-800">
              <div class=3D"comment-author">
              	Ingus, 10.01.20 11:16              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I m =
having issue converting mysqli to PDO </p>
<p>My code:</p>
<pre><code><code><span style=3D"color: #0000BB">$result&nbsp;</span><span s=
tyle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo=
</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #00=
00BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"c=
olor: #DD0000">"SELECT&nbsp;status,&nbsp;date&nbsp;FROM&nbsp;my_table&nbsp;=
WHERE&nbsp;id=3D?&nbsp;AND&nbsp;username=3D?&nbsp;AND&nbsp;email=3D?&nbsp;O=
RDER&nbsp;BY&nbsp;id&nbsp;DESC"</span><span style=3D"color: #007700">);<br>=
</span><span style=3D"color: #0000BB">$result</span><span style=3D"color: #=
007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><span styl=
e=3D"color: #007700">([</span><span style=3D"color: #0000BB">$val1</span><s=
pan style=3D"color: #007700">,</span><span style=3D"color: #0000BB">$val2</=
span><span style=3D"color: #007700">,</span><span style=3D"color: #0000BB">=
$val3</span><span style=3D"color: #007700">]);<br></span><span style=3D"col=
or: #0000BB">$row&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #0000BB">$result</span><span style=3D"color: #00770=
0">-&gt;</span><span style=3D"color: #0000BB">fetchColumn</span><span style=
=3D"color: #007700">();</span><span style=3D"color: #0000BB"></span></code>=
</code></pre>
<p>I had for mysqli:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if&nbsp;((</span><span style=3D"color: #0000BB">mysqli_num_rows<=
/span><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB"=
>$result</span><span style=3D"color: #007700">)=3D=3D</span><span style=3D"=
color: #0000BB">0</span><span style=3D"color: #007700">)||(</span><span sty=
le=3D"color: #0000BB">time</span><span style=3D"color: #007700">()-</span><=
span style=3D"color: #0000BB">strtotime</span><span style=3D"color: #007700=
">(</span><span style=3D"color: #0000BB">$date</span><span style=3D"color: =
#007700">)&gt;</span><span style=3D"color: #0000BB">120</span><span style=
=3D"color: #007700">)){&nbsp;&nbsp;</span><span style=3D"color: #FF8000">//=
DO&nbsp;SOMETHING&nbsp;&nbsp;}</span><span style=3D"color: #0000BB"></span>=
</code></code></pre>
<p>The question is how to make same effect with count returned lines with P=
DO?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ingus!</p>
<p>I am not sure what are you doing here but at least I can tell that fetch=
Column() is not suitable for such a query, because you are selecting two co=
lumns, not one.</p>
<p>Change the last line to </p>
<pre><code><code><span style=3D"color: #0000BB">$row&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$result=
</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #00=
00BB">fetch</span><span style=3D"color: #007700">();</span><span style=3D"c=
olor: #0000BB"></span></code></code></pre>
<p>and then you can use this $row variable instead of mysqli_num_rows() bec=
ause not empty $row means your query returned something:</p>
<pre><code><code><span style=3D"color: #0000BB">&nbsp;</span><span style=3D=
"color: #007700">if&nbsp;(</span><span style=3D"color: #0000BB">$row&nbsp;<=
/span><span style=3D"color: #007700">||(</span><span style=3D"color: #0000B=
B">time</span><span style=3D"color: #007700">()-</span><span style=3D"color=
: #0000BB">strtotime</span><span style=3D"color: #007700">(</span><span sty=
le=3D"color: #0000BB">$date</span><span style=3D"color: #007700">)&gt;</spa=
n><span style=3D"color: #0000BB">120</span><span style=3D"color: #007700">)=
){&nbsp;&nbsp;</span><span style=3D"color: #FF8000">//DO&nbsp;SOMETHING&nbs=
p;&nbsp;}</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Here you can use status, $row['date'] and $row['status']. If $date above=
 is the date from $row then just write $row['date'] instead of $date.</p>  =
            </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-799">
              <div class=3D"comment-author">
              	Ingus, 07.01.20 11:39              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o, first of all thanks for such a good tutorial! It teached me allot!</p>
<p>I m about to make new script and i m going to use PDO! Clients that will=
 use this script have different wishes about database type. ..
One want SQL other want MySQL so i have question!
Can i make script that allows both database structures and if database type=
 would be needed to change all i had to do would be change connection strin=
g?</p>
<p>Thanks in advance!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ingus,</p>
<p>As a rule, it is not possible because of different SQL flavors. For exam=
ple in SQL Server there is no LIMIT operator, but there is TOP instead and =
so on. </p>
<p>It means you have to test all your queries for all servers.</p>
<p>For a a true database-agnostic application look for some DBAL, such as D=
octrine or Eloquent.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-798">
              <div class=3D"comment-author">
              	steve, 06.01.20 07:09              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Just=
 wanted to say THANK YOU for this! Still working through it, but the explan=
ations for everything is so much better than YouTube videos and other tuts =
that just give code for one way that works. I feel like I'm actually learni=
ng this stuff (and the RIGHT way), and not just copying code.</p>
<p>Thanks again!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Steve!</p>
<p>Thank you for your feedback. Such a response is a thing that keeps this =
site going. </p>
<p>Please keep in mind that best gratitude is questions. Do not hesitate to=
 ask for clarification or an example. It will help me to make this site bet=
ter.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-792">
              <div class=3D"comment-author">
              	grotto, 05.12.19 20:44              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I'm =
having some issues with a particular file that I'm updating to pdo and I'm =
suspicious that it's related to the fact that some of the DB columns are bi=
gint.  Could you please elaborate on the bigint idiosyncrasies you mentione=
d in your main article and how to deal with them.  I'm also looking for a p=
lace to get help with my pdo issues but I've gotten bad response from askin=
g questions on  SO and I'm not sure where else might be a good source for h=
elp.  Any suggestions would be greatly appreciated!</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-789">
              <div class=3D"comment-author">
              	Todd Loomis, 30.11.19 23:23              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>How =
does this work with fulltext searches?  I'm using mysql and PHP, and I've b=
een trying to create prepared statements, but cannot get it to work:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if&nbsp;(((</span><span style=3D"color: #0000BB">strpos</span><s=
pan style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$keywor=
ds</span><span style=3D"color: #007700">,</span><span style=3D"color: #DD00=
00">'+'</span><span style=3D"color: #007700">))&nbsp;!=3D=3D&nbsp;</span><s=
pan style=3D"color: #0000BB">false</span><span style=3D"color: #007700">)&n=
bsp;||&nbsp;((</span><span style=3D"color: #0000BB">strpos</span><span styl=
e=3D"color: #007700">(</span><span style=3D"color: #0000BB">$keywords</span=
><span style=3D"color: #007700">,</span><span style=3D"color: #DD0000">'-'<=
/span><span style=3D"color: #007700">))&nbsp;!=3D=3D&nbsp;</span><span styl=
e=3D"color: #0000BB">false</span><span style=3D"color: #007700">))&nbsp;{<b=
r></span><span style=3D"color: #0000BB">$booleaninsert&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"&nbs=
p;IN&nbsp;BOOLEAN&nbsp;MODE"</span><span style=3D"color: #007700">;<br>}&nb=
sp;else&nbsp;{<br></span><span style=3D"color: #0000BB">$booleaninsert&nbsp=
;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color=
: #DD0000">"&nbsp;IN&nbsp;NATURAL&nbsp;LANGUAGE&nbsp;MODE"</span><span styl=
e=3D"color: #007700">;<br>}<br><br></span><span style=3D"color: #0000BB">$s=
earch&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span styl=
e=3D"color: #DD0000">"%</span><span style=3D"color: #0000BB">$keywords</spa=
n><span style=3D"color: #DD0000">%"</span><span style=3D"color: #007700">;<=
br></span><span style=3D"color: #FF8000">//&nbsp;$stmt&nbsp;&nbsp;=3D&nbsp;=
$pdo-&gt;prepare("SELECT&nbsp;*&nbsp;FROM&nbsp;table&nbsp;WHERE&nbsp;name&n=
bsp;LIKE&nbsp;?");<br></span><span style=3D"color: #0000BB">$stmt&nbsp;&nbs=
p;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"colo=
r: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span sty=
le=3D"color: #0000BB">prepare</span><span style=3D"color: #007700">(</span>=
<span style=3D"color: #DD0000">"SELECT&nbsp;*,&nbsp;MATCH(modelnumber,&nbsp=
;mfg,&nbsp;releasedate,&nbsp;code)&nbsp;AGAINST&nbsp;(?&nbsp;"&nbsp;</span>=
<span style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #0000BB"=
>$booleaninsert&nbsp;</span><span style=3D"color: #007700">.&nbsp;</span><s=
pan style=3D"color: #DD0000">")&nbsp;AS&nbsp;score&nbsp;FROM&nbsp;songs&nbs=
p;WHERE&nbsp;MATCH(modelnumber,&nbsp;mfg,&nbsp;releasedate,&nbsp;code)&nbsp=
;AGAINST&nbsp;(?&nbsp;"&nbsp;</span><span style=3D"color: #007700">.&nbsp;<=
/span><span style=3D"color: #0000BB">$booleaninsert&nbsp;</span><span style=
=3D"color: #007700">.&nbsp;</span><span style=3D"color: #DD0000">")"</span>=
<span style=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">=
$stmt</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color=
: #0000BB">execute</span><span style=3D"color: #007700">([</span><span styl=
e=3D"color: #0000BB">$search</span><span style=3D"color: #007700">]);<br></=
span><span style=3D"color: #0000BB">$data&nbsp;</span><span style=3D"color:=
 #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><span =
style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">fetchAl=
l</span><span style=3D"color: #007700">();</span><span style=3D"color: #000=
0BB"></span></code></code></pre>
<p>Thanks!
Todd</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-788">
              <div class=3D"comment-author">
              	Ted, 24.11.19 22:41              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I'm =
extremely confused.</p>
<p>What the heck do you mean by "here is an example for mysql"? Do I need t=
o use this code if I'm using a msql database? What does most of this code m=
ean?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ted!</p>
<p>Sorry for the late answer. </p>
<p>I am not sure what do you mean with "msql". As far as I know, PDO doesn'=
t support such a database. May be it's mysql or MS SQL server? For the latt=
er you will need different connection code, see <a href=3D"https://www.php.=
net/manual/en/ref.pdo-dblib.php">https://www.php.net/manual/en/ref.pdo-dbli=
b.php</a></p>
<p>And what does this code mean is fully explained in another article, <a h=
ref=3D"https://phpdelusions.net/pdo_examples/connect_to_mysql">https://phpd=
elusions.net/pdo_examples/connect_to_mysql</a></p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-779">
              <div class=3D"comment-author">
              	Ricardo Miller, 14.11.19 00:22              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hiya=
 thanks for your knowledge on the PDO its helping me massively understand P=
DO better but I am having a issue. </p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">private&nbsp;function&nbsp;</span><span style=3D"color: #0000BB"=
>__construct</span><span style=3D"color: #007700">()<br>&nbsp;&nbsp;&nbsp;&=
nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{<br>&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span=
><span style=3D"color: #0000BB">$params&nbsp;</span><span style=3D"color: #=
007700">=3D&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #00=
00BB">PDO</span><span style=3D"color: #007700">::</span><span style=3D"colo=
r: #0000BB">ATTR_EMULATE_PREPARES&nbsp;</span><span style=3D"color: #007700=
">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">false</span><span styl=
e=3D"color: #007700">,&nbsp;</span><span style=3D"color: #FF8000">//&nbsp;t=
urn&nbsp;off&nbsp;emulation&nbsp;mode&nbsp;for&nbsp;"real"&nbsp;prepared&nb=
sp;statements<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">PDO</=
span><span style=3D"color: #007700">::</span><span style=3D"color: #0000BB"=
>ATTR_ERRMODE&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</spa=
n><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">:=
:</span><span style=3D"color: #0000BB">ERRMODE_EXCEPTION</span><span style=
=3D"color: #007700">,&nbsp;</span><span style=3D"color: #FF8000">//turn&nbs=
p;on&nbsp;errors&nbsp;in&nbsp;the&nbsp;form&nbsp;of&nbsp;exceptions<br>&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=3D"c=
olor: #007700">::</span><span style=3D"color: #0000BB">ATTR_DEFAULT_FETCH_M=
ODE&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span st=
yle=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><s=
pan style=3D"color: #0000BB">FETCH_ASSOC</span><span style=3D"color: #00770=
0">,&nbsp;</span><span style=3D"color: #FF8000">//make&nbsp;the&nbsp;defaul=
t&nbsp;fetch&nbsp;be&nbsp;an&nbsp;associative&nbsp;array<br>&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"co=
lor: #007700">];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an style=3D"color: #0000BB">self</span><span style=3D"color: #007700">::</s=
pan><span style=3D"color: #0000BB">$_dbh&nbsp;</span><span style=3D"color: =
#007700">=3D&nbsp;@new&nbsp;</span><span style=3D"color: #0000BB">PDO</span=
><span style=3D"color: #007700">(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">Con=
fig</span><span style=3D"color: #007700">::</span><span style=3D"color: #00=
00BB">DB_DRIVER&nbsp;</span><span style=3D"color: #007700">.&nbsp;</span><s=
pan style=3D"color: #DD0000">':host=3D'&nbsp;</span><span style=3D"color: #=
007700">.&nbsp;</span><span style=3D"color: #0000BB">Config</span><span sty=
le=3D"color: #007700">::</span><span style=3D"color: #0000BB">DB_HOST&nbsp;=
</span><span style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #=
DD0000">';dbname=3D'&nbsp;</span><span style=3D"color: #007700">.&nbsp;</sp=
an><span style=3D"color: #0000BB">Config</span><span style=3D"color: #00770=
0">::</span><span style=3D"color: #0000BB">DB_NAME&nbsp;</span><span style=
=3D"color: #007700">.&nbsp;</span><span style=3D"color: #DD0000">';charset=
=3D'&nbsp;</span><span style=3D"color: #007700">.&nbsp;</span><span style=
=3D"color: #0000BB">Config</span><span style=3D"color: #007700">::</span><s=
pan style=3D"color: #0000BB">DB_CHARSET</span><span style=3D"color: #007700=
">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</span><span style=3D"color: #0000BB">Config</span><span style=3D"color=
: #007700">::</span><span style=3D"color: #0000BB">DB_USER</span><span styl=
e=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">Config</span><=
span style=3D"color: #007700">::</span><span style=3D"color: #0000BB">DB_PA=
SSWORD</span><span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: =
#FF8000">/*&nbsp;PDO&nbsp;options&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #000=
0BB">$params<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><spa=
n style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</span><span style=3D"color: #FF8000">//self::$_dbh-&gt;setAttribute(=
&nbsp;PDO::ATTR_EMULATE_PREPARES,&nbsp;false&nbsp;);<br><br>&nbsp;&nbsp;&nb=
sp;&nbsp;</span><span style=3D"color: #007700">}&nbsp;catch&nbsp;(</span><s=
pan style=3D"color: #0000BB">Exception&nbsp;$e</span><span style=3D"color: =
#007700">)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span=
><span style=3D"color: #FF8000">//&nbsp;If&nbsp;we&nbsp;can't&nbsp;establis=
hed&nbsp;a&nbsp;database&nbsp;connection&nbsp;return&nbsp;and&nbsp;error<br=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"colo=
r: #0000BB">DBWrapper</span><span style=3D"color: #007700">::</span><span s=
tyle=3D"color: #0000BB">fatal</span><span style=3D"color: #007700">(</span>=
<span style=3D"color: #DD0000">"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An&nbsp;error&nbsp;occurred&nbsp;while&nbs=
p;connecting&nbsp;to&nbsp;the&nbsp;database&nbsp;"&nbsp;</span><span style=
=3D"color: #007700">.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">Config</span><s=
pan style=3D"color: #007700">::</span><span style=3D"color: #0000BB">DB_NAM=
E&nbsp;</span><span style=3D"color: #007700">.&nbsp;</span><span style=3D"c=
olor: #DD0000">"The&nbsp;error&nbsp;reported&nbsp;by&nbsp;the&nbsp;server&n=
bsp;was:"&nbsp;</span><span style=3D"color: #007700">.&nbsp;</span><span st=
yle=3D"color: #0000BB">$e</span><span style=3D"color: #007700">-&gt;</span>=
<span style=3D"color: #0000BB">getMessage</span><span style=3D"color: #0077=
00">()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>&nbsp;&nbsp=
;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style=3D=
"color: #0000BB">self</span><span style=3D"color: #007700">::</span><span s=
tyle=3D"color: #0000BB">$_dbh</span><span style=3D"color: #007700">;<br>}</=
span><span style=3D"color: #0000BB"></span></code></code></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ricardo.</p>
<p>In order to have the code formatter you must pad it with 4 spaces from t=
he left and an <strong>empty line from the top</strong>.</p>
<p>So what your issue is?</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-778">
              <div class=3D"comment-author">
              	Justin, 08.11.19 21:40              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Firs=
t, thanks for your insight into PDO and the creation of a wrapper. My wrapp=
er wasn't too far off but was able to make some adjustments thanks to the i=
nformation you have shared. I have also gone through the delusions article =
as well and it has also helped me reexamine parts of my code.</p>
<p>Secondly, I have a site running on PHP 5.4.45 with a custom created PDO =
wrapper as well as other custom classes I created to fulfill my needs. It h=
as been running near flawlessly (except for some of hand PHP errors) for th=
e past 4 or so years this way. Now however is the time to upgrade the serve=
r. After upgrading the server to 5.6 I started to experience major issues r=
ight away with MySQL. It seems that there was a major shift in code handlin=
g by PHP from 5.4 to 5.6 with the way it is handling DB connections. The se=
rver is now hating my code and opening way too many connections to MySQL an=
d crashing the server. Do you know what change they made between these two =
versions that I may be overlooking?</p>
<p>Thanks in advance.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Justin!</p>
<p>I cannot think of any reason related to PHP version. It should work exac=
tly as before. </p>
<p>However, there are two most frequent reasons for too many connections.</=
p>
<p>First of all make sure you are no using a persistent connection.<br>
Then make sure your wrapper connects only once during the script executions=
. Most likely it's the case.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-776">
              <div class=3D"comment-author">
              	James Miller, 01.11.19 01:22              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Not =
a question, but a thank you and praise for your work. I cannot tell you how=
 much simpler your code examples have made my attempts at being a programme=
r. You must have a paypal account or a manner to make contributions. If not=
 you should. Once agains thank you.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-771">
              <div class=3D"comment-author">
              	Mohamed, 24.10.19 20:01              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Plea=
se advise whether below method is correct, if I don't set to PDO::ATTR_PERS=
ISTENT =3D&gt; TRUE, I don't know why it's not rolling back.</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">class&nbsp;</span><span style=3D"color: #0000BB">Database&nbsp;<=
/span><span style=3D"color: #007700">{<br>&nbsp;&nbsp;&nbsp;&nbsp;private&n=
bsp;</span><span style=3D"color: #0000BB">$host&nbsp;</span><span style=3D"=
color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">DB_HOST</spa=
n><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;=
</span><span style=3D"color: #0000BB">$user&nbsp;</span><span style=3D"colo=
r: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">DB_USER</span><s=
pan style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</sp=
an><span style=3D"color: #0000BB">$pass&nbsp;</span><span style=3D"color: #=
007700">=3D&nbsp;</span><span style=3D"color: #0000BB">DB_PASS</span><span =
style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><=
span style=3D"color: #0000BB">$dbname&nbsp;</span><span style=3D"color: #00=
7700">=3D&nbsp;</span><span style=3D"color: #0000BB">DB_NAME</span><span st=
yle=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><sp=
an style=3D"color: #0000BB">$charset&nbsp;</span><span style=3D"color: #007=
700">=3D&nbsp;</span><span style=3D"color: #DD0000">'utf8mb4'</span><span s=
tyle=3D"color: #007700">;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</spa=
n><span style=3D"color: #0000BB">$dbh</span><span style=3D"color: #007700">=
;<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;</span><span style=3D"color: #000=
0BB">$stmt</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbs=
p;private&nbsp;</span><span style=3D"color: #0000BB">$error</span><span sty=
le=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"co=
lor: #FF8000">//&nbsp;public&nbsp;$table&nbsp;=3D&nbsp;NULL;<br>&nbsp;&nbsp=
;&nbsp;&nbsp;/*------------------------------------------------------------=
--------------------*/<br><br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D=
"color: #007700">public&nbsp;function&nbsp;</span><span style=3D"color: #00=
00BB">__construct</span><span style=3D"color: #007700">(){<br>&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #FF8000">//=
&nbsp;Set&nbsp;DSN<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</spa=
n><span style=3D"color: #0000BB">$dsn&nbsp;</span><span style=3D"color: #00=
7700">=3D&nbsp;</span><span style=3D"color: #DD0000">'mysql:host=3D'</span>=
<span style=3D"color: #007700">.</span><span style=3D"color: #0000BB">$this=
</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #00=
00BB">host</span><span style=3D"color: #007700">.</span><span style=3D"colo=
r: #DD0000">';dbname=3D'</span><span style=3D"color: #007700">.</span><span=
 style=3D"color: #0000BB">$this</span><span style=3D"color: #007700">-&gt;<=
/span><span style=3D"color: #0000BB">dbname</span><span style=3D"color: #00=
7700">;</span><span style=3D"color: #0000BB">$this</span><span style=3D"col=
or: #007700">-&gt;</span><span style=3D"color: #0000BB">charset</span><span=
 style=3D"color: #007700">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</spa=
n><span style=3D"color: #0000BB">$options&nbsp;</span><span style=3D"color:=
 #007700">=3D&nbsp;array(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><=
span style=3D"color: #007700">::</span><span style=3D"color: #0000BB">ATTR_=
PERSISTENT&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><=
span style=3D"color: #0000BB">TRUE</span><span style=3D"color: #007700">,<b=
r>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/span><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #00770=
0">::</span><span style=3D"color: #0000BB">ATTR_ERRMODE&nbsp;</span><span s=
tyle=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">=
PDO</span><span style=3D"color: #007700">::</span><span style=3D"color: #00=
00BB">ERRMODE_EXCEPTION<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #FF8000">//&nbsp;PDO::=
ATTR_EMULATE_PREPARES&nbsp;=3D&gt;&nbsp;false<br>&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">);<br><br>&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #FF=
8000">//&nbsp;Create&nbsp;PDO&nbsp;instance<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">try{<br>&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span=
 style=3D"color: #0000BB">$this</span><span style=3D"color: #007700">-&gt;<=
/span><span style=3D"color: #0000BB">dbh&nbsp;</span><span style=3D"color: =
#007700">=3D&nbsp;new&nbsp;</span><span style=3D"color: #0000BB">PDO</span>=
<span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$dsn<=
/span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0=
000BB">$this</span><span style=3D"color: #007700">-&gt;</span><span style=
=3D"color: #0000BB">user</span><span style=3D"color: #007700">,&nbsp;</span=
><span style=3D"color: #0000BB">$this</span><span style=3D"color: #007700">=
-&gt;</span><span style=3D"color: #0000BB">pass</span><span style=3D"color:=
 #007700">,&nbsp;</span><span style=3D"color: #0000BB">$options&nbsp;</span=
><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(</span><span style=3D=
"color: #0000BB">PDOException&nbsp;$e</span><span style=3D"color: #007700">=
){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</span><span style=3D"color: #0000BB">$this</span><span style=3D"color: =
#007700">-&gt;</span><span style=3D"color: #0000BB">error&nbsp;</span><span=
 style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$e=
</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #00=
00BB">getMessage</span><span style=3D"color: #007700">();<br>&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span styl=
e=3D"color: #FF8000">//&nbsp;echo&nbsp;$this-&gt;error;<br>&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=
=3D"color: #007700">die(</span><span style=3D"color: #DD0000">"Database&nbs=
p;Connection&nbsp;Failed&nbsp;"&nbsp;</span><span style=3D"color: #007700">=
.&nbsp;</span><span style=3D"color: #0000BB">$this</span><span style=3D"col=
or: #007700">-&gt;</span><span style=3D"color: #0000BB">error</span><span s=
tyle=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}</span><span style=3D"color: #0000BB"></sp=
an></code></code></pre></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-770">
              <div class=3D"comment-author">
              	Mohamed, 24.10.19 19:19              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
Thanks for your replay.</p>
<p>Transactions is not rolling back on mysql query failure, if PDO::ATTR_PE=
RSISTENT =3D&gt; TRUE is not used.</p>
<p>Please advise the solution.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Mohamed</p>
<p>The PDO::ATTR_PERSISTENT is not relevant to transactions. Most likely yo=
ur transaction is not rolled back because the table in the database does no=
t support them. Make sure the table is created with InnoDB engine. And also=
 check out other prerequisites noted in the corresponding section: <a href=
=3D"https://phpdelusions.net/pdo#transactions">https://phpdelusions.net/pdo=
#transactions</a></p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-765">
              <div class=3D"comment-author">
              	Wim de Bok, 18.10.19 15:32              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Find=
ing valuable sources on the internet is never easy but I am glad I found th=
is one. Great article on PHP and PDO, thank you!</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-764">
              <div class=3D"comment-author">
              	Mohamed, 18.10.19 09:56              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Plea=
se advise on usage on below, whether to use or not in transanctions</p>
<p>PDO::ATTR_PERSISTENT =3D&gt; TRUE,</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Mohamed!</p>
<p>The answer is very simple: just <strong>never</strong> use PDO::ATTR_PER=
SISTENT =3D&gt; TRUE unless you have a very skilled dedicated server admin =
who would tell you this option is necessary and who would then configure yo=
ur database server, HTTP server and PHP properly.</p>
<p>In any other case this option will do you much more harm than good. Espe=
cially with transactions, as such an option will result in transactions ext=
ended between different scripts execution with unpredictable results.</p>  =
            </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-762">
              <div class=3D"comment-author">
              	Elizabeth, 17.10.19 12:11              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,
I managed to solve my issue sent earlier today by replacing the while loop =
with [ $user =3D $stmt-&gt;fetch(); ] which i grabbed from your site - than=
k you :)</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Elizabeth,</p>
<p>Thank you very much, such feedback means a lot!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-754">
              <div class=3D"comment-author">
              	Daniel Collin, 04.10.19 15:46              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
very good article! Thanx</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-745">
              <div class=3D"comment-author">
              	Lynne K., 12.09.19 12:11              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,
I'd like to use PDO to access a reviews database with mysql.  I'm completel=
y new to PDO and am upgrading from PHP5 to PHP7.  The query I am having tro=
uble with is:</p>
<pre><code><code><span style=3D"color: #0000BB">$query&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"sele=
ct&nbsp;*&nbsp;from&nbsp;rsd_reviews&nbsp;order&nbsp;by&nbsp;new_date&nbsp;=
limit&nbsp;</span><span style=3D"color: #0000BB">$offset</span><span style=
=3D"color: #DD0000">,&nbsp;</span><span style=3D"color: #0000BB">$limit</sp=
an><span style=3D"color: #DD0000">"</span><span style=3D"color: #007700">;<=
/span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Could you assist?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Lynne!</p>
<p>Three things:</p>
<ol>
<li>Always use <strong>placeholders</strong> in place of actual variables i=
n youe query, just like it explained in the article. </li>
<li>Make sure $offset and $limit have correct values.</li>
<li>Make sure you are <a href=3D"https://phpdelusions.net/pdo_examples/conn=
ect_to_mysql">connecting to PDO properly</a> and have PHP configured to rep=
ort errors</li>
</ol>
<p>In case it doesn't help, please get back with a more detailed descriptio=
n what particular trouble you are having.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-742">
              <div class=3D"comment-author">
              	Christopher, 06.09.19 01:05              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>What=
 does PDO stand for?
PHP
Data
Objects?
Always give a definition for an acronym, if it is one.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-738">
              <div class=3D"comment-author">
              	pink, 21.08.19 06:31              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><blockq=
uote>
<p>How is it different from your method?</p>
</blockquote>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">&lt;?</span><span style=3D"color: #0000BB">php<br></span><span s=
tyle=3D"color: #007700">class&nbsp;</span><span style=3D"color: #0000BB">DB=
&nbsp;</span><span style=3D"color: #007700">{<br>private&nbsp;</span><span =
style=3D"color: #0000BB">$pdo&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;</span><span style=3D"color: #0000BB">null</span><span style=3D"co=
lor: #007700">;<br>private&nbsp;</span><span style=3D"color: #0000BB">$stmt=
&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"=
color: #0000BB">null</span><span style=3D"color: #007700">;<br><br>function=
&nbsp;</span><span style=3D"color: #0000BB">__construct</span><span style=
=3D"color: #007700">(){<br>try&nbsp;{<br>&nbsp;&nbsp;</span><span style=3D"=
color: #0000BB">$this</span><span style=3D"color: #007700">-&gt;</span><spa=
n style=3D"color: #0000BB">pdo&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;new&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span sty=
le=3D"color: #007700">(<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"co=
lor: #DD0000">"mysql:host=3Dlocalhost;dbname=3Dtest;charset=3Dutf8"</span><=
span style=3D"color: #007700">,&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an style=3D"color: #DD0000">"root"</span><span style=3D"color: #007700">,&n=
bsp;</span><span style=3D"color: #DD0000">""</span><span style=3D"color: #0=
07700">,&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=
=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span=
 style=3D"color: #0000BB">ATTR_ERRMODE&nbsp;</span><span style=3D"color: #0=
07700">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span s=
tyle=3D"color: #007700">::</span><span style=3D"color: #0000BB">ERRMODE_EXC=
EPTION</span><span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=3D"co=
lor: #007700">::</span><span style=3D"color: #0000BB">ATTR_DEFAULT_FETCH_MO=
DE&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span sty=
le=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><sp=
an style=3D"color: #0000BB">FETCH_ASSOC</span><span style=3D"color: #007700=
">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #00=
00BB">PDO</span><span style=3D"color: #007700">::</span><span style=3D"colo=
r: #0000BB">ATTR_EMULATE_PREPARES&nbsp;</span><span style=3D"color: #007700=
">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">false</span><span styl=
e=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;);<br>}&=
nbsp;catch&nbsp;(</span><span style=3D"color: #0000BB">Exception&nbsp;$ex</=
span><span style=3D"color: #007700">)&nbsp;{&nbsp;die(</span><span style=3D=
"color: #0000BB">$ex</span><span style=3D"color: #007700">-&gt;</span><span=
 style=3D"color: #0000BB">getMessage</span><span style=3D"color: #007700">(=
));&nbsp;}</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>}</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">function&nbsp;</span><span style=3D"color: #0000BB">__destruct</=
span><span style=3D"color: #007700">(){<br>if&nbsp;(</span><span style=3D"c=
olor: #0000BB">$this</span><span style=3D"color: #007700">-&gt;</span><span=
 style=3D"color: #0000BB">stmt</span><span style=3D"color: #007700">!=3D=3D=
</span><span style=3D"color: #0000BB">null</span><span style=3D"color: #007=
700">)&nbsp;{&nbsp;</span><span style=3D"color: #0000BB">$this</span><span =
style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">stmt&nb=
sp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"col=
or: #0000BB">null</span><span style=3D"color: #007700">;&nbsp;}<br>if&nbsp;=
(</span><span style=3D"color: #0000BB">$this</span><span style=3D"color: #0=
07700">-&gt;</span><span style=3D"color: #0000BB">pdo</span><span style=3D"=
color: #007700">!=3D=3D</span><span style=3D"color: #0000BB">null</span><sp=
an style=3D"color: #007700">)&nbsp;{&nbsp;</span><span style=3D"color: #000=
0BB">$this</span><span style=3D"color: #007700">-&gt;</span><span style=3D"=
color: #0000BB">pdo&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</s=
pan><span style=3D"color: #0000BB">null</span><span style=3D"color: #007700=
">;&nbsp;}</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>}</p>
<p>function select($sql, $cond=3Dnull){
$result =3D false;
try {
$this-&gt;stmt =3D $this-&gt;pdo-&gt;prepare($sql);
$this-&gt;stmt-&gt;execute($cond);
$result =3D $this-&gt;stmt-&gt;fetchAll();
} catch (Exception $ex) { die($ex-&gt;getMessage()); }
$this-&gt;stmt =3D null;
return $result;
}
}
?&gt;</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-737">
              <div class=3D"comment-author">
              	Tachi, 14.08.19 16:34              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>You =
are great! I'm quite new to PHP and I'm renewing old code of a former colle=
ague with PDO and I found your example with the IN clause very helpful. Man=
y many thanks
Here I have an example where the placeholder after the IN clause could be a=
 single value or a range of values. I wanted to share. I hope it is useful =
for others.</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if&nbsp;(&nbsp;</span><span style=3D"color: #0000BB">is_array</s=
pan><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$=
groupID</span><span style=3D"color: #007700">)&nbsp;)&nbsp;{<br>&nbsp;&nbsp=
;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$in&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;&nbsp;</span><span style=3D"color: #0000BB"=
>str_repeat</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"?,"</span><span style=3D"color: #007700">,&nbsp;</span><span =
style=3D"color: #0000BB">count</span><span style=3D"color: #007700">(</span=
><span style=3D"color: #0000BB">$groupID</span><span style=3D"color: #00770=
0">)&nbsp;-&nbsp;</span><span style=3D"color: #0000BB">1</span><span style=
=3D"color: #007700">)&nbsp;.&nbsp;</span><span style=3D"color: #DD0000">"?"=
</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><=
span style=3D"color: #0000BB">$arr&nbsp;</span><span style=3D"color: #00770=
0">=3D&nbsp;</span><span style=3D"color: #0000BB">$groupID</span><span styl=
e=3D"color: #007700">;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;</s=
pan><span style=3D"color: #0000BB">$in&nbsp;</span><span style=3D"color: #0=
07700">=3D&nbsp;</span><span style=3D"color: #DD0000">"?"</span><span style=
=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"colo=
r: #0000BB">$arr&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;[</spa=
n><span style=3D"color: #0000BB">$groupID</span><span style=3D"color: #0077=
00">];<br>}<br></span><span style=3D"color: #0000BB">$sql&nbsp;</span><span=
 style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"S=
ELECT&nbsp;parent_groupID,&nbsp;child_groupID&nbsp;FROM&nbsp;table&nbsp;WHE=
RE&nbsp;parent_groupID&nbsp;IN&nbsp;(</span><span style=3D"color: #0000BB">=
$in</span><span style=3D"color: #DD0000">)&nbsp;ORDER&nbsp;BY&nbsp;ordinal&=
nbsp;ASC"</span><span style=3D"color: #007700">;<br></span><span style=3D"c=
olor: #0000BB">$stmt&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</=
span><span style=3D"color: #0000BB">$dsn</span><span style=3D"color: #00770=
0">-&gt;</span><span style=3D"color: #0000BB">prepare</span><span style=3D"=
color: #007700">(</span><span style=3D"color: #0000BB">$sql</span><span sty=
le=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$stmt</sp=
an><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB=
">execute</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #0000BB">$arr</span><span style=3D"color: #007700">);<br></span><span sty=
le=3D"color: #0000BB">$r&nbsp;</span><span style=3D"color: #007700">=3D&nbs=
p;</span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #=
007700">-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span sty=
le=3D"color: #007700">();</span><span style=3D"color: #0000BB"></span></cod=
e></code></pre></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-722">
              <div class=3D"comment-author">
              	Chuck Robinson, 01.07.19 22:35              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I no=
ticed something weird about pdo ssl, if you misspell the key name values su=
ch as
PDO::MYSQL_ATTR_SSL_KEY =3D&gt; 'mispeled key name'
it still works which is kinda strange.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-718">
              <div class=3D"comment-author">
              	Joe, 08.06.19 14:28              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I ha=
ve issue with single quote ' I can't see the word like Don't or won't inste=
ad of don't I can see "don" missing apostrophe and t how do I fix it?
Thank you</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">&lt;?</span><span style=3D"color: #0000BB">php<br></span><span s=
tyle=3D"color: #007700">try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span =
style=3D"color: #0000BB">$conn&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;new&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span sty=
le=3D"color: #007700">(</span><span style=3D"color: #DD0000">"mysql:host=3D=
localhost;&nbsp;dbname=3Dtest"</span><span style=3D"color: #007700">,&nbsp;=
</span><span style=3D"color: #DD0000">"root"</span><span style=3D"color: #0=
07700">,&nbsp;</span><span style=3D"color: #DD0000">""</span><span style=3D=
"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color:=
 #0000BB">$conn</span><span style=3D"color: #007700">-&gt;</span><span styl=
e=3D"color: #0000BB">setAttribute</span><span style=3D"color: #007700">(</s=
pan><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700"=
>::</span><span style=3D"color: #0000BB">ATTR_ERRMODE</span><span style=3D"=
color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">PDO</span><spa=
n style=3D"color: #007700">::</span><span style=3D"color: #0000BB">ERRMODE_=
EXCEPTION</span><span style=3D"color: #007700">);<br>}<br>catch(</span><spa=
n style=3D"color: #0000BB">PDOException&nbsp;$e</span><span style=3D"color:=
 #007700">)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style=3D=
"color: #0000BB">$sql&nbsp;</span><span style=3D"color: #007700">.&nbsp;</s=
pan><span style=3D"color: #DD0000">"&lt;br&gt;"&nbsp;</span><span style=3D"=
color: #007700">.&nbsp;</span><span style=3D"color: #0000BB">$e</span><span=
 style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">getMes=
sage</span><span style=3D"color: #007700">();<br>}<br><br></span><span styl=
e=3D"color: #0000BB">$stmt&nbsp;</span><span style=3D"color: #007700">=3D&n=
bsp;</span><span style=3D"color: #0000BB">$conn</span><span style=3D"color:=
 #007700">-&gt;</span><span style=3D"color: #0000BB">query</span><span styl=
e=3D"color: #007700">(</span><span style=3D"color: #DD0000">"&nbsp;SELECT&n=
bsp;*&nbsp;FROM&nbsp;users&nbsp;"</span><span style=3D"color: #007700">);<b=
r>while(</span><span style=3D"color: #0000BB">$row&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</s=
pan><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000B=
B">fetch</span><span style=3D"color: #007700">())<br>{<br>echo&nbsp;</span>=
<span style=3D"color: #DD0000">"<br>&lt;form&nbsp;action=3D'update.php'&nbs=
p;method=3D'POST'&gt;&nbsp;<br>&lt;input&nbsp;type=3D'hidden'&nbsp;name=3D&=
nbsp;'id'&nbsp;value=3D'</span><span style=3D"color: #0000BB">$row</span><s=
pan style=3D"color: #007700">[</span><span style=3D"color: #0000BB">id</spa=
n><span style=3D"color: #007700">]</span><span style=3D"color: #DD0000">'&g=
t;&nbsp;<br>&lt;td&gt;&nbsp;&lt;input&nbsp;type=3D'text'&nbsp;name=3D&nbsp;=
'firstname'&nbsp;value=3D'</span><span style=3D"color: #0000BB">$row</span>=
<span style=3D"color: #007700">[</span><span style=3D"color: #0000BB">first=
name</span><span style=3D"color: #007700">]</span><span style=3D"color: #DD=
0000">'&nbsp;&gt;<br>&lt;input&nbsp;type=3D'text'&nbsp;name=3D'lastname'&nb=
sp;value=3D'</span><span style=3D"color: #0000BB">$row</span><span style=3D=
"color: #007700">[</span><span style=3D"color: #0000BB">lastname</span><spa=
n style=3D"color: #007700">]</span><span style=3D"color: #DD0000">'&gt;&nbs=
p;<br>&lt;input&nbsp;type=3D'text'&nbsp;name=3D'email'&nbsp;value=3D'</span=
><span style=3D"color: #0000BB">$row</span><span style=3D"color: #007700">[=
</span><span style=3D"color: #0000BB">email</span><span style=3D"color: #00=
7700">]</span><span style=3D"color: #DD0000">'&gt;&nbsp;<br>&lt;input&nbsp;=
type=3D'submit'&nbsp;name=3D'insert'&nbsp;value=3D'Update'&gt;&nbsp;<br>&lt=
;/form&gt;&nbsp;<br>}<br>?&gt;</span></code></code></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Joe,</p>
<p>This is a very common problem. Just look at the HTML source of your page=
 and you'll find why. When yo have "don't" in the value, it becomes like th=
is </p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">&lt;</span><span style=3D"color: #0000BB">input&nbsp;type</span>=
<span style=3D"color: #007700">=3D</span><span style=3D"color: #DD0000">'te=
xt'&nbsp;</span><span style=3D"color: #0000BB">name</span><span style=3D"co=
lor: #007700">=3D</span><span style=3D"color: #DD0000">'lastname'&nbsp;</sp=
an><span style=3D"color: #0000BB">value</span><span style=3D"color: #007700=
">=3D</span><span style=3D"color: #DD0000">'don'</span><span style=3D"color=
: #0000BB">t</span><span style=3D"color: #DD0000">'&gt;&nbsp;</span></code>=
</code></pre>
<p>see - it closes the quote.</p>
<p>To avoid this, you must apply <code>htmlspecialchars()</code> with <code=
>ENT_QUOTES</code> parameter to all your variables.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-693">
              <div class=3D"comment-author">
              	ymtaufik, 30.04.19 01:10              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o Expert</p>
<p>To prevent my apps from sql injection, I use str_replace for any input p=
arameter ($kiki) as below :</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">foreach&nbsp;(</span><span style=3D"color: #0000BB">$_POST&nbsp;=
</span><span style=3D"color: #007700">as&nbsp;</span><span style=3D"color: =
#0000BB">$varname&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;<=
/span><span style=3D"color: #0000BB">$varvalue</span><span style=3D"color: =
#007700">)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #=
0000BB">$arr</span><span style=3D"color: #007700">[</span><span style=3D"co=
lor: #0000BB">$i</span><span style=3D"color: #007700">]&nbsp;=3D&nbsp;</spa=
n><span style=3D"color: #0000BB">$_POST</span><span style=3D"color: #007700=
">[</span><span style=3D"color: #0000BB">$varname</span><span style=3D"colo=
r: #007700">];<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #000=
0BB">$i&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span st=
yle=3D"color: #0000BB">$i&nbsp;</span><span style=3D"color: #007700">+</spa=
n><span style=3D"color: #0000BB">1</span><span style=3D"color: #007700">;<b=
r>}<br><br>if&nbsp;(</span><span style=3D"color: #0000BB">$i&nbsp;</span><s=
pan style=3D"color: #007700">&gt;=3D</span><span style=3D"color: #0000BB">1=
&nbsp;</span><span style=3D"color: #007700">)&nbsp;{</span><span style=3D"c=
olor: #0000BB">$kiki&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</=
span><span style=3D"color: #0000BB">$arr</span><span style=3D"color: #00770=
0">[</span><span style=3D"color: #0000BB">0</span><span style=3D"color: #00=
7700">]&nbsp;.&nbsp;</span><span style=3D"color: #DD0000">"^"</span><span s=
tyle=3D"color: #007700">;}<br>if&nbsp;(</span><span style=3D"color: #0000BB=
">$i&nbsp;</span><span style=3D"color: #007700">&gt;=3D</span><span style=
=3D"color: #0000BB">2&nbsp;</span><span style=3D"color: #007700">)&nbsp;{</=
span><span style=3D"color: #0000BB">$kiki&nbsp;</span><span style=3D"color:=
 #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$kiki&nbsp;</span>=
<span style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #0000BB"=
>$arr</span><span style=3D"color: #007700">[</span><span style=3D"color: #0=
000BB">1</span><span style=3D"color: #007700">]&nbsp;.&nbsp;</span><span st=
yle=3D"color: #DD0000">"^"</span><span style=3D"color: #007700">;}<br>if&nb=
sp;(</span><span style=3D"color: #0000BB">$i&nbsp;</span><span style=3D"col=
or: #007700">&gt;=3D</span><span style=3D"color: #0000BB">3&nbsp;</span><sp=
an style=3D"color: #007700">)&nbsp;{</span><span style=3D"color: #0000BB">$=
kiki&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=
=3D"color: #0000BB">$kiki&nbsp;</span><span style=3D"color: #007700">.&nbsp=
;</span><span style=3D"color: #0000BB">$arr</span><span style=3D"color: #00=
7700">[</span><span style=3D"color: #0000BB">2</span><span style=3D"color: =
#007700">]&nbsp;.&nbsp;</span><span style=3D"color: #DD0000">"^"</span><spa=
n style=3D"color: #007700">;}<br>if&nbsp;(</span><span style=3D"color: #000=
0BB">$i&nbsp;</span><span style=3D"color: #007700">&gt;=3D</span><span styl=
e=3D"color: #0000BB">4&nbsp;</span><span style=3D"color: #007700">)&nbsp;{<=
/span><span style=3D"color: #0000BB">$kiki&nbsp;</span><span style=3D"color=
: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$kiki&nbsp;</span=
><span style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #0000BB=
">$arr</span><span style=3D"color: #007700">[</span><span style=3D"color: #=
0000BB">3</span><span style=3D"color: #007700">]&nbsp;.&nbsp;</span><span s=
tyle=3D"color: #DD0000">"^"</span><span style=3D"color: #007700">;}<br>if&n=
bsp;(</span><span style=3D"color: #0000BB">$i&nbsp;</span><span style=3D"co=
lor: #007700">&gt;=3D</span><span style=3D"color: #0000BB">5&nbsp;</span><s=
pan style=3D"color: #007700">)&nbsp;{</span><span style=3D"color: #0000BB">=
$kiki&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span styl=
e=3D"color: #0000BB">$kiki&nbsp;</span><span style=3D"color: #007700">.&nbs=
p;</span><span style=3D"color: #0000BB">$arr</span><span style=3D"color: #0=
07700">[</span><span style=3D"color: #0000BB">4</span><span style=3D"color:=
 #007700">]&nbsp;.&nbsp;</span><span style=3D"color: #DD0000">"^"</span><sp=
an style=3D"color: #007700">;}<br><br></span><span style=3D"color: #0000BB"=
>$vowels&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;array(</span><=
span style=3D"color: #DD0000">";"</span><span style=3D"color: #007700">,</s=
pan><span style=3D"color: #DD0000">":"</span><span style=3D"color: #007700"=
>,</span><span style=3D"color: #DD0000">"#"</span><span style=3D"color: #00=
7700">,</span><span style=3D"color: #DD0000">"+"</span><span style=3D"color=
: #007700">,</span><span style=3D"color: #DD0000">"*"</span><span style=3D"=
color: #007700">,</span><span style=3D"color: #DD0000">"."</span><span styl=
e=3D"color: #007700">,</span><span style=3D"color: #DD0000">"|"</span><span=
 style=3D"color: #007700">,</span><span style=3D"color: #DD0000">"=3D"</spa=
n><span style=3D"color: #007700">,</span><span style=3D"color: #DD0000">"%"=
</span><span style=3D"color: #007700">,</span><span style=3D"color: #DD0000=
">"'"</span><span style=3D"color: #007700">,</span><span style=3D"color: #D=
D0000">"/"</span><span style=3D"color: #007700">,</span><span style=3D"colo=
r: #DD0000">"$"</span><span style=3D"color: #007700">,</span><span style=3D=
"color: #DD0000">"("</span><span style=3D"color: #007700">,</span><span sty=
le=3D"color: #DD0000">"{"</span><span style=3D"color: #007700">,</span><spa=
n style=3D"color: #DD0000">"["</span><span style=3D"color: #007700">,</span=
><span style=3D"color: #DD0000">"&amp;"</span><span style=3D"color: #007700=
">,</span><span style=3D"color: #DD0000">"!"</span><span style=3D"color: #0=
07700">,</span><span style=3D"color: #DD0000">"@"</span><span style=3D"colo=
r: #007700">,</span><span style=3D"color: #DD0000">"?"</span><span style=3D=
"color: #007700">,</span><span style=3D"color: #DD0000">","</span><span sty=
le=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$kiki&nbs=
p;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"colo=
r: #0000BB">str_replace</span><span style=3D"color: #007700">(</span><span =
style=3D"color: #0000BB">$vowels</span><span style=3D"color: #007700">,&nbs=
p;</span><span style=3D"color: #DD0000">"-"</span><span style=3D"color: #00=
7700">,&nbsp;</span><span style=3D"color: #0000BB">$kiki</span><span style=
=3D"color: #007700">);&nbsp;&nbsp;<br><br></span><span style=3D"color: #000=
0BB">$val&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span =
style=3D"color: #0000BB">explode</span><span style=3D"color: #007700">(</sp=
an><span style=3D"color: #DD0000">"^"</span><span style=3D"color: #007700">=
,&nbsp;</span><span style=3D"color: #0000BB">$kiki</span><span style=3D"col=
or: #007700">);</span><span style=3D"color: #0000BB"></span></code></code><=
/pre>
<p>then :</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;*&nbsp;FROM&nbsp;zuser&nbsp;WHERE&nbsp;nameu=3D'"</span><span style=
=3D"color: #007700">.</span><span style=3D"color: #0000BB">$val</span><span=
 style=3D"color: #007700">[</span><span style=3D"color: #0000BB">1</span><s=
pan style=3D"color: #007700">].</span><span style=3D"color: #DD0000">"'&nbs=
p;AND&nbsp;passw=3D'"</span><span style=3D"color: #007700">.</span><span st=
yle=3D"color: #0000BB">$val</span><span style=3D"color: #007700">[</span><s=
pan style=3D"color: #0000BB">2</span><span style=3D"color: #007700">].</spa=
n><span style=3D"color: #DD0000">"'"</span><span style=3D"color: #007700">;=
</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>is it still vulnerable?, can you help how to inject with above sanitatio=
n ?
regards</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello.</p>
<p>Yes it is vulnerable. You can find many answers on Stack Overflow that e=
xplain how to inject with above sanitation.</p>
<p>You should use prepared statements instead of this.</p>              </d=
iv>
            </li>
=20
            <li class=3D"comment" id=3D"comment-687">
              <div class=3D"comment-author">
              	Shahrulhadi, 17.04.19 06:32              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
i am currently using php framework Yii 2. Yii 3 is in development, and i am=
 planning to use that when it is release.
Can you verify if they use proper PDO?
If Yii doesnt use proper PDO, what php framework do you suggest?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-685">
              <div class=3D"comment-author">
              	Dave Coates, 10.04.19 17:15              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi. =
 This is an excellent web site - thanks!<br>
I have read page after page about retrieving multiple rows and multiple row=
 sets, but I can't find anywhere which explains the mechanics of how multip=
le row sets work.  My question is... When calling a stored procedure via PD=
O which returns multiple row sets, are all the row sets returned to PDO at =
once, or is there subsequent communication between the server and PDO every=
 time I make a call to GetNextRowSet?  Thanks in advance.
Dave.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Dave!</p>
<p>That's a very good question, and the answer is the option 2: subsequent =
communication between the server and PDO.</p>
<p>That's actually the whole point, as each resultset is completely separat=
ed from others, bearing its own metadata such as error information number i=
f returned rows, etc.</p>
<p>After all, you can tell that other resultsets are waiting on the server =
by trying to execute another query while not finishing with getting them al=
l - the error message will say that you cannot execute any queries while ot=
her results are waiting.</p>
<p>Hope it is clearer for you now!
Feel free to to ask if you still have questions though.</p>              </=
div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-678">
              <div class=3D"comment-author">
              	tamir, 01.04.19 21:38              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>hi, =
i have problem with prepare query and the asc/desc parameter, i cant bind i=
n the execute, i tried to catcatinate it before the query and dont manage t=
o do it. what is the right way?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-677">
              <div class=3D"comment-author">
              	Gavin, 01.04.19 16:27              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Plea=
se NEVER take this website down. It is EXTREMELY useful and concise. Thanky=
ou</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-676">
              <div class=3D"comment-author">
              	Nedum, 30.03.19 14:33              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Plea=
se Sir,
While running a query, this error message came up: Unknown Character Set!
While building the DSN, I added charset=3D$charset to the string. And $char=
set =3D "utf8mb4" .
What did I do wrong here Please?</p>
<p>And, when I do search and retrieve pages of data, to format display pagi=
nation, is it wrong to use PDO::rowCount() in this case too?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Nedum!</p>
<p>Most likely your database server is rather old and doean't support this =
rather new encoding. Use utf8 instead.</p>
<p>As of PDO::rowCount() - yes, it is gravely wrong to use it for paginatio=
n. Use SELECT COUNT(*) instead.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-670">
              <div class=3D"comment-author">
              	Ali, 18.03.19 23:34              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Grea=
t article with great details. I spent years and years on using PDO and I le=
arnt a lot with pain and blood, but this article still had new things for m=
e. I wish I had read that many many years ago. Thank you!</p>
<p>However I found a paragraph in this article that somehow I think that ca=
n be misleading for beginners: </p>
<p>"An answer to a frequently asked question, "whether this function is saf=
e to use in concurrent environment?" is positive: yes, it is safe. Being ju=
st an interface to MySQL C API mysql_insert_id() function it's perfectly sa=
fe."</p>
<p>So for Beginners, I want to rephrase this paragraph:</p>
<p>PDO::lastInsertId IS GUARANTEED to return correct ID of last inserted ro=
w in the script, even on concurrent environments, but it CAN BE harmfully d=
angerous and unsafe with seeded IDs (e.g. mysql's auto-increment or most ps=
eudo randoms like rand() function) on concurrent environments IF you use it=
 to calculate next row's ID. One should never calculate next row's ID based=
 on previous row's ID in a concurrent environment. If you need next ID, jus=
t insert a new row in the table, and use PDO::lastInsertID to get that ID. =
That is because with seeded row IDs on concurrent environments like the web=
, collision IDs WILL happen and you end up in tears.</p>
<p>So, just to repeat it again:</p>
<ol>
<li>At first, insert a row</li>
<li>Then use PDO::lastInsertID if you need the ID of the inserted row</li>
<li>If you need the ID of next inserting row, don't calculate it from last =
inserted row, just go back to #1</li>
</ol></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ali!</p>
<p>Thank you very much for such a thoughtful comment!<br>
I wholeheartedly agree with this warning, but I feel that it is a bit off t=
opic, as it is not directly related to PDO, but to the abuse of the auto-ge=
nerated identifiers in general. </p>
<p>Ho be honest, given right now am not thinking of reducing the size of th=
e article rather than enlarging it, I am reluctant to adding any additional=
 information not directly related to PDO. Either way this comment will rema=
in here to warn all the readers, so thank you again for it!</p>            =
  </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-667">
              <div class=3D"comment-author">
              	KK, 15.03.19 05:24              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>How =
can you execute trigger queries with pdo. </p>
<p>I am using easydb and I get the following error. I have tried with and w=
ithout delimiter statements and both fail.</p>
<p>Fatal error: Uncaught PDOException: SQLSTATE[HY000]: General error: 2014=
 Cannot execute queries while other unbuffered queries are active. Consider=
 using PDOStatement::fetchAll(). Alternatively, if your code is only ever g=
oing to run against mysql, you may enable query buffering by setting the PD=
O::MYSQL_ATTR_USE_BUFFERED_QUERY attribute.</p>
<pre><code><code><span style=3D"color: #0000BB">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;$triggerquery&nbsp;</span><span style=3D"color: #00=
7700">=3D&nbsp;</span><span style=3D"color: #DD0000">"&nbsp;CREATE&nbsp;TRI=
GGER&nbsp;`</span><span style=3D"color: #0000BB">$triggername</span><span s=
tyle=3D"color: #DD0000">`&nbsp;</span><span style=3D"color: #0000BB">$trigg=
ertime</span><span style=3D"color: #DD0000">&nbsp;ON&nbsp;`</span><span sty=
le=3D"color: #0000BB">$tablename</span><span style=3D"color: #DD0000">`&nbs=
p;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
FOR&nbsp;EACH&nbsp;ROW&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;BEGIN&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IF(NEW.`</span><=
span style=3D"color: #0000BB">$triggercol</span><span style=3D"color: #DD00=
00">`&nbsp;IS&nbsp;NULL)&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;THEN&nbsp;<br>&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET&nbsp;NEW.`</span><span style=3D"color:=
 #0000BB">$triggercol</span><span style=3D"color: #DD0000">`&nbsp;=3D&nbsp;=
UNIX_TIMESTAMP();&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END&nbsp;IF;&nbsp;<br>&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END;<br>&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"</span><span style=3D"color: #00770=
0">;</span><span style=3D"color: #0000BB"></span></code></code></pre></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-665">
              <div class=3D"comment-author">
              	KK, 12.03.19 12:21              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I am=
 using paragonies easydb pdo wrapper. but for connection errors, it display=
s username and pwd. i have tried using silent mode. but, no luck. is there =
any other way to ensure username and pwd are not used.
fyi: it uses the try catch mechanism.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello!</p>
<p>That's a very good question.</p>
<p>The leak is coming from the way Factory::create() method is called. </p>
<p>The simplest solution would be to wrap the Factory::create() call in a t=
ry-catch, as it is used for vanilla PDO in this article:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"colo=
r: #0000BB">$db&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;\</span=
><span style=3D"color: #0000BB">ParagonIE</span><span style=3D"color: #0077=
00">\</span><span style=3D"color: #0000BB">EasyDB</span><span style=3D"colo=
r: #007700">\</span><span style=3D"color: #0000BB">Factory</span><span styl=
e=3D"color: #007700">::</span><span style=3D"color: #0000BB">create</span><=
span style=3D"color: #007700">(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #DD0000">'mysql:host=3Dlocalhost;dbnam=
e=3Dsomething'</span><span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #DD0000">'userna=
me'</span><span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #DD0000">'putastrongpasswor=
dhere'<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">);<=
br>}&nbsp;catch(</span><span style=3D"color: #0000BB">Throwable&nbsp;$e</sp=
an><span style=3D"color: #007700">)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;throw&nbsp;new&nbsp;\</span><span style=3D"color: #0000BB">Exception</span=
><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$e</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">getMessage</span><span style=3D"color: #007700">());<br>}</span><span s=
tyle=3D"color: #0000BB"></span></code></code></pre>
<p>It will take the credential details out of the error message. </p>
<p>This method is not very clean but it's quick and it works. </p>
<p>The better solution would be to change the way Factory::create() is call=
ed, so I will reach Paragonie to discuss the matter.</p>              </div=
>
            </li>
=20
            <li class=3D"comment" id=3D"comment-649">
              <div class=3D"comment-author">
              	Silver, 21.02.19 12:23              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hey,
Thanks alot for the reply! I looked into the CSRF token and I'm definetly g=
oing to be using that for my forms. Also about the third point you made, di=
d you mean I shouldn't be giving users the ability to input/check some box =
in order to include some php file? or did you have something else in mind? =
Also thanks for the file upload part, I'll definetly go by that advice next=
 time I am going to be working with files.</p>
<p>Silver</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Choosing a file to include based on the u=
ser input is perfectly fine. I meant you should never directly put the user=
 ipout in include (or any other function dealing with files).</p>          =
    </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-646">
              <div class=3D"comment-author">
              	Silver, 19.02.19 18:50              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hey
I'm building a web application with php/sql and also js on the user's side.
I have a question regarding security, specifically about input/output sanit=
ization.
Right now I'm using PDO with prepared statements to contact my DB (SQL) and=
 also I am using Regex for input validation both on the server side and use=
r side. Is there anything else I should be doing to user inputs? Secondly o=
n the output side i understand it is needed to sanitize output with htmlspe=
cialchars() so people can't add in "evil html code/and js" is there anythin=
g else I should look into there or is that enough for a small userbase web =
application? I can also add that some of the data I'm working with falls un=
der delicate user data according to GDPR.
Sorry for the long question! :)</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Silver!</p>
<p>First of all, security is not a simple matter that can be covered in a c=
omment. There are a lot of areas to look for.</p>
<p>But speaking of SQL injection and XSS you are taking it right. </p>
<p>Other areas to look for are (you can google up the terms)</p>
<ul>
<li>Consider adding CSRF token to your form </li>
<li>make sure you don't include any file on your site  based on user input.=
</li>
<li>make sure you are not using eval()</li>
<li>if you're allowing file uploads, filter uploaded files based on their e=
xtensions and rename files to your own names. </li>
</ul>
<p>that's of course not the full list, just to elaborate a bit on your ques=
tion. But again, it it not a simple matter that can be covered in a comment=
.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-642">
              <div class=3D"comment-author">
              	Dennis, 15.02.19 12:23              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o! Thank you for this site! Although a lot is very clear, there is somethin=
g I can't work out. So, my problem is: How can I connect my database class =
with my other class which has a function insert() to start a transaction wi=
th prepared statement to start a transaction for multiple inserts...
Can you show me a example?
My Database connection class:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">&lt;?</span><span style=3D"color: #0000BB">php<br><br></span><sp=
an style=3D"color: #007700">class&nbsp;</span><span style=3D"color: #0000BB=
">DatabaseController<br></span><span style=3D"color: #007700">{<br>private&=
nbsp;</span><span style=3D"color: #0000BB">$servername</span><span style=3D=
"color: #007700">;<br>private&nbsp;</span><span style=3D"color: #0000BB">$u=
sername</span><span style=3D"color: #007700">;<br>private&nbsp;</span><span=
 style=3D"color: #0000BB">$password</span><span style=3D"color: #007700">;<=
br>private&nbsp;</span><span style=3D"color: #0000BB">$dbname</span><span s=
tyle=3D"color: #007700">;<br>private&nbsp;</span><span style=3D"color: #000=
0BB">$charset</span><span style=3D"color: #007700">;<br>protected&nbsp;</sp=
an><span style=3D"color: #0000BB">$conn</span><span style=3D"color: #007700=
">;<br><br>public&nbsp;function&nbsp;</span><span style=3D"color: #0000BB">=
connect</span><span style=3D"color: #007700">()<br>{<br>&nbsp;&nbsp;&nbsp;&=
nbsp;</span><span style=3D"color: #0000BB">$this</span><span style=3D"color=
: #007700">-&gt;</span><span style=3D"color: #0000BB">servername&nbsp;</spa=
n><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0=
000">"localhost"</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #0000BB">$this</span><span style=3D"co=
lor: #007700">-&gt;</span><span style=3D"color: #0000BB">username&nbsp;</sp=
an><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD=
0000">"root"</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&n=
bsp;</span><span style=3D"color: #0000BB">$this</span><span style=3D"color:=
 #007700">-&gt;</span><span style=3D"color: #0000BB">password&nbsp;</span><=
span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000=
">""</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;</sp=
an><span style=3D"color: #0000BB">$this</span><span style=3D"color: #007700=
">-&gt;</span><span style=3D"color: #0000BB">dbname&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"scores"=
</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><=
span style=3D"color: #0000BB">$this</span><span style=3D"color: #007700">-&=
gt;</span><span style=3D"color: #0000BB">charset&nbsp;</span><span style=3D=
"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"utf8mb4"</=
span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an style=3D"color: #0000BB">$options&nbsp;</span><span style=3D"color: #007=
700">=3D&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><=
span style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</=
span><span style=3D"color: #0000BB">ATTR_ERRMODE&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #=
007700">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span =
style=3D"color: #007700">::</span><span style=3D"color: #0000BB">ERRMODE_EX=
CEPTION</span><span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><spa=
n style=3D"color: #007700">::</span><span style=3D"color: #0000BB">ATTR_DEF=
AULT_FETCH_MODE&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</s=
pan><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700"=
>::</span><span style=3D"color: #0000BB">FETCH_ASSOC</span><span style=3D"c=
olor: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::<=
/span><span style=3D"color: #0000BB">ATTR_EMULATE_PREPARES&nbsp;&nbsp;&nbsp=
;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"c=
olor: #0000BB">false</span><span style=3D"color: #007700">,<br>&nbsp;&nbsp;=
&nbsp;&nbsp;];<br>&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$dsn&nbs=
p;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"colo=
r: #DD0000">"mysql:host=3D"&nbsp;</span><span style=3D"color: #007700">.&nb=
sp;</span><span style=3D"color: #0000BB">$this</span><span style=3D"color: =
#007700">-&gt;</span><span style=3D"color: #0000BB">servername&nbsp;</span>=
<span style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #DD0000"=
>";dbname=3D"&nbsp;</span><span style=3D"color: #007700">.&nbsp;</span><spa=
n style=3D"color: #0000BB">$this</span><span style=3D"color: #007700">-&gt;=
</span><span style=3D"color: #0000BB">dbname</span><span style=3D"color: #0=
07700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span st=
yle=3D"color: #0000BB">$conn&nbsp;</span><span style=3D"color: #007700">=3D=
&nbsp;new&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #0000BB">$dsn</span><span=
 style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$thi=
s</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0=
000BB">username</span><span style=3D"color: #007700">,&nbsp;</span><span st=
yle=3D"color: #0000BB">$this</span><span style=3D"color: #007700">-&gt;</sp=
an><span style=3D"color: #0000BB">password</span><span style=3D"color: #007=
700">,&nbsp;</span><span style=3D"color: #0000BB">$this</span><span style=
=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">charset</spa=
n><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000B=
B">$options</span><span style=3D"color: #007700">);<br><br>&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style=3D"color: #0=
000BB">$conn</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&n=
bsp;}&nbsp;catch&nbsp;(</span><span style=3D"color: #0000BB">Exception&nbsp=
;$e</span><span style=3D"color: #007700">)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style=3D"color: #DD0000">"=
Connection&nbsp;failed:&nbsp;"&nbsp;</span><span style=3D"color: #007700">.=
&nbsp;</span><span style=3D"color: #0000BB">$e</span><span style=3D"color: =
#007700">-&gt;</span><span style=3D"color: #0000BB">getMessage</span><span =
style=3D"color: #007700">();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;=
&nbsp;&nbsp;}<br>}</span><span style=3D"color: #0000BB"></span></code></cod=
e></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Dennis!</p>
<p>Using the database connection is a tricky subject. There are several app=
roaches discussed in the adjacent chapter: <a href=3D"https://phpdelusions.=
net/pdo/pdo_wrapper#availability">https://phpdelusions.net/pdo/pdo_wrapper#=
availability</a>
It's hard to tell with one will suit you best, but at least you should make=
 sure that there is only one connection opened and used for all database in=
teractions during a single script runtime. Feel free to reach back if somet=
hing is still unclear. </p>
<p>Also, a bit irrelevant, but I noticed some issues with your DatabaseCont=
roller class. I have an article on the common issues with database classes:=
 <a href=3D"https://phpdelusions.net/pdo/common_mistakes">https://phpdelusi=
ons.net/pdo/common_mistakes</a>
you may find it interesting.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-639">
              <div class=3D"comment-author">
              	Jerome Betareu, 12.02.19 11:46              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>hell=
o, the table contains over a million records. 1 record per minute for sever=
al years. No wonder the treatment times were getting longer and longer!
In short, I removed almost the entire beginning of the code to process a we=
ek of data and the processing time is now 1.24 seconds :)
Thank you very much for opening my eyes to the problem.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-638">
              <div class=3D"comment-author">
              	Jerome Betareu, 11.02.19 20:46              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>You =
are absolutely right !
I focused on the query itself but it is actually the 2 min and max queries =
that are not good!
Obviously the whole table is treated by the WHERE clause since $timestampmi=
n is the timestamp of the first record of the table and $timestampmax is th=
e last!
I will look at this tomorrow because it starts to be late (and my eyes do n=
ot see much ...)
thank you again for your precious help.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-637">
              <div class=3D"comment-author">
              	Jerome Betareu, 11.02.19 11:09              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Here=
 is the request</p>
<pre><code><code><span style=3D"color: #0000BB">$connection&nbsp;</span><sp=
an style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">=
sql_pdo_connexion&nbsp;</span><span style=3D"color: #007700">(</span><span =
style=3D"color: #0000BB">$server</span><span style=3D"color: #007700">,&nbs=
p;</span><span style=3D"color: #0000BB">$base</span><span style=3D"color: #=
007700">,&nbsp;</span><span style=3D"color: #0000BB">$login</span><span sty=
le=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$pass</s=
pan><span style=3D"color: #007700">);<br></span><span style=3D"color: #0000=
BB">$timestampmin&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;$&nbs=
p;</span><span style=3D"color: #0000BB">connection&nbsp;</span><span style=
=3D"color: #007700">-&gt;&nbsp;</span><span style=3D"color: #0000BB">query&=
nbsp;</span><span style=3D"color: #007700">(</span><span style=3D"color: #D=
D0000">"SELECT&nbsp;MIN&nbsp;(timestamp)&nbsp;FROM`&nbsp;</span><span style=
=3D"color: #0000BB">$table_type</span><span style=3D"color: #DD0000">`&nbsp=
;"</span><span style=3D"color: #007700">)&nbsp;-&gt;&nbsp;</span><span styl=
e=3D"color: #0000BB">fetchColumn&nbsp;</span><span style=3D"color: #007700"=
>();<br></span><span style=3D"color: #0000BB">$timestampmax&nbsp;</span><sp=
an style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">=
$connection&nbsp;</span><span style=3D"color: #007700">-&gt;&nbsp;</span><s=
pan style=3D"color: #0000BB">query&nbsp;</span><span style=3D"color: #00770=
0">(</span><span style=3D"color: #DD0000">"SELECT&nbsp;MAX&nbsp;(timestamp)=
&nbsp;FROM`&nbsp;</span><span style=3D"color: #0000BB">$table_type</span><s=
pan style=3D"color: #DD0000">`&nbsp;"</span><span style=3D"color: #007700">=
)&nbsp;-&gt;&nbsp;</span><span style=3D"color: #0000BB">fetchColumn&nbsp;</=
span><span style=3D"color: #007700">();<br></span><span style=3D"color: #00=
00BB">$datetimedebut&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</=
span><span style=3D"color: #0000BB">date&nbsp;</span><span style=3D"color: =
#007700">(</span><span style=3D"color: #DD0000">'Y-m-d'</span><span style=
=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$timestamp=
min</span><span style=3D"color: #007700">);<br></span><span style=3D"color:=
 #0000BB">$datetimefin&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;=
</span><span style=3D"color: #0000BB">date&nbsp;</span><span style=3D"color=
: #007700">(</span><span style=3D"color: #DD0000">'Y-m-d'</span><span style=
=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$timestamp=
max</span><span style=3D"color: #007700">);<br></span><span style=3D"color:=
 #0000BB">$datedebut&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</=
span><span style=3D"color: #0000BB">date&nbsp;</span><span style=3D"color: =
#007700">(</span><span style=3D"color: #DD0000">'Y-m-d'</span><span style=
=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$timestamp=
debut</span><span style=3D"color: #007700">);<br></span><span style=3D"colo=
r: #0000BB">$query&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</sp=
an><span style=3D"color: #DD0000">"SELECT&nbsp;timestamp,&nbsp;Tmax,&nbsp;T=
min,&nbsp;TCon,&nbsp;Ton,&nbsp;Teur,&nbsp;flag<br>FROM&nbsp;`</span><span s=
tyle=3D"color: #0000BB">$table_type</span><span style=3D"color: #DD0000">`<=
br>WHERE&nbsp;timestamp&nbsp;BETWEEN&nbsp;</span><span style=3D"color: #000=
0BB">$timestampdebut</span><span style=3D"color: #DD0000">&nbsp;AND&nbsp;</=
span><span style=3D"color: #0000BB">$timestampfin</span><span style=3D"colo=
r: #DD0000"><br>ORDER&nbsp;BY&nbsp;timestamp&nbsp;"</span><span style=3D"co=
lor: #007700">;<br><br></span><span style=3D"color: #0000BB">$sql&nbsp;</sp=
an><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #00=
00BB">sql_pdo_query&nbsp;</span><span style=3D"color: #007700">(</span><spa=
n style=3D"color: #0000BB">$connection</span><span style=3D"color: #007700"=
>,&nbsp;</span><span style=3D"color: #0000BB">$query</span><span style=3D"c=
olor: #007700">);</span><span style=3D"color: #0000BB"></span></code></code=
></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Jerome</p>
<p>To me, the above code makes no sense. It looks like all the records from=
 table are selected. You are selecting all rows between min and max value i=
n some column - so it is effectively all the rows. What's the point of it? =
Why bother with WHERE condition then?</p>
<p>In case this query returns too much rows, then indeed in will take a lot=
 of time. Any chance you could reduce the number of rows selected?</p>     =
         </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-636">
              <div class=3D"comment-author">
              	Jerome Betareu, 11.02.19 11:02              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>the =
code</p>
<pre><code><code><span style=3D"color: #0000BB">$d1&nbsp;&nbsp;</span><span=
 style=3D"color: #007700">=3D&nbsp;array();<br></span><span style=3D"color:=
 #0000BB">$d2&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;arr=
ay();<br></span><span style=3D"color: #0000BB">$d3&nbsp;&nbsp;</span><span =
style=3D"color: #007700">=3D&nbsp;array();<br></span><span style=3D"color: =
#0000BB">$d5&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;arra=
y();<br></span><span style=3D"color: #0000BB">$array_ON&nbsp;</span><span s=
tyle=3D"color: #007700">=3D&nbsp;array();<br></span><span style=3D"color: #=
0000BB">$array_OFF&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;arra=
y();<br>while&nbsp;(</span><span style=3D"color: #0000BB">$row&nbsp;</span>=
<span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000B=
B">$sql</span><span style=3D"color: #007700">-&gt;</span><span style=3D"col=
or: #0000BB">fetch</span><span style=3D"color: #007700">(</span><span style=
=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span=
 style=3D"color: #0000BB">FETCH_ASSOC</span><span style=3D"color: #007700">=
))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #FF8000">=
//&nbsp;&nbsp;&nbsp;Execution&nbsp;in&nbsp;11&nbsp;seconds&nbsp;!&nbsp;!&nb=
sp;!&nbsp;!&nbsp;&nbsp;--&nbsp;very&nbsp;BAD&nbsp;!<br>&nbsp;&nbsp;&nbsp;&n=
bsp;</span><span style=3D"color: #0000BB">$t&nbsp;</span><span style=3D"col=
or: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$row</span><spa=
n style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'timestam=
p'</span><span style=3D"color: #007700">]&nbsp;*&nbsp;</span><span style=3D=
"color: #0000BB">1000</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp=
;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">array_push&nbsp;</span><=
span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$d1</s=
pan><span style=3D"color: #007700">,&nbsp;array(</span><span style=3D"color=
: #0000BB">$t</span><span style=3D"color: #007700">,&nbsp;</span><span styl=
e=3D"color: #0000BB">floatval</span><span style=3D"color: #007700">(</span>=
<span style=3D"color: #0000BB">$row</span><span style=3D"color: #007700">[<=
/span><span style=3D"color: #DD0000">"Tmax"</span><span style=3D"color: #00=
7700">])));<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB=
">array_push&nbsp;</span><span style=3D"color: #007700">(</span><span style=
=3D"color: #0000BB">$d2</span><span style=3D"color: #007700">,&nbsp;array(<=
/span><span style=3D"color: #0000BB">$t</span><span style=3D"color: #007700=
">,&nbsp;</span><span style=3D"color: #0000BB">floatval</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #0000BB">$row</span><span=
 style=3D"color: #007700">[</span><span style=3D"color: #DD0000">"Tmin"</sp=
an><span style=3D"color: #007700">])));<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><=
span style=3D"color: #0000BB">array_push&nbsp;</span><span style=3D"color: =
#007700">(</span><span style=3D"color: #0000BB">$d3</span><span style=3D"co=
lor: #007700">,&nbsp;array(</span><span style=3D"color: #0000BB">$t</span><=
span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">=
floatval</span><span style=3D"color: #007700">(</span><span style=3D"color:=
 #0000BB">$row</span><span style=3D"color: #007700">[</span><span style=3D"=
color: #DD0000">"TCon"</span><span style=3D"color: #007700">])));<br>&nbsp;=
&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">array_push&nbsp;</s=
pan><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$=
d5</span><span style=3D"color: #007700">,&nbsp;array(</span><span style=3D"=
color: #0000BB">$t</span><span style=3D"color: #007700">,&nbsp;</span><span=
 style=3D"color: #0000BB">floatval</span><span style=3D"color: #007700">(</=
span><span style=3D"color: #0000BB">$row</span><span style=3D"color: #00770=
0">[</span><span style=3D"color: #DD0000">"Teur"</span><span style=3D"color=
: #007700">])));<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span style=3D"=
color: #0000BB">floatval</span><span style=3D"color: #007700">(</span><span=
 style=3D"color: #0000BB">$row</span><span style=3D"color: #007700">[</span=
><span style=3D"color: #DD0000">"flag"</span><span style=3D"color: #007700"=
>])&nbsp;=3D=3D&nbsp;</span><span style=3D"color: #0000BB">0</span><span st=
yle=3D"color: #007700">)&nbsp;{&nbsp;</span><span style=3D"color: #FF8000">=
//&nbsp;Chauffage&nbsp;OFF<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</span><span style=3D"color: #0000BB">array_push&nbsp;</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #0000BB">$array_OFF&nbsp;=
</span><span style=3D"color: #007700">,&nbsp;array(</span><span style=3D"co=
lor: #0000BB">$t</span><span style=3D"color: #007700">,&nbsp;</span><span s=
tyle=3D"color: #0000BB">floatval</span><span style=3D"color: #007700">(</sp=
an><span style=3D"color: #0000BB">$row</span><span style=3D"color: #007700"=
>[</span><span style=3D"color: #DD0000">"Ton"</span><span style=3D"color: #=
007700">])));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><sp=
an style=3D"color: #0000BB">array_push&nbsp;</span><span style=3D"color: #0=
07700">(</span><span style=3D"color: #0000BB">$array_ON&nbsp;</span><span s=
tyle=3D"color: #007700">,&nbsp;array(</span><span style=3D"color: #0000BB">=
$t</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color:=
 #0000BB">null</span><span style=3D"color: #007700">));<br>&nbsp;&nbsp;&nbs=
p;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</span><span style=3D"color: #0000BB">array_push&nbsp;</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #0000BB">$array_ON&nbsp;<=
/span><span style=3D"color: #007700">,&nbsp;array(</span><span style=3D"col=
or: #0000BB">$t</span><span style=3D"color: #007700">,&nbsp;</span><span st=
yle=3D"color: #0000BB">floatval</span><span style=3D"color: #007700">(</spa=
n><span style=3D"color: #0000BB">$row</span><span style=3D"color: #007700">=
[</span><span style=3D"color: #DD0000">"Ton"</span><span style=3D"color: #0=
07700">])));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><spa=
n style=3D"color: #0000BB">array_push&nbsp;</span><span style=3D"color: #00=
7700">(</span><span style=3D"color: #0000BB">$array_OFF&nbsp;</span><span s=
tyle=3D"color: #007700">,&nbsp;array(</span><span style=3D"color: #0000BB">=
$t</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color:=
 #0000BB">null</span><span style=3D"color: #007700">));<br>&nbsp;&nbsp;&nbs=
p;&nbsp;}<br>}<br></span><span style=3D"color: #0000BB">$sql</span><span st=
yle=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">closeCurs=
or</span><span style=3D"color: #007700">();</span><span style=3D"color: #00=
00BB"></span></code></code></pre>
<p>Thank you again for your help</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-635">
              <div class=3D"comment-author">
              	Jerome Betareu, 11.02.19 11:00              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o, thank you for responding quickly. After analysis of some requests it tur=
ns out that it is the extraction of the data which is extremely long. For e=
xample, the next query runs in about 1 second while data retrieval takes 11=
 seconds!
I know I'm abusing (a bit) and optimizing queries is not part of your post =
but if you could give me a solution it would be really nice. An article abo=
ve would be welcome and I think that newbies like me would find very valuab=
le information.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-633">
              <div class=3D"comment-author">
              	Jerome Betareu, 08.02.19 13:05              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o, first of all I apologize for my english (I'm French). I am a student and=
 I am currently working for a company that would like to take over a web si=
te developed by another student in the past ...
in short, my knowledge of PHP are rudimentary and your site has taught me a=
 lot but I ask myself a few questions about the obtimization of performance=
 in the writing of PDO requests.
For example, is it possible to optimize this query in terms of CPU utilizat=
ion and RAM. The site being sullied on a Raspberry PI v2, the speed of disp=
lay is also an important criterium ...</p>
<pre><code><code><span style=3D"color: #0000BB">$query</span><span style=3D=
"color: #007700">=3D</span><span style=3D"color: #DD0000">"SELECT&nbsp;qdat=
e,&nbsp;DATE_FORMAT(qdate,&nbsp;'</span><span style=3D"color: #0000BB">$dat=
eformatsql</span><span style=3D"color: #DD0000">')&nbsp;AS&nbsp;'periode'&n=
bsp;,<br>ROUND(&nbsp;((MAX(`type_1`)&nbsp;-&nbsp;MIN(`type_1`))&nbsp;/&nbsp=
;1000)&nbsp;,1&nbsp;)&nbsp;AS&nbsp;'type_1',<br>ROUND(&nbsp;((MAX(`type_2`)=
&nbsp;-&nbsp;MIN(`type_2`))&nbsp;/&nbsp;1000)&nbsp;,1&nbsp;)&nbsp;AS&nbsp;'=
type_2'<br>FROM&nbsp;`</span><span style=3D"color: #0000BB">$table_type</sp=
an><span style=3D"color: #DD0000">`<br>WHERE&nbsp;timestamp&nbsp;&gt;&nbsp;=
'</span><span style=3D"color: #0000BB">$timedebut</span><span style=3D"colo=
r: #DD0000">'<br>GROUP&nbsp;BY&nbsp;periode<br>ORDER&nbsp;BY&nbsp;qdate"&nb=
sp;</span><span style=3D"color: #007700">;</span><span style=3D"color: #000=
0BB"></span></code></code></pre>
<p>thank you for your reply</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Jerome!</p>
<p>This question is a bit out of the scope of this article but I'll be glad=
 to help. I think you should make sure there is an index on the timestamp f=
ield. It's hard to tell any more without knowing the details. But you could=
 always try to check the performance by adding EXPLAIN keyword before SELEC=
T in your query and studying its output.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-630">
              <div class=3D"comment-author">
              	William Entriken, 01.02.19 01:49              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Some=
 of the " in example code are unnecessary and could be '</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-626">
              <div class=3D"comment-author">
              	Walter, 25.01.19 01:38              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Plea=
se help with SQL application.</p>
<p>I want to <code>Select * from  table Quotes</code>, where one or more it=
ems exist in table <code>Work Orders</code> where <code>Quotes.quote =3D Wo=
rk Orders.quote</code> and <code>Work Orders.stat=3D'OPEN'</code></p>
<p>I know I could do a query on table <code>Work Orders</code>, fetch colum=
n, and then feed the result into a query on table <code>Quotes,</code> but =
I feel like the database can do this. What is the SQL to have the database =
make this comparison?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Walter!</p>
<p>Yes you are right, a database can do it. The query is almost one you wro=
te already, you only need to add a JOIN clause</p>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;Quotes</span><s=
pan style=3D"color: #007700">.*&nbsp;</span><span style=3D"color: #0000BB">=
FROM&nbsp;Quotes&nbsp;<br>JOIN&nbsp;</span><span style=3D"color: #007700">`=
</span><span style=3D"color: #DD0000">Work&nbsp;Orders</span><span style=3D=
"color: #007700">`&nbsp;</span><span style=3D"color: #0000BB">ON&nbsp;Quote=
s</span><span style=3D"color: #007700">.</span><span style=3D"color: #0000B=
B">quote&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;`</span><span =
style=3D"color: #DD0000">Work&nbsp;Orders</span><span style=3D"color: #0077=
00">`.</span><span style=3D"color: #0000BB">quote<br>WHERE&nbsp;</span><spa=
n style=3D"color: #007700">`</span><span style=3D"color: #DD0000">Work&nbsp=
;Orders</span><span style=3D"color: #007700">`.</span><span style=3D"color:=
 #0000BB">stat</span><span style=3D"color: #007700">=3D</span><span style=
=3D"color: #DD0000">'OPEN'</span><span style=3D"color: #0000BB"></span></co=
de></code></pre>
<p>Stack Overflow ans Wikipedia has many great articles explaining JOIN, yo=
u may want to learn about joins there.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-625">
              <div class=3D"comment-author">
              	Khangi, 24.01.19 23:29              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o, I do not see what's wrong in my request! Can you give me the solution pl=
ease?</p>
<pre><code><code><span style=3D"color: #0000BB">$stat&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'off'<=
/span><span style=3D"color: #007700">;<br></span><span style=3D"color: #000=
0BB">$req&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span =
style=3D"color: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</s=
pan><span style=3D"color: #0000BB">prepare</span><span style=3D"color: #007=
700">(</span><span style=3D"color: #DD0000">'UPDATE&nbsp;bus&nbsp;SET&nbsp;=
onoff&nbsp;=3D&nbsp;:onoff'</span><span style=3D"color: #007700">);<br>&nbs=
p;</span><span style=3D"color: #0000BB">$req</span><span style=3D"color: #0=
07700">-&gt;</span><span style=3D"color: #0000BB">execute</span><span style=
=3D"color: #007700">(array(</span><span style=3D"color: #DD0000">'onoff'&nb=
sp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D=
"color: #0000BB">$stat</span><span style=3D"color: #007700">));&nbsp;</span=
><span style=3D"color: #0000BB"></span></code></code></pre>
<p>thank you so much</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Khangi!</p>
<p>I don't see it either. Just to be sure, don't you forget to add a WHERE =
clause?</p>
<p>In any case, any problem with a PDO query would raise an error that shou=
ld help you to find the problem</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-622">
              <div class=3D"comment-author">
              	Kris, 18.01.19 13:44              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Grea=
t article. Helped me a lot. Thanks!</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-621">
              <div class=3D"comment-author">
              	John Pierce, 17.01.19 20:13              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>than=
k you very much for your super fast response!
Actually, I had thought to do like that but I thought wrong that as I had n=
o data fields in the table I could not do it ... error!</p>
<p>it is unfortunate that no command like BOTTOM or TOP is available under =
SQL, it would facilitate many things ... :)
Thx</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello John!</p>
<p>I must warn you in this regard again, because if you think that using BO=
TTOM or TOP would facilitate many things you are probably doing something w=
rong. </p>
<p>And your UPDATE query is the example. If you want to update the "last re=
cord" than you definitely doing it wrong. To update a record you must know =
for certain which particular record you want to update, not just a relative=
 position. If you can explain why do you need this update I will tell you o=
w to do it right</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-620">
              <div class=3D"comment-author">
              	John Pierce, 17.01.19 19:10              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I wi=
ll have another question about UPDATE.
How to formulate the query to modify only the last record of the table?
Of course, there are no ID fields in this table, only a primary key.
thx</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello John.</p>
<p>At least for mysql, there is no way to tell "the last" record, unless yo=
u have a field designated for this purpose. So I would recommend either an =
auto_incremented id, or at least a datetime field that would hold the time =
when the row was added. </p>
<p>Besides, "the last" is too clumsy a description, you must know the exact=
 key for the row you need to update. Other wise a race condition may ruin y=
our operation</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-619">
              <div class=3D"comment-author">
              	John Pierce, 17.01.19 19:05              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o, by doing some research I found your site which unfortunately did not ans=
wer to my problem.
I would like to UPDATE a table looking for a particular record using WHERE =
but obviously my syntax should not be correct.
Can you help me please ?</p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"pierc=
e"</span><span style=3D"color: #007700">;<br></span><span style=3D"color: #=
0000BB">$req&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><sp=
an style=3D"color: #0000BB">$con</span><span style=3D"color: #007700">-&gt;=
</span><span style=3D"color: #0000BB">prepare&nbsp;</span><span style=3D"co=
lor: #007700">(</span><span style=3D"color: #DD0000">"UPDATE&nbsp;contact&n=
bsp;SET<br>bic&nbsp;=3D:&nbsp;bic,<br>orson&nbsp;=3D:&nbsp;orson,<br>countr=
y&nbsp;=3D:&nbsp;country,<br>code&nbsp;=3D:&nbsp;code,<br>wash&nbsp;=3D:&nb=
sp;wash<br>WHERE&nbsp;name&nbsp;=3D&nbsp;</span><span style=3D"color: #0000=
BB">$data</span><span style=3D"color: #DD0000">"</span><span style=3D"color=
: #007700">);<br><br>&nbsp;</span><span style=3D"color: #0000BB">$req</span=
><span style=3D"color: #007700">-&gt;&nbsp;</span><span style=3D"color: #00=
00BB">execute&nbsp;</span><span style=3D"color: #007700">(array&nbsp;(<br>&=
nbsp;</span><span style=3D"color: #DD0000">'bic'&nbsp;</span><span style=3D=
"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">$bic</s=
pan><span style=3D"color: #007700">,<br>&nbsp;</span><span style=3D"color: =
#DD0000">'orson'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</=
span><span style=3D"color: #0000BB">$orson</span><span style=3D"color: #007=
700">,<br>&nbsp;</span><span style=3D"color: #DD0000">'country'&nbsp;</span=
><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #=
0000BB">$country</span><span style=3D"color: #007700">,<br>&nbsp;</span><sp=
an style=3D"color: #DD0000">'code'&nbsp;</span><span style=3D"color: #00770=
0">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">$code</span><span sty=
le=3D"color: #007700">,<br>&nbsp;</span><span style=3D"color: #DD0000">'was=
h'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span sty=
le=3D"color: #0000BB">$wash</span><span style=3D"color: #007700">));</span>=
<span style=3D"color: #0000BB"></span></code></code></pre>
<p>The request is executed but the table is not modified!
Can you tell me how to implement this please?
WHERE name =3D $data</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello John!</p>
<p>Well, the answer is written on this very page, although I admit it is no=
t that explicit as should be:</p>
<blockquote>
<p>So, for every query you run, if at least one variable is going to be use=
d, you have to substitute it with a placeholder, then prepare your query, a=
nd then execute it, passing variables separately.</p>
</blockquote>
<p>It meand that <strong>every single variable</strong> should be substitut=
ed with a placeholder and then go into execute:</p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"pierc=
e"</span><span style=3D"color: #007700">;<br></span><span style=3D"color: #=
0000BB">$req&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><sp=
an style=3D"color: #0000BB">$con</span><span style=3D"color: #007700">-&gt;=
</span><span style=3D"color: #0000BB">prepare&nbsp;</span><span style=3D"co=
lor: #007700">(</span><span style=3D"color: #DD0000">"UPDATE&nbsp;contact&n=
bsp;SET<br>bic&nbsp;=3D&nbsp;:bic,<br>orson&nbsp;=3D&nbsp;:orson,<br>countr=
y&nbsp;=3D&nbsp;:country,<br>code&nbsp;=3D&nbsp;:code,<br>wash&nbsp;=3D&nbs=
p;:wash<br>WHERE&nbsp;name&nbsp;=3D&nbsp;:data"</span><span style=3D"color:=
 #007700">);<br><br>&nbsp;</span><span style=3D"color: #0000BB">$req</span>=
<span style=3D"color: #007700">-&gt;&nbsp;</span><span style=3D"color: #000=
0BB">execute&nbsp;</span><span style=3D"color: #007700">(array&nbsp;(<br>&n=
bsp;</span><span style=3D"color: #DD0000">'bic'&nbsp;</span><span style=3D"=
color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">$bic</sp=
an><span style=3D"color: #007700">,<br>&nbsp;</span><span style=3D"color: #=
DD0000">'orson'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</s=
pan><span style=3D"color: #0000BB">$orson</span><span style=3D"color: #0077=
00">,<br>&nbsp;</span><span style=3D"color: #DD0000">'country'&nbsp;</span>=
<span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #0=
000BB">$country</span><span style=3D"color: #007700">,<br>&nbsp;</span><spa=
n style=3D"color: #DD0000">'code'&nbsp;</span><span style=3D"color: #007700=
">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">$code</span><span styl=
e=3D"color: #007700">,<br>&nbsp;</span><span style=3D"color: #DD0000">'wash=
'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span styl=
e=3D"color: #0000BB">$wash</span><span style=3D"color: #007700">,<br>&nbsp;=
</span><span style=3D"color: #DD0000">'data'&nbsp;</span><span style=3D"col=
or: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">$data</span=
><span style=3D"color: #007700">,<br>));</span><span style=3D"color: #0000B=
B"></span></code></code></pre>
<p>In you current form the query is not executed but rather produces an err=
or, due to that $data veriable i the query and also a space between a colon=
 and a placeholder name (it should be :bic, not :bic). </p>
<p>I fixed these issues in your code and now it should work.</p>           =
   </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-615">
              <div class=3D"comment-author">
              	Haseeb khan, 01.01.19 12:37              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>i wa=
nt a to select data between two dates using pdo
here is the column value (12/31/2018 6:25:21 PM)</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-611">
              <div class=3D"comment-author">
              	momo, 24.12.18 09:54              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Can =
you teach me how to search for my question?</p>
<p>My question is:
I did this:</p>
<pre><code><code><span style=3D"color: #0000BB">$statement&nbsp;</span><spa=
n style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$=
pdo</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: =
#0000BB">prepare</span><span style=3D"color: #007700">(</span><span style=
=3D"color: #DD0000">'select&nbsp;*&nbsp;from&nbsp;mytodo.todos'</span><span=
 style=3D"color: #007700">);</span><span style=3D"color: #0000BB"></span></=
code></code></pre>
<p>However, only by luck did I try to qualify my todos table with its datab=
ase mytodo and see that when I</p>
<pre><code><code><span style=3D"color: #0000BB">var_dump</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #0000BB">$statement</span=
><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">=
fetchAll</span><span style=3D"color: #007700">());</span><span style=3D"col=
or: #0000BB"></span></code></code></pre>
<p>there is anything but an empty array. </p>
<p>I was adding to this table, and on my sql gui I could see they were addi=
ng, and same with the sql terminal, yet the fetchAll array was empty when I=
 neglected the <code>mytodo.</code> part.</p>
<p>If I didn't have luck, what search terms could I have entered on search =
engines to tell me that I need to do that prepending of the database name t=
o my column? </p>
<p>I'm following these beginner PHP videos on laracast, and quite a few tim=
es copying the exact thing in the video doesn't seem to work (I'm on PHP 7.=
2 with MySQL8, that itself was not smooth to set up with all the troublesho=
oting the "caching_sha2_password" stuff), so I've been searching a lot from=
 the beginning. Couldn't search for the right term for this problem I had a=
nd I'm scared once I progress to bigger errors, I wouldn't be able to find =
my way out! </p>
<p>Thanks</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello momo</p>
<p>I don't know if it's your case, but only prepare() is not enough. You mu=
st always execute a prepared query to get the results. </p>
<p>As of searching the answer, I would probably search for the basic PDO se=
lect example and follow it attentively.   </p>
<p>However, if it works only if you add mytodo. part, it simply means that =
you are connection to some other database and natuarally you have to denote=
 the database yoiu want to work with in the query.</p>
<p>Searching would be straightforward, something like my query works only i=
f I add database to the table name</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-599">
              <div class=3D"comment-author">
              	Gio, 11.12.18 03:06              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,
any compliment is superfluous.
A question fi possible,
I have some difficulties to run a query LIKE :</p>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;id&nbsp;FROM&nb=
sp;table&nbsp;WHERE&nbsp;id&nbsp;</span><span style=3D"color: #007700">=3D&=
nbsp;:</span><span style=3D"color: #0000BB">id&nbsp;</span><span style=3D"c=
olor: #007700">AND&nbsp;</span><span style=3D"color: #0000BB">catalog&nbsp;=
LIKE&nbsp;</span><span style=3D"color: #007700">?</span></code></code></pre=
>
<p>suggestions ?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Gio!</p>
<p>You cannot use positional and named placeholders in the same query</p>
<p>So it should be either</p>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;id&nbsp;FROM&nb=
sp;table&nbsp;WHERE&nbsp;id&nbsp;</span><span style=3D"color: #007700">=3D&=
nbsp;:</span><span style=3D"color: #0000BB">id&nbsp;</span><span style=3D"c=
olor: #007700">AND&nbsp;</span><span style=3D"color: #0000BB">catalog&nbsp;=
LIKE&nbsp;</span><span style=3D"color: #007700">:</span><span style=3D"colo=
r: #0000BB">text</span></code></code></pre>
<p>or </p>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;id&nbsp;FROM&nb=
sp;table&nbsp;WHERE&nbsp;id&nbsp;</span><span style=3D"color: #007700">=3D&=
nbsp;?&nbsp;AND&nbsp;</span><span style=3D"color: #0000BB">catalog&nbsp;LIK=
E&nbsp;</span><span style=3D"color: #007700">?</span></code></code></pre>  =
            </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-598">
              <div class=3D"comment-author">
              	gratefulHacker, 09.12.18 16:33              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Just=
 want to say thank you for your articles. They have been incredibly informa=
tive and helpful.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-593">
              <div class=3D"comment-author">
              	Chris S, 23.11.18 20:32              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I'm =
not sure if it's possible to reply to a reply here for us regular peons, bu=
t thank you for your quick and very thorough reply (and I apologize for sta=
rting a new comment thread if it's possible to reply to my own). That was a=
n extremely helpful response. </p>
<p>To be honest, I actually always saw the backticks used elsewhere and had=
 no idea the purpose... "what an unnecessary, and ugly-looking thing to do"=
, I thought. I come from a professional Oracle background, so MySQL is "fam=
iliar", but not second nature. It wasn't until reading this (fantastic) art=
icle that I learned what those backticks are for. Thank you!</p>
<p>I'll go update my code to use the backticks, just in case. And yeah, sor=
ry, "user input" wasn't a very descriptive term to use, but I can say that =
yes, everything is hardcoded. I definitely would not be using any reserved =
words in table names, but I like the idea of just following good standards,=
 and doing that early on enough in development (which is the case here) and=
 sticking to them throughout any coding I do. So, off I go to fix it all up=
!</p>
<p>Thanks again. I can't stress just how much I learned from this article a=
lready.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-592">
              <div class=3D"comment-author">
              	Chris S, 22.11.18 22:45              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I'm =
a little confused on whether I need to worry about escaping/backticking my =
table names in querying/DDL statements.</p>
<p>My table names are all constants, stored in a constants php file so that=
 if I ever change things like schema name or something like that, I have on=
e central place to update. So for example, I have a constant defined like s=
o:</p>
<pre><code><code><span style=3D"color: #0000BB">DEFINE</span><span style=3D=
"color: #007700">(</span><span style=3D"color: #DD0000">'NS_TBL_PLAYERS'</s=
pan><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #DD0=
000">'NS_PLAYERS'</span><span style=3D"color: #007700">);</span><span style=
=3D"color: #0000BB"></span></code></code></pre>
<p>So in my code I may do something like:</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;column1&nbsp;from&nbsp;"</span><span style=3D"color: #007700">.</span=
><span style=3D"color: #0000BB">NS_TBL_PLAYERS</span><span style=3D"color: =
#007700">.</span><span style=3D"color: #DD0000">"&nbsp;WHERE&nbsp;id&nbsp;=
=3D&nbsp;:player_id"</span><span style=3D"color: #007700">;<br></span><span=
 style=3D"color: #0000BB">stmt&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><span style=3D"co=
lor: #007700">-&gt;</span><span style=3D"color: #0000BB">prepare</span><spa=
n style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$sql</spa=
n><span style=3D"color: #007700">);<br></span><span style=3D"color: #0000BB=
">$stmt</span><span style=3D"color: #007700">-&gt;</span><span style=3D"col=
or: #0000BB">bindValue</span><span style=3D"color: #007700">(</span><span s=
tyle=3D"color: #DD0000">":id"</span><span style=3D"color: #007700">,&nbsp;<=
/span><span style=3D"color: #0000BB">$player_id</span><span style=3D"color:=
 #007700">,&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span styl=
e=3D"color: #007700">::</span><span style=3D"color: #0000BB">PARAM_INT</spa=
n><span style=3D"color: #007700">);<br>if&nbsp;(</span><span style=3D"color=
: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span sty=
le=3D"color: #0000BB">execute</span><span style=3D"color: #007700">())&nbsp=
;{..&nbsp;</span><span style=3D"color: #0000BB">yada&nbsp;yada</span><span =
style=3D"color: #007700">..</span><span style=3D"color: #0000BB"></span></c=
ode></code></pre>
<p>My syntax above might be a little off.. part of that is by memory, but t=
hat's not the point of my qustion. , I'm just wondering if I open myself to=
 SQL injection by doing the table dynamically like above, without any backt=
icking/escaping or anything. A user has no input whatsoever into what "NS_T=
BL_PLAYERS" is... that all comes from "constants.php" file I have on the se=
rver. So I assume that unless they somehow gain access to that file to upda=
te it (in which case I probably have bigger worries) the above code is safe=
?</p>
<p>Thanks for your time and advice, and this article ((The only proper) PDO=
 tutorial) is incredibly well done.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Chris!</p>
<p>That's a really good question.</p>
<p>From the SQL injection point of view, rules are simple:</p>
<ol>
<li>All data must be supplied though a placeholder.</li>
<li>All other parts of the query must be hard-coded in your script.</li>
</ol>
<p>So as far as I can see, your code follows the rules, therefore there is =
no problem.</p>
<p>However, from the correct SQL syntax point of view there could be a prob=
lem. Your table name could be an SQL reserved word or an incorrect syntax (=
contain a space or a hyphen for example) so it's much better to enclose it =
in backticks, just in case. So the only difference I would make is</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;column1&nbsp;from&nbsp;`"</span><span style=3D"color: #007700">.</spa=
n><span style=3D"color: #0000BB">NS_TBL_PLAYERS</span><span style=3D"color:=
 #007700">.</span><span style=3D"color: #DD0000">"`&nbsp;WHERE&nbsp;id&nbsp=
;=3D&nbsp;:player_id"</span><span style=3D"color: #007700">;</span><span st=
yle=3D"color: #0000BB"></span></code></code></pre>
<p>And it should be OK. </p>
<p>Whereas you need to worry about escaping/backticking only if your query =
parts are coming from the user side (field names for example). In this case=
 you must choose them from a whitelist - so effectively it will make them h=
ardcoded and thus immune to injection.</p>
<p>I would also avoid the "user input" term as being quite vague and uncert=
ain. A "hardcoded value" is much better to me, as you can always be certain=
, whether it's written in your code or not. If not - then ot hould be added=
 to the query through a placeholder. </p>
<p>Hope this long and winding rant would be of any value for you! :)</p>   =
           </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-581">
              <div class=3D"comment-author">
              	Harachi, 12.11.18 20:09              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o, thank you for this excellent articles that filled a lot of my shortcomin=
gs.
unfortunately there is still a lot and if you want to fill another ... :)</=
p>
<p>I am stuck in my development because I can not use the min and max funct=
ions in a select with a limit. Visibly, 'limit' is incompatible with these =
2 functions but there may be a trick ...
here is my code:</p>
<pre><code><code><span style=3D"color: #0000BB">$query&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'SELE=
CT&nbsp;MAX(price)&nbsp;AS&nbsp;Pmax&nbsp;,&nbsp;MIN(price)&nbsp;AS&nbsp;Pm=
in&nbsp;FROM&nbsp;book&nbsp;ORDER&nbsp;BY&nbsp;timestamp&nbsp;DESC&nbsp;LIM=
IT&nbsp;0,10'</span><span style=3D"color: #007700">;<br></span><span style=
=3D"color: #0000BB">$sql&nbsp;</span><span style=3D"color: #007700">=3D&nbs=
p;</span><span style=3D"color: #0000BB">sql_pdo_query</span><span style=3D"=
color: #007700">(</span><span style=3D"color: #0000BB">$connexion</span><sp=
an style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$q=
uery</span><span style=3D"color: #007700">);<br></span><span style=3D"color=
: #0000BB">$row&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span>=
<span style=3D"color: #0000BB">$sql</span><span style=3D"color: #007700">-&=
gt;</span><span style=3D"color: #0000BB">fetch</span><span style=3D"color: =
#007700">(</span><span style=3D"color: #0000BB">PDO</span><span style=3D"co=
lor: #007700">::</span><span style=3D"color: #0000BB">FETCH_ASSOC</span><sp=
an style=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$Pm=
ax&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=
=3D"color: #0000BB">$row</span><span style=3D"color: #007700">[</span><span=
 style=3D"color: #DD0000">'Pmax'</span><span style=3D"color: #007700">];<br=
></span><span style=3D"color: #0000BB">$Pmin&nbsp;</span><span style=3D"col=
or: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$row</span><spa=
n style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'Pmin'</s=
pan><span style=3D"color: #007700">];<br>echo&nbsp;</span><span style=3D"co=
lor: #0000BB">$Pmin</span><span style=3D"color: #007700">.</span><span styl=
e=3D"color: #DD0000">'&nbsp;'</span><span style=3D"color: #007700">.&nbsp;<=
/span><span style=3D"color: #0000BB">$Pmax</span><span style=3D"color: #007=
700">;</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>I also tested with this code:</p>
<pre><code><code><span style=3D"color: #0000BB">$Pmax&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;(float)</span><span style=3D"color: #0000BB"=
>current</span><span style=3D"color: #007700">(</span><span style=3D"color:=
 #0000BB">$connexion</span><span style=3D"color: #007700">-&gt;</span><span=
 style=3D"color: #0000BB">query</span><span style=3D"color: #007700">(</spa=
n><span style=3D"color: #DD0000">"SELECT&nbsp;price&nbsp;FROM&nbsp;book&nbs=
p;ORDER&nbsp;BY&nbsp;timestamp&nbsp;DESC&nbsp;LIMIT&nbsp;0,10"</span><span =
style=3D"color: #007700">)-&gt;</span><span style=3D"color: #0000BB">fetch<=
/span><span style=3D"color: #007700">());<br></span><span style=3D"color: #=
0000BB">$Pmin&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;(float)</=
span><span style=3D"color: #0000BB">current</span><span style=3D"color: #00=
7700">(</span><span style=3D"color: #0000BB">$connexion</span><span style=
=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">query</span>=
<span style=3D"color: #007700">(</span><span style=3D"color: #DD0000">"SELE=
CT&nbsp;price&nbsp;FROM&nbsp;book&nbsp;ORDER&nbsp;BY&nbsp;timestamp&nbsp;AS=
C&nbsp;LIMIT&nbsp;0,10"</span><span style=3D"color: #007700">)-&gt;</span><=
span style=3D"color: #0000BB">fetch</span><span style=3D"color: #007700">()=
);<br>echo&nbsp;</span><span style=3D"color: #DD0000">'Pmax&nbsp;=3D&nbsp;'=
</span><span style=3D"color: #007700">.</span><span style=3D"color: #0000BB=
">$Pmax&nbsp;</span><span style=3D"color: #007700">.</span><span style=3D"c=
olor: #DD0000">'&nbsp;'</span><span style=3D"color: #007700">.&nbsp;</span>=
<span style=3D"color: #DD0000">'Pmin&nbsp;=3D&nbsp;'</span><span style=3D"c=
olor: #007700">.</span><span style=3D"color: #0000BB">$Pmin</span><span sty=
le=3D"color: #007700">;</span><span style=3D"color: #0000BB"></span></code>=
</code></pre>
<p>with this code I would like the min and the max of the last 10 records o=
f my database but obviously as soon as 'limit' is used the returned values =
are not good!
Do you have a way of doing that works please?
Thank you for your help</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Harachi!</p>
<p>Thank you for the good question.</p>
<p>Your queries don't work because LIMIT is indeed incompatible with the wa=
y you are using min and max. SQL operators work from left to right, so min =
and max are taken from the entire table ordered by timestamp, and then <em>=
only one row returned</em> gets limited to 10 rows.</p>
<p>The simplest solution would be to add a sub-query (not tested):</p>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;MAX</span><span=
 style=3D"color: #007700">(</span><span style=3D"color: #0000BB">price</spa=
n><span style=3D"color: #007700">)&nbsp;AS&nbsp;</span><span style=3D"color=
: #0000BB">Pmax&nbsp;</span><span style=3D"color: #007700">,&nbsp;</span><s=
pan style=3D"color: #0000BB">MIN</span><span style=3D"color: #007700">(</sp=
an><span style=3D"color: #0000BB">price</span><span style=3D"color: #007700=
">)&nbsp;AS&nbsp;</span><span style=3D"color: #0000BB">Pmin&nbsp;<br>FROM&n=
bsp;</span><span style=3D"color: #007700">(</span><span style=3D"color: #00=
00BB">SELECT&nbsp;price&nbsp;FROM&nbsp;book&nbsp;ORDER&nbsp;BY&nbsp;timesta=
mp&nbsp;DESC&nbsp;LIMIT&nbsp;0</span><span style=3D"color: #007700">,</span=
><span style=3D"color: #0000BB">10</span><span style=3D"color: #007700">)&n=
bsp;as&nbsp;</span><span style=3D"color: #0000BB">t</span><span style=3D"co=
lor: #007700">;</span><span style=3D"color: #0000BB"></span></code></code><=
/pre>
<p>Also note that the way you are taking a single value from the query is r=
ather peculiar, given PDO has a method for that already:</p>
<pre><code><code><span style=3D"color: #0000BB">$Pmax&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;(float)</span><span style=3D"color: #0000BB"=
>$connexion</span><span style=3D"color: #007700">-&gt;</span><span style=3D=
"color: #0000BB">query</span><span style=3D"color: #007700">(</span><span s=
tyle=3D"color: #DD0000">"SELECT&nbsp;..."</span><span style=3D"color: #0077=
00">)-&gt;</span><span style=3D"color: #0000BB">fetchColumn</span><span sty=
le=3D"color: #007700">();</span><span style=3D"color: #0000BB"></span></cod=
e></code></pre>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-576">
              <div class=3D"comment-author">
              	Zeef75, 06.11.18 23:37              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o, certainly off topic but I start ...
Already, very good article on PDO, I learned a lot.
My problem is that I have to resume a development written in C CLI that I h=
ave to adapt to the PDO. Of course I can not find any documentation.
Would you be so kind as to indicate a URL or can I find this information?</=
p>
<p>for example, how to program this function?</p>
<pre><code><code><span style=3D"color: #0000BB">int&nbsp;readconfig&nbsp;</=
span><span style=3D"color: #007700">()<br>{<br></span><span style=3D"color:=
 #0000BB">MYSQL&nbsp;mysql</span><span style=3D"color: #007700">;<br>&nbsp;=
&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">mysql_init&nbsp;</s=
pan><span style=3D"color: #007700">(&amp;&nbsp;</span><span style=3D"color:=
 #0000BB">mysql</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #0000BB">mysql_options&nbsp;</span><sp=
an style=3D"color: #007700">(&amp;&nbsp;</span><span style=3D"color: #0000B=
B">mysql</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"=
color: #0000BB">MYSQL_READ_DEFAULT_GROUP</span><span style=3D"color: #00770=
0">,&nbsp;</span><span style=3D"color: #DD0000">"option"</span><span style=
=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span><span sty=
le=3D"color: #0000BB">mysql_real_connect&nbsp;</span><span style=3D"color: =
#007700">(&amp;&nbsp;</span><span style=3D"color: #0000BB">mysql</span><spa=
n style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">mys=
ql_host</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"c=
olor: #0000BB">mysql_login</span><span style=3D"color: #007700">,&nbsp;</sp=
an><span style=3D"color: #0000BB">mysql_pwd</span><span style=3D"color: #00=
7700">,&nbsp;</span><span style=3D"color: #0000BB">mysql_db</span><span sty=
le=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">0</span>=
<span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB"=
>NULL</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"col=
or: #0000BB">0</span><span style=3D"color: #007700">))&nbsp;{<br>&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB"=
>mysql_query&nbsp;</span><span style=3D"color: #007700">(&amp;&nbsp;</span>=
<span style=3D"color: #0000BB">mysql</span><span style=3D"color: #007700">,=
&nbsp;</span><span style=3D"color: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;N=
etwho"</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">MYSQL_RES&nbsp=
;</span><span style=3D"color: #007700">*&nbsp;</span><span style=3D"color: =
#0000BB">result&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span>=
<span style=3D"color: #0000BB">NULL</span><span style=3D"color: #007700">;<=
br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"co=
lor: #0000BB">MYSQL_ROW&nbsp;row</span><span style=3D"color: #007700">;<br>=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color=
: #0000BB">result&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #0000BB">mysql_use_result&nbsp;</span><span style=
=3D"color: #007700">(&amp;&nbsp;</span><span style=3D"color: #0000BB">mysql=
</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;while&nbsp;((</span><span style=3D"color: #0000BB">row&nbs=
p;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"colo=
r: #0000BB">mysql_fetch_row&nbsp;</span><span style=3D"color: #007700">(</s=
pan><span style=3D"color: #0000BB">result</span><span style=3D"color: #0077=
00">)))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">Tconsign_p&nbsp;</span=
><span style=3D"color: #007700">=3D&nbsp;(float)&nbsp;</span><span style=3D=
"color: #0000BB">atof&nbsp;</span><span style=3D"color: #007700">(</span><s=
pan style=3D"color: #0000BB">row&nbsp;</span><span style=3D"color: #007700"=
>[</span><span style=3D"color: #0000BB">0</span><span style=3D"color: #0077=
00">]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #0000BB">Tconsign_c&nbsp;</span><span =
style=3D"color: #007700">=3D&nbsp;(float)&nbsp;</span><span style=3D"color:=
 #0000BB">atof&nbsp;</span><span style=3D"color: #007700">(</span><span sty=
le=3D"color: #0000BB">row&nbsp;</span><span style=3D"color: #007700">[</spa=
n><span style=3D"color: #0000BB">1</span><span style=3D"color: #007700">]);=
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">mysql_f=
ree_result&nbsp;</span><span style=3D"color: #007700">(</span><span style=
=3D"color: #0000BB">result</span><span style=3D"color: #007700">);<br>&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #00=
00BB">mysql_close&nbsp;</span><span style=3D"color: #007700">(&amp;&nbsp;</=
span><span style=3D"color: #0000BB">mysql</span><span style=3D"color: #0077=
00">);<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">syslog&n=
bsp;</span><span style=3D"color: #007700">(</span><span style=3D"color: #00=
00BB">LOG_INFO</span><span style=3D"color: #007700">,&nbsp;</span><span sty=
le=3D"color: #DD0000">"ERROR"</span><span style=3D"color: #007700">);<br>&n=
bsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span=
 style=3D"color: #0000BB">0</span><span style=3D"color: #007700">;<br>}</sp=
an><span style=3D"color: #0000BB"></span></code></code></pre>
<p>With my thanks</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Zeef!</p>
<p>That's a standard Mysql C API. To rewrite it to PHP/PDO, you basically n=
eed this:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">function&nbsp;</span><span style=3D"color: #0000BB">readconfig&n=
bsp;</span><span style=3D"color: #007700">(</span><span style=3D"color: #00=
00BB">$pdo</span><span style=3D"color: #007700">)<br>{<br>&nbsp;&nbsp;&nbsp=
;&nbsp;global&nbsp;</span><span style=3D"color: #0000BB">$Tconsign_p</span>=
<span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB"=
>$Tconsign_c</span><span style=3D"color: #007700">;<br><br>&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</sp=
an><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB=
">query</span><span style=3D"color: #007700">(</span><span style=3D"color: =
#DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;Netwho"</span><span style=3D"color: =
#007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;((</span><span style=3D"c=
olor: #0000BB">$row&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</s=
pan><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #00770=
0">-&gt;</span><span style=3D"color: #0000BB">fetch</span><span style=3D"co=
lor: #007700">(</span><span style=3D"color: #0000BB">PDO</span><span style=
=3D"color: #007700">::</span><span style=3D"color: #0000BB">FETCH_NUM</span=
><span style=3D"color: #007700">)))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$Tconsign_p&nbsp;<=
/span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: =
#0000BB">$row&nbsp;</span><span style=3D"color: #007700">[</span><span styl=
e=3D"color: #0000BB">0</span><span style=3D"color: #007700">];<br>&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB=
">$Tconsign_c&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><s=
pan style=3D"color: #0000BB">$row</span><span style=3D"color: #007700">[</s=
pan><span style=3D"color: #0000BB">1</span><span style=3D"color: #007700">]=
;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</span><span style=3D"color: #0000BB"></=
span></code></code></pre>
<p>note that the function is called with a parameter $pdo, which should be =
a valid <a href=3D"https://phpdelusions.net/pdo_examples/connect_to_mysql">=
PDO instance</a> created before.</p>
<p>The function is written to the best of my C knowledge (which is very lim=
ited), so it could be wrong.
Feel free to ask any questions, I'll be happy to help.</p>              </d=
iv>
            </li>
=20
            <li class=3D"comment" id=3D"comment-571">
              <div class=3D"comment-author">
              	Ezeribe Adolf, 30.10.18 02:51              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Plea=
se accept my gratitude for your kindness and willingness to take questions =
and sacrifice your time for me and a host of others.
My question:
In the Catch Block, following the $pdo instantiation, a backslash preceded =
the PDOException. What role is the slash performing there?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Adolf!</p>
<p>Thank you for your kind words!</p>
<p>A backslash here denotes a <a href=3D"http://php.net/manual/en/language.=
namespaces.php">namespace</a> - a relatively new concept in PHP. </p>
<p>It does not affect your code if you don't use namespaces but prevents an=
 error/confusion if you do. Basically all PHP built-in classes are in the r=
oot namespace, so just a single backslash means - the root namespace.</p>  =
            </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-564">
              <div class=3D"comment-author">
              	Madapakas, 11.10.18 18:56              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o Thanks for PDO Examples :D Very Helpful &lt;3</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-558">
              <div class=3D"comment-author">
              	Najam, 28.09.18 15:19              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>That=
 is one fine article about PDO. Thanks a million.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-550">
              <div class=3D"comment-author">
              	moose, 14.09.18 01:03              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>$opt=
 does not equal $options, see below.</p>
<pre><code><code><span style=3D"color: #0000BB">$opt&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;[<br></span><span style=3D"color: #0000BB">PD=
O</span><span style=3D"color: #007700">::</span><span style=3D"color: #0000=
BB">ATTR_ERRMODE&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</=
span><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700=
">::</span><span style=3D"color: #0000BB">ERRMODE_EXCEPTION</span><span sty=
le=3D"color: #007700">,<br></span><span style=3D"color: #0000BB">PDO</span>=
<span style=3D"color: #007700">::</span><span style=3D"color: #0000BB">ATTR=
_DEFAULT_FETCH_MODE&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp=
;</span><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #007=
700">::</span><span style=3D"color: #0000BB">FETCH_ASSOC</span><span style=
=3D"color: #007700">,<br></span><span style=3D"color: #0000BB">PDO</span><s=
pan style=3D"color: #007700">::</span><span style=3D"color: #0000BB">ATTR_E=
MULATE_PREPARES&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</s=
pan><span style=3D"color: #0000BB">false</span><span style=3D"color: #00770=
0">,</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>];</p>
<p>try {
$pdo =3D new PDO($dsn, $user, $pass, $options);
}</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello moose!</p>
<p>Thank you very much, fixed!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-542">
              <div class=3D"comment-author">
              	Joseph Milumbe, 02.09.18 23:46              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Can =
you make a PDF version of this walk-through?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-535">
              <div class=3D"comment-author">
              	Jeff, 14.08.18 04:22              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>You'=
re doing god's work.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-530">
              <div class=3D"comment-author">
              	Stephen Austin, 07.08.18 18:28              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I am=
 a novice.
I want to build a scoring application for a 'cricket' sports match which wi=
ll involve a lot of real time inserting recalculation and updating and outp=
utting.
I've set up WampServer, I know I can build the Database and tables.
Because of all the good things I've heard about PDO and because I will need=
 to be connected to Mysql for about six hours straight,
My question is,
Do you think that this is the best or a good way to approach such a project=
. (Software wise)?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Stephen!</p>
<p>Yes, of course, PDO is the best API a novice could choose. </p>
<p>Please note that unless you are using websockets, there won't be a const=
ant connection to a database. By default, PHP processes are atomic, a reque=
st initiated from a browser makes a php script run, return the requested da=
ta, and die. So it connects to a database every time. A very good and simpl=
e model.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-529">
              <div class=3D"comment-author">
              	Jeff Hawkins, 02.08.18 01:59              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Grea=
t stuff, but... I've posted a question at stackexchange for "PHP 7.2.8 PDO =
Fails to Connect to MySQL 8.0.12" that you may be interested in:
<a href=3D"https://serverfault.com/questions/924367/php-7-2-8-pdo-fails-to-=
connect-to-mysql-8-0-12-ga-in-aws-ec2-lemp-stack">https://serverfault.com/q=
uestions/924367/php-7-2-8-pdo-fails-to-connect-to-mysql-8-0-12-ga-in-aws-ec=
2-lemp-stack</a></p>
<p>In short, I used your advice above to write code more than a year ago, t=
hat has worked great with PHP 7.0 and MySQL 5.7. But though all other conne=
ctions that I can think of to this MySQL work, PHP will not connect. Have t=
ried many things so far. Wondering if you will have better ideas.</p>
<p>Thanks much.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Jeff!</p>
<p>Glad you got your case resolved.
I had no idea of this issue and had nothing to offer but now I see it was r=
esolved.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-523">
              <div class=3D"comment-author">
              	Benedict, 23.07.18 19:07              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>This=
 is tutorial is superb. I would advice that you compile this into a book.</=
p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-517">
              <div class=3D"comment-author">
              	Henry, 22.06.18 20:47              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>When=
 is it OK NOT to use parameter binding, and when should you REALLY use it? =
 Use when there is user input, or data being passed from one page to anothe=
r (PHP)?  Don't need to use when getting data within the same code page wit=
hout any input except for the code itself?  Would appreciate our opinion.  =
Thanks!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Henry!</p>
<p>Thank you for the good question. There is indeed too much misunderstandi=
ng in the matter. So let's make it straight:</p>
<p>In the article it is explicitly stated as:</p>
<blockquote>
<p><strong>for every query you run, if at least one variable is going to be=
 used, you have to substitute it with a placeholder, then prepare your quer=
y, and then execute it, passing variables separately</strong></p>
</blockquote>
<p>Notice that there is <strong>not a single condition</strong> you mention=
ed in your comment like "user input", "data within the same code page" and =
such. Simply because all these terms are essentially vague and uncertain. T=
here is no certain definition  for "user input". Different people take it d=
ifferently, with catastrophic results. The moment you start separating the =
seep from the goat, the "clean" data from "unclean", the moment you are mak=
ing your first step to disaster. </p>
<p>Remember, every application evolves over time. And something that has be=
en hardcoded for ten years, one day becomes dynamically changed and dangero=
us. Why take chances? Why base your decision empty musings instead of follo=
wing one simple rule - any variable that goes into query should be substitu=
ted with a placeholder, regardless of the source.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-515">
              <div class=3D"comment-author">
              	Erik, 20.06.18 14:10              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>user=
 interface for upload a photo</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">&lt;</span><span style=3D"color: #0000BB">div&nbsp;</span><span =
style=3D"color: #007700">class=3D</span><span style=3D"color: #DD0000">"col=
-md-3"</span><span style=3D"color: #007700">&gt;<br>&lt;</span><span style=
=3D"color: #0000BB">form&nbsp;</span><span style=3D"color: #007700">class=
=3D</span><span style=3D"color: #DD0000">"form-group"&nbsp;</span><span sty=
le=3D"color: #0000BB">method</span><span style=3D"color: #007700">=3D</span=
><span style=3D"color: #DD0000">"POST"&nbsp;</span><span style=3D"color: #0=
000BB">enctype</span><span style=3D"color: #007700">=3D</span><span style=
=3D"color: #DD0000">"multipart/data-form"</span><span style=3D"color: #0077=
00">&gt;<br>&lt;</span><span style=3D"color: #0000BB">label&nbsp;</span><sp=
an style=3D"color: #007700">for=3D</span><span style=3D"color: #DD0000">"av=
atar"</span><span style=3D"color: #007700">&gt;</span><span style=3D"color:=
 #0000BB">Upload&nbsp;Avatar</span><span style=3D"color: #007700">&lt;/</sp=
an><span style=3D"color: #0000BB">label</span><span style=3D"color: #007700=
">&gt;<br>&lt;</span><span style=3D"color: #0000BB">input&nbsp;type</span><=
span style=3D"color: #007700">=3D</span><span style=3D"color: #DD0000">"fil=
e"&nbsp;</span><span style=3D"color: #0000BB">name</span><span style=3D"col=
or: #007700">=3D</span><span style=3D"color: #DD0000">"avatar"&nbsp;</span>=
<span style=3D"color: #007700">class=3D</span><span style=3D"color: #DD0000=
">"form-control"&nbsp;</span><span style=3D"color: #0000BB">required</span>=
<span style=3D"color: #007700">&gt;<br>&lt;</span><span style=3D"color: #00=
00BB">p&nbsp;</span><span style=3D"color: #007700">class=3D</span><span sty=
le=3D"color: #DD0000">"help-block"</span><span style=3D"color: #007700">&gt=
;</span><span style=3D"color: #0000BB">we&nbsp;accepted&nbsp;2&nbsp;mb&nbsp=
;file&nbsp;only</span><span style=3D"color: #007700">!!&lt;/</span><span st=
yle=3D"color: #0000BB">p</span><span style=3D"color: #007700">&gt;<br>&lt;<=
/span><span style=3D"color: #0000BB">input&nbsp;type</span><span style=3D"c=
olor: #007700">=3D</span><span style=3D"color: #DD0000">"submit"&nbsp;</spa=
n><span style=3D"color: #0000BB">name</span><span style=3D"color: #007700">=
=3D</span><span style=3D"color: #DD0000">"upload"&nbsp;</span><span style=
=3D"color: #0000BB">value</span><span style=3D"color: #007700">=3D</span><s=
pan style=3D"color: #DD0000">"Upload&nbsp;Avatar"</span><span style=3D"colo=
r: #007700">&gt;</span><span style=3D"color: #0000BB"></span></code></code>=
</pre>
<p>for transaction</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if(isset(</span><span style=3D"color: #0000BB">$_POST</span><spa=
n style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'upload'<=
/span><span style=3D"color: #007700">])){<br>&nbsp;&nbsp;&nbsp;&nbsp;</span=
><span style=3D"color: #0000BB">$file&nbsp;</span><span style=3D"color: #00=
7700">=3D&nbsp;</span><span style=3D"color: #0000BB">$_FILES</span><span st=
yle=3D"color: #007700">[</span><span style=3D"color: #DD0000">"avatar"</spa=
n><span style=3D"color: #007700">][</span><span style=3D"color: #DD0000">"t=
mp_name"</span><span style=3D"color: #007700">];<br>&nbsp;&nbsp;&nbsp;&nbsp=
;</span><span style=3D"color: #0000BB">$dir&nbsp;</span><span style=3D"colo=
r: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"upload/"</span>=
<span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span st=
yle=3D"color: #0000BB">$path&nbsp;</span><span style=3D"color: #007700">=3D=
&nbsp;</span><span style=3D"color: #0000BB">$dir</span><span style=3D"color=
: #007700">.</span><span style=3D"color: #0000BB">$file</span><span style=
=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;if(</span><span style=3D"c=
olor: #0000BB">move_uploaded_file</span><span style=3D"color: #007700">(</s=
pan><span style=3D"color: #0000BB">$path</span><span style=3D"color: #00770=
0">,&nbsp;</span><span style=3D"color: #0000BB">$dir</span><span style=3D"c=
olor: #007700">)){;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color:=
 #0000BB">$db</span><span style=3D"color: #007700">-&gt;</span><span style=
=3D"color: #0000BB">setAttribute</span><span style=3D"color: #007700">(</sp=
an><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">=
::</span><span style=3D"color: #0000BB">ATTR_ERRMODE</span><span style=3D"c=
olor: #007700">,&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span=
 style=3D"color: #007700">::</span><span style=3D"color: #0000BB">ERRMODE_E=
XCEPTION</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp=
;</span><span style=3D"color: #0000BB">$user_id&nbsp;</span><span style=3D"=
color: #007700">=3D&nbsp;(int)</span><span style=3D"color: #0000BB">$_SESSI=
ON</span><span style=3D"color: #007700">[</span><span style=3D"color: #DD00=
00">'namauser'</span><span style=3D"color: #007700">];<br>&nbsp;&nbsp;&nbsp=
;&nbsp;</span><span style=3D"color: #0000BB">$insert_photo&nbsp;</span><spa=
n style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$=
db</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #=
0000BB">query</span><span style=3D"color: #007700">(</span><span style=3D"c=
olor: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;member&nbsp;WHERE&nbsp;namause=
r&nbsp;=3D&nbsp;'"&nbsp;</span><span style=3D"color: #007700">.&nbsp;</span=
><span style=3D"color: #0000BB">$_SESSION</span><span style=3D"color: #0077=
00">[</span><span style=3D"color: #DD0000">'namauser'</span><span style=3D"=
color: #007700">]&nbsp;.&nbsp;</span><span style=3D"color: #DD0000">"'"</sp=
an><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><spa=
n style=3D"color: #0000BB">$sql&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;</span><span style=3D"color: #0000BB">$db</span><span style=3D"col=
or: #007700">-&gt;</span><span style=3D"color: #0000BB">query</span><span s=
tyle=3D"color: #007700">(</span><span style=3D"color: #DD0000">"INSERT&nbsp=
;INTO&nbsp;avatar&nbsp;VALUES&nbsp;('0',&nbsp;'</span><span style=3D"color:=
 #0000BB">$path</span><span style=3D"color: #DD0000">',&nbsp;'</span><span =
style=3D"color: #0000BB">$user_id</span><span style=3D"color: #DD0000">',&n=
bsp;NOW())"</span><span style=3D"color: #007700">);<br>}else{<br>&nbsp;&nbs=
p;&nbsp;&nbsp;echo&nbsp;</span><span style=3D"color: #DD0000">'&lt;script&n=
bsp;type=3D"text/javascript"&gt;alert("Sorry,&nbsp;the&nbsp;data&nbsp;canno=
t&nbsp;be&nbsp;processed");&lt;/script&gt;'</span><span style=3D"color: #00=
7700">;<br>}<br>}<br>&lt;/</span><span style=3D"color: #0000BB">form</span>=
<span style=3D"color: #007700">&gt;</span><span style=3D"color: #0000BB"></=
span></code></code></pre>
<p>// this part of user profile picture preview</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">&lt;</span><span style=3D"color: #0000BB">div&nbsp;</span><span =
style=3D"color: #007700">class=3D</span><span style=3D"color: #DD0000">"col=
-md-6"</span><span style=3D"color: #007700">&gt;<br>&lt;?</span><span style=
=3D"color: #0000BB">php<br>&nbsp;&nbsp;&nbsp;&nbsp;$ambilphoto&nbsp;</span>=
<span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000B=
B">$db</span><span style=3D"color: #007700">-&gt;</span><span style=3D"colo=
r: #0000BB">query</span><span style=3D"color: #007700">(</span><span style=
=3D"color: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;avatar"</span><span style=
=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"col=
or: #0000BB">$photo&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</s=
pan><span style=3D"color: #0000BB">$ambilphoto</span><span style=3D"color: =
#007700">-&gt;</span><span style=3D"color: #0000BB">fetch</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #0000BB">PDO</span><span =
style=3D"color: #007700">::</span><span style=3D"color: #0000BB">FETCH_ASSO=
C</span><span style=3D"color: #007700">);<br></span><span style=3D"color: #=
0000BB">?&gt;<br></span>&lt;h2&nbsp;class=3D"text-center&nbsp;text-muted"&g=
t;Apakah&nbsp;ini&nbsp;photo&nbsp;anda?&lt;/h2&gt;<br>&nbsp;&nbsp;&nbsp;&nb=
sp;&lt;img&nbsp;src=3D"<span style=3D"color: #0000BB">&lt;?=3D$photo</span>=
<span style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'avat=
ar'</span><span style=3D"color: #007700">]</span><span style=3D"color: #000=
0BB">?&gt;</span>"&nbsp;class=3D"img-responsive"&nbsp;style=3D"width:5<br>&=
nbsp;&nbsp;&nbsp;&nbsp;0%;&nbsp;height:auto;"&gt;<br>&lt;/div&gt;?&gt;
</code></code></pre>
<p>I have already tried googling anywhere but has no result, when i remembe=
r i have bookmarked your page, then I open it.
I cannot upload my photo with this.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Erik!</p>
<p>At least I an see that enctype=3D"multipart/data-form" part is wrong. It=
 should be enctype=3D"multipart/form-data".</p>
<p>There could be other issues as well. But it makes very little sense in p=
osting a code and asking what is wrong with it. Humans are not intended to =
run a code mentally, it's a job for a computer. So you have to run your cod=
e, make sure that all possible error reporting is on and start debugging. T=
o tell you truth, debugging is the main occupations for any programmer. So =
it is not writing a program that takes most time but finding out why doesn'=
t it work.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-513">
              <div class=3D"comment-author">
              	Erik, 17.06.18 17:55              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><blockq=
uote>
</blockquote>
<pre><code><code><span style=3D"color: #0000BB">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$id_user&nbsp;</span><span sty=
le=3D"color: #007700">=3D(int)</span><span style=3D"color: #0000BB">$_SESSI=
ON</span><span style=3D"color: #007700">[</span><span style=3D"color: #DD00=
00">'id'</span><span style=3D"color: #007700">];<br>&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"colo=
r: #0000BB">$userdata&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;<=
/span><span style=3D"color: #0000BB">$db</span><span style=3D"color: #00770=
0">-&gt;</span><span style=3D"color: #0000BB">prepare</span><span style=3D"=
color: #007700">(</span><span style=3D"color: #DD0000">"SELECT&nbsp;*&nbsp;=
FROM&nbsp;member&nbsp;WHERE&nbsp;id&nbsp;=3D&nbsp;?"</span><span style=3D"c=
olor: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$userdata</span><sp=
an style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">exec=
ute</span><span style=3D"color: #007700">([</span><span style=3D"color: #00=
00BB">$_SESSION</span><span style=3D"color: #007700">[</span><span style=3D=
"color: #DD0000">'id'</span><span style=3D"color: #007700">]]);<br>&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><spa=
n style=3D"color: #0000BB">$usr&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;</span><span style=3D"color: #0000BB">$userdata</span><span style=
=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">fetch</span>=
<span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">PDO</=
span><span style=3D"color: #007700">::</span><span style=3D"color: #0000BB"=
>FETCH_ASSOC</span><span style=3D"color: #007700">);<br><br>&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=3D"color: #0000BB">=
tr</span><span style=3D"color: #007700">&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=3D"colo=
r: #0000BB">td</span><span style=3D"color: #007700">&gt;&lt;?=3D</span><spa=
n style=3D"color: #0000BB">$usr</span><span style=3D"color: #007700">[</spa=
n><span style=3D"color: #DD0000">'id'</span><span style=3D"color: #007700">=
]</span><span style=3D"color: #0000BB">?&gt;</span>&lt;/td&gt;<br>&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;<s=
pan style=3D"color: #0000BB">&lt;?=3D$usr</span><span style=3D"color: #0077=
00">[</span><span style=3D"color: #DD0000">'usernama'</span><span style=3D"=
color: #007700">]</span><span style=3D"color: #0000BB">?&gt;</span>&lt;/td&=
gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&lt;td&gt;<span style=3D"color: #0000BB">&lt;?=3D$usr</span><span style=
=3D"color: #007700">[</span><span style=3D"color: #DD0000">'nomorhp'</span>=
<span style=3D"color: #007700">]</span><span style=3D"color: #0000BB">?&gt;=
</span>&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&lt;td&gt;<span style=3D"color: #0000BB">&lt;?=3D$usr</s=
pan><span style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'=
email'</span><span style=3D"color: #007700">]</span><span style=3D"color: #=
0000BB">?&gt;</span>&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;<span style=3D"color: #0000BB">&l=
t;?=3D$usr</span><span style=3D"color: #007700">[</span><span style=3D"colo=
r: #DD0000">'password'</span><span style=3D"color: #007700">]</span><span s=
tyle=3D"color: #0000BB">?&gt;</span>&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;<span style=3D"co=
lor: #0000BB">&lt;?=3D$usr</span><span style=3D"color: #007700">[</span><sp=
an style=3D"color: #DD0000">'kelas'</span><span style=3D"color: #007700">]<=
/span><span style=3D"color: #0000BB">?&gt;</span>&lt;/td&gt;<br>&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;<spa=
n style=3D"color: #0000BB">&lt;?=3D$usr</span><span style=3D"color: #007700=
">[</span><span style=3D"color: #DD0000">'jurusan'</span><span style=3D"col=
or: #007700">]</span><span style=3D"color: #0000BB">?&gt;</span>&lt;/td&gt;=
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&lt;td&gt;<span style=3D"color: #0000BB">&lt;?=3D$usr</span><span style=3D=
"color: #007700">[</span><span style=3D"color: #DD0000">'kabupaten'</span><=
span style=3D"color: #007700">]</span><span style=3D"color: #0000BB">?&gt;<=
/span>&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/t=
r&gt;?&gt;
</code></code></pre>
<blockquote>
<p>I've used to your code given, but I do beg your pardon, I cannot see the=
 data I need, I just see white screen whit table head data.</p>
</blockquote></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>This code should work, given there is a c=
losing PHP tag ?&gt; between PHP and HTML</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-512">
              <div class=3D"comment-author">
              	Erik, 17.06.18 11:42              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>code=
:</p>
<pre><code><code><span style=3D"color: #0000BB">&nbsp;&nbsp;&nbsp;&nbsp;</s=
pan><span style=3D"color: #007700">&lt;?</span><span style=3D"color: #0000B=
B">php&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$id_user&nb=
sp;</span><span style=3D"color: #007700">=3D(int)</span><span style=3D"colo=
r: #0000BB">$_SESSION</span><span style=3D"color: #007700">[</span><span st=
yle=3D"color: #DD0000">'id'</span><span style=3D"color: #007700">];<br>&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0=
000BB">$userdata&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span=
><span style=3D"color: #0000BB">$db</span><span style=3D"color: #007700">-&=
gt;</span><span style=3D"color: #0000BB">prepare</span><span style=3D"color=
: #007700">(</span><span style=3D"color: #DD0000">"SELECT&nbsp;*&nbsp;FROM&=
nbsp;member&nbsp;WHERE&nbsp;id&nbsp;=3D&nbsp;?"</span><span style=3D"color:=
 #007700">,</span><span style=3D"color: #DD0000">'$id_user'</span><span sty=
le=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</span><span style=3D"color: #0000BB">$userdata</span><span style=3D"color=
: #007700">-&gt;</span><span style=3D"color: #0000BB">binparam</span><span =
style=3D"color: #007700">(</span><span style=3D"color: #DD0000">':$_SESSION=
['</span><span style=3D"color: #0000BB">id</span><span style=3D"color: #DD0=
000">']'</span><span style=3D"color: #007700">,?);<br>&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$userdata<=
/span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #000=
0BB">execute</span><span style=3D"color: #007700">();<br>&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$usr&nb=
sp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"col=
or: #0000BB">$userdata</span><span style=3D"color: #007700">-&gt;</span><sp=
an style=3D"color: #0000BB">fetch</span><span style=3D"color: #007700">(</s=
pan><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700"=
>::</span><span style=3D"color: #0000BB">FETCH_ASSOC</span><span style=3D"c=
olor: #007700">);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"colo=
r: #0000BB">?&gt;<br></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&lt;td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=3D"color: #0000B=
B">&lt;?=3D$usr</span><span style=3D"color: #007700">[</span><span style=3D=
"color: #DD0000">'user&nbsp;data'</span><span style=3D"color: #007700">]&nb=
sp;</span><span style=3D"color: #FF8000">//how&nbsp;to&nbsp;fetch&nbsp;whol=
e&nbsp;user&nbsp;(login)&nbsp;data&nbsp;here?'</span><span style=3D"color: =
#0000BB">?&gt;<br></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tbody&gt;<br>&lt;/tab=
le&gt;<br>&lt;/div&gt;?&gt;
</code></code></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Erik!</p>
<p>You have problem in your code. it should be </p>
<pre><code><code><span style=3D"color: #0000BB">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;$id_user&nbsp;</span><span style=3D"color: #007700">=
=3D(int)</span><span style=3D"color: #0000BB">$_SESSION</span><span style=
=3D"color: #007700">[</span><span style=3D"color: #DD0000">'id'</span><span=
 style=3D"color: #007700">];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</span><span style=3D"color: #0000BB">$userdata&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$db</sp=
an><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB=
">prepare</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;member&nbsp;WHERE&nbsp;id&nbsp;=3D=
&nbsp;?"</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$userdata</s=
pan><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000B=
B">execute</span><span style=3D"color: #007700">([</span><span style=3D"col=
or: #0000BB">$_SESSION</span><span style=3D"color: #007700">[</span><span s=
tyle=3D"color: #DD0000">'id'</span><span style=3D"color: #007700">]]);<br>&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color:=
 #0000BB">$usr&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><=
span style=3D"color: #0000BB">$userdata</span><span style=3D"color: #007700=
">-&gt;</span><span style=3D"color: #0000BB">fetch</span><span style=3D"col=
or: #007700">(</span><span style=3D"color: #0000BB">PDO</span><span style=
=3D"color: #007700">::</span><span style=3D"color: #0000BB">FETCH_ASSOC</sp=
an><span style=3D"color: #007700">);</span><span style=3D"color: #0000BB"><=
/span></code></code></pre>
<p>Then you can display all the user data that is already fetched. You need=
 to know the column names in order to display them though. </p>
<p>For example, if there is a name column, you can display it using $usr['n=
ame'] and so on.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-511">
              <div class=3D"comment-author">
              	Sebastian Wallace, 12.06.18 23:23              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>What=
 a fantastic article. Very helpful, packed full of information! Many thanks=
.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-509">
              <div class=3D"comment-author">
              	Developer, 07.06.18 21:17              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Exce=
lent article! Answered some of my questions right up !</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-476">
              <div class=3D"comment-author">
              	Johnny B, 18.04.18 21:18              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,
I was wondering if you could do a simple client/server pdo api example? I h=
ave been unable to find an examples/tutorials for a simple one. This should=
 be geared towards having an application log data and then submit it either=
 php or json/js to a remote DB site. I have made it work without an api, an=
d with a simple php api . However I fail to be able to do this with PDO. It=
 is not as simple as one would think.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Johnny!</p>
<p>You are probably mistaking PDO with something else. PDO is simply a data=
base API, it knows nothing of json/js or application log data. It belongs t=
o that "remote DB site" only. How this site is called is of no PDO's concer=
n. In short, PDO is just a function to run your SQL query against a databas=
e server, no more. </p>
<p>Such a client/server pdo api example simply doesn't exist. The only serv=
er PDO talks to is a database server. Whereas any API is always implemented=
 in PHP, which, in turn, uses PDO to query a database.</p>              </d=
iv>
            </li>
=20
            <li class=3D"comment" id=3D"comment-465">
              <div class=3D"comment-author">
              	Script47, 15.04.18 08:07              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>This=
 resource you have come up with is extremely helpful, especially the parts =
where you explain where prepared statements can be used.</p>
<p>Thank you for all the effort you put in to it.</p>
<p>In the transaction section when you make mention of the rollback functio=
n, is it not meant to be in camel case as shown in the documentation?</p>
<p>(<a href=3D"http://php.net/manual/en/pdo.rollback.php">http://php.net/ma=
nual/en/pdo.rollback.php</a>)</p>
<p>Have you considered writing articles on design patterns and or generic a=
rticles regarding writing smarter code in general?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello!</p>
<p>In PHP, function and method names are case-insensitive, so technically i=
t could be anything. </p>
<p>Although it could make sense to use a camel case to separate different w=
ords in the method name, "rollback" is the established term by itself in a =
database word and could be count as a whole word, thus making it unnecessar=
y to use a camel case in it.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-462">
              <div class=3D"comment-author">
              	Marvin, 11.04.18 17:14              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Does=
 this statement prevent sql injection or does it turn emulation mode off??<=
/p>
<p>setAttribute(PDO::ATTR_EMULATE_PREPARES, false);</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Marvin!</p>
<p>It does turn emulation mode off</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-461">
              <div class=3D"comment-author">
              	Greg, 10.04.18 21:17              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Rega=
rding the following error when using PDO fetch():</p>
<blockquote>
<p>General error: 2014 Cannot execute queries while other unbuffered querie=
s are active.  Consider using PDOStatement::fetchAll().  Alternatively, if =
your code is only ever going to run against mysql, you may enable query buf=
fering by setting the PDO::MYSQL_ATTR_USE_BUFFERED_QUERY attribute.</p>
</blockquote>
<p>It seems as though there are multiple ways to fix this, however I'm real=
ly curious what YOU would recommend. There are so many differing opinions o=
nline, however yours is the only one I actually trust, so I thought I would=
 ask you directly.</p>
<p>The possible fixes seem to be:</p>
<ul>
<li>Changing all fetch() instances to fetchAll() (which would require some =
additional code re-writing)</li>
<li>If only using MySQL, enable MYSQL_ATTR_USE_BUFFERED_QUERY (it seems lik=
e this fix might not work 100% of the time)</li>
<li>Using closeCursor after fetch() calls</li>
</ul>
<p>Are there any of these methods that you prefer? Or NOT prefer?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Greg!</p>
<p>This error can be caused by different problems. Therefore different solu=
tions.</p>
<p>Most of time you should never see such an error at all. The only plausib=
le case could be caused by a stored procedure, and should be treated as exp=
lained in the corresponding chapter.</p>
<p>If you have a certain scenario in mind, please share, I'll try to sort i=
t out</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-451">
              <div class=3D"comment-author">
              	eFko, 04.04.18 22:54              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>$stm=
t =3D $pdo-&gt;prepare("SELECT value FROM table WHERE id=3D?");
$stmt-&gt;execute([$_GET['id']]);
$data =3D $stmt-&gt;fetchColumn();
if ($data){
if ($data=3D=3D0){
// do something
} else {
// do something else
}
} else {
// do default action
}</p>
<p>If value is 0, this code always do default action. How to select only on=
e column a check it when this column is 0?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello eFko!</p>
<p>If I get you right, instead of <code>if($data)</code> you can test for F=
ALSE value with strict comparison in the first condition:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if&nbsp;(</span><span style=3D"color: #0000BB">$data&nbsp;</span=
><span style=3D"color: #007700">!=3D=3D&nbsp;</span><span style=3D"color: #=
0000BB">false</span><span style=3D"color: #007700">){</span><span style=3D"=
color: #0000BB"></span></code></code></pre>
<p>should do something when $data =3D 0</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-447">
              <div class=3D"comment-author">
              	tharring, 27.03.18 20:04              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>That=
 was it! I closed the &lt;input&gt; tag too soon. I also needed to remove i=
d=3D for every input field, including the submit button, which I changed fr=
om type=3D"button" to type=3D"submit". Now everything works! I as able to i=
nsert into select fields in the table, not all fields.  Thanks so much for =
your help!</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-446">
              <div class=3D"comment-author">
              	tharring, 27.03.18 05:52              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>You =
are not showing an INSERT example and I really need help using a FORM and g=
etting the info from the form into the db. AMPPS says I'm using php7 but my=
 exports say it's 5.6.37. Here's my info and using php tags:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">include&nbsp;</span><span style=3D"color: #DD0000">"localpdo.php=
"</span><span style=3D"color: #007700">;<br>if&nbsp;(isset(</span><span sty=
le=3D"color: #0000BB">$_POST</span><span style=3D"color: #007700">[</span><=
span style=3D"color: #DD0000">'insert'</span><span style=3D"color: #007700"=
>]))&nbsp;{&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"co=
lor: #FF8000">//&nbsp;Prepare&nbsp;the&nbsp;SQL&nbsp;query<br>&nbsp;&nbsp;&=
nbsp;&nbsp;</span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$conn=
</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #00=
00BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"c=
olor: #DD0000">"INSERT&nbsp;INTO&nbsp;timesheet&nbsp;(vol_id,&nbsp;flag)&nb=
sp;VALUES(:vol_id,:flag)"</span><span style=3D"color: #007700">);<br>&nbsp;=
&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><span s=
tyle=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">bindPara=
m</span><span style=3D"color: #007700">(</span><span style=3D"color: #DD000=
0">'vol_id'</span><span style=3D"color: #007700">,&nbsp;</span><span style=
=3D"color: #0000BB">$_POST</span><span style=3D"color: #007700">[</span><sp=
an style=3D"color: #DD0000">'vol_id'</span><span style=3D"color: #007700">]=
,&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=3D"color=
: #007700">::</span><span style=3D"color: #0000BB">PARAM_INT</span><span st=
yle=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"=
color: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><spa=
n style=3D"color: #0000BB">bindParam</span><span style=3D"color: #007700">(=
</span><span style=3D"color: #DD0000">'flag'</span><span style=3D"color: #0=
07700">,&nbsp;</span><span style=3D"color: #0000BB">$_POST</span><span styl=
e=3D"color: #007700">[</span><span style=3D"color: #DD0000">'flag'</span><s=
pan style=3D"color: #007700">],&nbsp;</span><span style=3D"color: #0000BB">=
PDO</span><span style=3D"color: #007700">::</span><span style=3D"color: #00=
00BB">PARAM_STR</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><span style=3D"co=
lor: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><spa=
n style=3D"color: #007700">();<br>}&nbsp;else&nbsp;{&nbsp;</span><span styl=
e=3D"color: #FF8000">//&nbsp;}<br></span><span style=3D"color: #007700">-&n=
bsp;-&nbsp;-&nbsp;<br>&lt;</span><span style=3D"color: #0000BB">form&nbsp;n=
ame</span><span style=3D"color: #007700">=3D</span><span style=3D"color: #D=
D0000">"form1"&nbsp;</span><span style=3D"color: #0000BB">method</span><spa=
n style=3D"color: #007700">=3D</span><span style=3D"color: #DD0000">"post"&=
nbsp;</span><span style=3D"color: #0000BB">action</span><span style=3D"colo=
r: #007700">=3D</span><span style=3D"color: #DD0000">""</span><span style=
=3D"color: #007700">&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=
=3D"color: #0000BB">input&nbsp;type</span><span style=3D"color: #007700">=
=3D</span><span style=3D"color: #DD0000">"text"&nbsp;</span><span style=3D"=
color: #0000BB">name</span><span style=3D"color: #007700">=3D</span><span s=
tyle=3D"color: #DD0000">"vol_id"&nbsp;</span><span style=3D"color: #0000BB"=
>id</span><span style=3D"color: #007700">=3D</span><span style=3D"color: #D=
D0000">"vol_id"</span><span style=3D"color: #007700">&gt;<br>&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;?</span><span style=3D"color: #0000BB=
">php&nbsp;</span><span style=3D"color: #007700">if&nbsp;(isset(</span><spa=
n style=3D"color: #0000BB">$_POST</span><span style=3D"color: #007700">[</s=
pan><span style=3D"color: #DD0000">'vol_id'</span><span style=3D"color: #00=
7700">])&nbsp;=3D=3D=3D&nbsp;</span><span style=3D"color: #0000BB">true</sp=
an><span style=3D"color: #007700">)&nbsp;{&nbsp;echo&nbsp;</span><span styl=
e=3D"color: #DD0000">'value=3D"'</span><span style=3D"color: #007700">,&nbs=
p;</span><span style=3D"color: #0000BB">$_POST</span><span style=3D"color: =
#007700">[</span><span style=3D"color: #DD0000">'vol_id'</span><span style=
=3D"color: #007700">],&nbsp;</span><span style=3D"color: #DD0000">'"'</span=
><span style=3D"color: #007700">;&nbsp;}&nbsp;</span><span style=3D"color: =
#0000BB">?&gt;<br></span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=3D"tex=
t"&nbsp;name=3D"flag"&nbsp;id=3D"flag"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;<span style=3D"color: #0000BB">&lt;?php&nbsp;</span><spa=
n style=3D"color: #007700">if&nbsp;(isset(</span><span style=3D"color: #000=
0BB">$_POST</span><span style=3D"color: #007700">[</span><span style=3D"col=
or: #DD0000">'flag'</span><span style=3D"color: #007700">])&nbsp;=3D=3D=3D&=
nbsp;</span><span style=3D"color: #0000BB">true</span><span style=3D"color:=
 #007700">)&nbsp;{&nbsp;echo&nbsp;</span><span style=3D"color: #DD0000">'va=
lue=3D"'</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"=
color: #0000BB">$_POST</span><span style=3D"color: #007700">[</span><span s=
tyle=3D"color: #DD0000">'flag'</span><span style=3D"color: #007700">],&nbsp=
;</span><span style=3D"color: #DD0000">'"'</span><span style=3D"color: #007=
700">;&nbsp;}&nbsp;</span><span style=3D"color: #0000BB">?&gt;<br></span>&n=
bsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;name=3D"insert"&nbsp;id=3D"insert"&nbs=
p;type=3D"button"&nbsp;value=3D"Start&nbsp;Time"&gt;<br>&lt;/form&gt;?&gt;
</code></code></pre>
<p>I have two TIMESTAMP fields for start/end times and an AI id field which=
 auto-fill with each new record so I don't insert into them. Can you see wh=
at I'm doing wrong and help me? Thanks.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello1 tharring!</p>
<p>There is nothing wrong with your insert. Its HTML form which is at least=
 wrong. You are closing an HTML tag too early
should be like</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">&lt;</span><span style=3D"color: #0000BB">form&nbsp;name</span><=
span style=3D"color: #007700">=3D</span><span style=3D"color: #DD0000">"for=
m1"&nbsp;</span><span style=3D"color: #0000BB">method</span><span style=3D"=
color: #007700">=3D</span><span style=3D"color: #DD0000">"post"&nbsp;</span=
><span style=3D"color: #0000BB">action</span><span style=3D"color: #007700"=
>=3D</span><span style=3D"color: #DD0000">""</span><span style=3D"color: #0=
07700">&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=3D"color: #00=
00BB">input&nbsp;type</span><span style=3D"color: #007700">=3D</span><span =
style=3D"color: #DD0000">"text"&nbsp;</span><span style=3D"color: #0000BB">=
name</span><span style=3D"color: #007700">=3D</span><span style=3D"color: #=
DD0000">"vol_id"&nbsp;</span><span style=3D"color: #0000BB">id</span><span =
style=3D"color: #007700">=3D</span><span style=3D"color: #DD0000">"vol_id"&=
nbsp;</span><span style=3D"color: #0000BB">value</span><span style=3D"color=
: #007700">=3D</span><span style=3D"color: #DD0000">"&lt;?php&nbsp;if&nbsp;=
(isset(</span><span style=3D"color: #0000BB">$_POST</span><span style=3D"co=
lor: #007700">[</span><span style=3D"color: #DD0000">'vol_id']))&nbsp;{&nbs=
p;?&gt;&lt;?=3D&nbsp;_POST['vol_id']&nbsp;?&gt;&lt;?php&nbsp;}&nbsp;?&gt;"<=
/span><span style=3D"color: #007700">&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</=
span><span style=3D"color: #0000BB">input&nbsp;type</span><span style=3D"co=
lor: #007700">=3D</span><span style=3D"color: #DD0000">"text"&nbsp;</span><=
span style=3D"color: #0000BB">name</span><span style=3D"color: #007700">=3D=
</span><span style=3D"color: #DD0000">"flag"&nbsp;</span><span style=3D"col=
or: #0000BB">id</span><span style=3D"color: #007700">=3D</span><span style=
=3D"color: #DD0000">"flag"&nbsp;</span><span style=3D"color: #007700">&lt;?=
</span><span style=3D"color: #0000BB">php&nbsp;</span><span style=3D"color:=
 #007700">if&nbsp;(isset(</span><span style=3D"color: #0000BB">$_POST</span=
><span style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'fla=
g'</span><span style=3D"color: #007700">]))&nbsp;{&nbsp;</span><span style=
=3D"color: #0000BB">?&gt;&lt;?=3D&nbsp;$_POST</span><span style=3D"color: #=
007700">[</span><span style=3D"color: #DD0000">'flag'</span><span style=3D"=
color: #007700">]&nbsp;</span><span style=3D"color: #0000BB">?&gt;&lt;?php&=
nbsp;</span><span style=3D"color: #007700">}&nbsp;</span><span style=3D"col=
or: #0000BB">?&gt;</span>"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;na=
me=3D"insert"&nbsp;id=3D"insert"&nbsp;type=3D"button"&nbsp;value=3D"Start&n=
bsp;Time"&gt;<br>&lt;/form&gt;?&gt;
</code></code></pre>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-444">
              <div class=3D"comment-author">
              	James, 25.03.18 04:33              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi t=
here, firstly thanks a lot for the article. I have a question of my own.  <=
/p>
<p>Is there an efficient way of doing an <code>UPDATE..SET..WHERE</code></p=
>
<p>with large dataset? For example, instead of multiple SET <code>queue_ord=
er=3D$queue_order WHERE queue_id=3D$queue_id;</code>, is there a way to bun=
dle them in a single PDO statement without using a for loop?  </p>
<p>Thanks.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello James!</p>
<p>Although there are ways to do that, I would advise against. There is no =
point in stuffing as much queries in one statement as possible. <strong>Pre=
pared statements</strong> are exactly for that purpose. Just prepare your U=
PDATE statement once and then execute it in a loop, like it shown in this a=
rticle: <a href=3D"https://phpdelusions.net/pdo#multiexec">https://phpdelus=
ions.net/pdo#multiexec</a></p>
<p>It will be as fast as a single statement.</p>
<p>If your updates will run unexpectedly slow, then it's your database sett=
ings to blame. To fix that, wrap your updates in a single transaction.</p> =
             </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-443">
              <div class=3D"comment-author">
              	armel, 24.03.18 06:35              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o I wish to resume coding after more than 2 years without practice. now i w=
ant to realize my personal projects with php mvc in a first so I want to un=
derstand how to start! thank you!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Armel!</p>
<p>My strong recommendation wouild be to try a well-established framework, =
Symfony preferably. It will give you the best understanding of MVC.</p>    =
          </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-442">
              <div class=3D"comment-author">
              	armel, 24.03.18 06:31              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Bonj=
our
Je souhaiterai reprendre ? coder apr?s plus de 2 ans sans pratique.
maintenant je veux r?aliser mes projets perso avec  php mvc dans un premier=
 tant je veux comprendre comment d?buter!
merci!</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-437">
              <div class=3D"comment-author">
              	Michael, 01.03.18 22:48              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks for your reply. I followed your guide for beginners and implemented the =
logging-errors advice. So far, the best approach :-)</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-371">
              <div class=3D"comment-author">
              	Santi, 10.02.18 13:55              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>$que=
ry =3D "SELECT tbl_product.*, tbl_cart.id as cart_id,tbl_cart.quantity FROM=
 tbl_product, tbl_cart WHERE
tbl_product.id =3D tbl_cart.product_id AND tbl_cart.member_id =3D ?";</p>
<p>what does this queery mean?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-362">
              <div class=3D"comment-author">
              	Victor Alvarado, 03.02.18 22:54              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi m=
en, good post, VERY GOOD, i have a question about procedures.</p>
<p>How can i use procedures with FOREACH, how can i replace the while with =
foreach, implementing the empty result prevention, or is more efficiente us=
e while instead?, because i like work with foreach</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Victor!</p>
<p>It is not very clear  what you are asking, but in general there is no di=
fference between using foreach and while.</p>
<p>In both cases you can just iterate over the statement. In case there is =
no result, then there simply will be no output:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">foreach&nbsp;(</span><span style=3D"color: #0000BB">$stmt&nbsp;<=
/span><span style=3D"color: #007700">as&nbsp;</span><span style=3D"color: #=
0000BB">$row</span><span style=3D"color: #007700">)&nbsp;{<br>&nbsp;&nbsp;&=
nbsp;&nbsp;echo&nbsp;</span><span style=3D"color: #0000BB">$row</span><span=
 style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'name'</sp=
an><span style=3D"color: #007700">];<br>}</span><span style=3D"color: #0000=
BB"></span></code></code></pre>
<p>In case you want to know if there is any result beforehand, just fetch t=
he resulting dataset using fetchAll():</p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt<=
/span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #000=
0BB">fetchAll</span><span style=3D"color: #007700">();<br>if&nbsp;(</span><=
span style=3D"color: #0000BB">$data</span><span style=3D"color: #007700">){=
<br>&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(</span><span style=3D"color: #000=
0BB">$data&nbsp;</span><span style=3D"color: #007700">as&nbsp;</span><span =
style=3D"color: #0000BB">$row</span><span style=3D"color: #007700">)&nbsp;{=
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span =
style=3D"color: #0000BB">$row</span><span style=3D"color: #007700">[</span>=
<span style=3D"color: #DD0000">'name'</span><span style=3D"color: #007700">=
];<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;=
&nbsp;echo&nbsp;</span><span style=3D"color: #DD0000">"No&nbsp;data"</span>=
<span style=3D"color: #007700">;<br>}</span><span style=3D"color: #0000BB">=
</span></code></code></pre>
<p>Hope it is clear now, but if not, please ask</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-361">
              <div class=3D"comment-author">
              	Michael, 03.02.18 17:18              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,
Very good tutorial, thanks for sharing. My production database server went =
down and when the app tried to connect to it, the error report threw back t=
he database connection details. Not nice. How would you recommend to handle=
 this error?
Thx</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Michael!</p>
<p>This is a very important question!
However, it is not actually related to PDO or database, but rather to the w=
hole PHP configuration. Your PHP sees to be misconfigured, leaking every er=
ror message outside, which shouldn't be. Actually, every error message is a=
 breach in the security, so the solution should be a general one.</p>
<p>On a live server PHP must be configured to log errors instead of display=
ing them, so it would never happen again to leak your database credentials =
outside. You may find useful my article on the PHP error reporting configur=
ation: <a href=3D"https://phpdelusions.net/articles/error_reporting">https:=
//phpdelusions.net/articles/error_reporting</a></p>
<p>Feel free to drop a line if something is still unclear or you disagree w=
ith the proposed solution</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-347">
              <div class=3D"comment-author">
              	GioMBG, 31.01.18 02:37              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>firs=
t thx for your tutorial.
injection paranoia :
prepare =3D safe ?</p>
<pre><code><code><span style=3D"color: #0000BB">$Q&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;(</span><span style=3D"color: #DD0000">'SELECT=
&nbsp;COUNT(Artist)&nbsp;AS&nbsp;cnt_artists&nbsp;FROM&nbsp;artists&nbsp;WH=
ERE&nbsp;Artist&nbsp;LIKE&nbsp;?'</span><span style=3D"color: #007700">);<b=
r></span><span style=3D"color: #0000BB">$q&nbsp;</span><span style=3D"color=
: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$conn</span><span=
 style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">prepar=
e</span><span style=3D"color: #007700">(</span><span style=3D"color: #0000B=
B">$Q</span><span style=3D"color: #007700">);<br></span><span style=3D"colo=
r: #0000BB">$q</span><span style=3D"color: #007700">-&gt;</span><span style=
=3D"color: #0000BB">execute</span><span style=3D"color: #007700">(array(</s=
pan><span style=3D"color: #0000BB">$letter</span><span style=3D"color: #007=
700">.</span><span style=3D"color: #DD0000">'%'</span><span style=3D"color:=
 #007700">));</span><span style=3D"color: #0000BB"></span></code></code></p=
re>
<p>it is safe ?
thx</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Gio!</p>
<p>Yes, that's perfectly safe. PDO witll either correctly format a paramete=
r for you (if emulation mode is turned on) or even send it <strong>complete=
ly separated</strong> from the query, and so there would be no way for it t=
o interfere.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-345">
              <div class=3D"comment-author">
              	Tony L, 19.01.18 13:26              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Bewa=
re that bitfields in MySQL suffer from the same problem that terms in the L=
IMIT clause do when using prepared statements, i.e. in emulation mode, stri=
ngs are not correctly interpreted. So if you are converting code like
mysql_query("create table foo (bits bit(48))");
mysql_query("insert into foo (bits) values ($val)";
into
$pdo-&gt;prepare("insert into foo (bits) values (?)")-&gt;execute([64]);
you will actually get the value 13876 inserted (0011 0110 0011 0100) which =
is the bytes of the ASCII characters '6' and '4'.</p>
<p>To fix this, either turn off emulation, or use bindParam as described in=
 the section on LIMIT, or change your code to
$pdo-&gt;prepare("insert into foo (bits) values (cast(? as decimal))")-&gt;=
execute([64]);
Something for the next version of this page perhaps?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-343">
              <div class=3D"comment-author">
              	Brinth, 09.01.18 09:27              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>hi i=
 am getting such an error-
" Please make the application/config/database.php file writable". </p>
<p>how to make a php file writable using chd in remote server?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-341">
              <div class=3D"comment-author">
              	jeff van fleet, 08.01.18 18:53              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>i am=
 brand new to pdo and i have a question about database connections. </p>
<p>on one page you say: </p>
<blockquote>
<p>constructor parameter is the most robust method in case your code is OOP=
. For the every class that needs a database connection, make PDO a construc=
tor parameter</p>
</blockquote>
<p>but on another page you say:</p>
<blockquote>
<p>The connection has to be made only once! No connects in every function. =
No connects in every class constructor. Otherwise, multiple connections wil=
l be created, which will eventually kill your database server. Thus, a sole=
 PDO instance has to be created and then used through whole script executio=
n</p>
</blockquote>
<p>these statements seem contradictory to me.  can you please explain how t=
o properly connect to a database with pdo? I am using oop php.</p>
<p>thanks, jeff</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Jeff! </p>
<p>Thank you for the good question!</p>
<p>When you assign an object to a variable, there remains just a single obj=
ect, whereas the second variable being just a <em>reference</em> to it. So =
when you are sending a PDO instance into a class' constructor, then it's ac=
tually a reference, that points to the same PDO instance. So the initial PD=
O object is not gets duplicated but remains essentially a single instance.<=
/p>
<p>So you can tell that the former statement doesn't violate the rule from =
the latter but rater gets along with it</p>
<p>Hope it is clear now but feel free to ask if not!</p>              </div=
>
            </li>
=20
            <li class=3D"comment" id=3D"comment-333">
              <div class=3D"comment-author">
              	T G, 26.12.17 00:33              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Grea=
t Column!</p>
<p>I was wondering on the following code snippet:</p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;[</span><span style=3D"color: #DD0000">'name=
'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span styl=
e=3D"color: #DD0000">'foo'</span><span style=3D"color: #007700">,&nbsp;</sp=
an><span style=3D"color: #DD0000">'submit'&nbsp;</span><span style=3D"color=
: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #DD0000">'submit'</spa=
n><span style=3D"color: #007700">];&nbsp;</span><span style=3D"color: #FF80=
00">//&nbsp;data&nbsp;for&nbsp;insert<br></span><span style=3D"color: #0000=
BB">$allowed&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;[</span><s=
pan style=3D"color: #DD0000">"name"</span><span style=3D"color: #007700">,&=
nbsp;</span><span style=3D"color: #DD0000">"surname"</span><span style=3D"c=
olor: #007700">,&nbsp;</span><span style=3D"color: #DD0000">"email"</span><=
span style=3D"color: #007700">];&nbsp;</span><span style=3D"color: #FF8000"=
>//&nbsp;allowed&nbsp;fields&nbsp;<br></span><span style=3D"color: #0000BB"=
>$values&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;[];&nbsp;<br><=
/span><span style=3D"color: #0000BB">$set&nbsp;</span><span style=3D"color:=
 #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">""</span><span sty=
le=3D"color: #007700">;&nbsp;foreach&nbsp;(</span><span style=3D"color: #00=
00BB">$allowed&nbsp;</span><span style=3D"color: #007700">as&nbsp;</span><s=
pan style=3D"color: #0000BB">$field</span><span style=3D"color: #007700">)&=
nbsp;{&nbsp;<br>if&nbsp;(isset(</span><span style=3D"color: #0000BB">$data<=
/span><span style=3D"color: #007700">[</span><span style=3D"color: #0000BB"=
>$field</span><span style=3D"color: #007700">]))&nbsp;{&nbsp;<br></span><sp=
an style=3D"color: #0000BB">$set</span><span style=3D"color: #007700">.=3D<=
/span><span style=3D"color: #DD0000">""</span><span style=3D"color: #007700=
">.</span><span style=3D"color: #0000BB">str_replace</span><span style=3D"c=
olor: #007700">(</span><span style=3D"color: #DD0000">""</span><span style=
=3D"color: #007700">,&nbsp;</span><span style=3D"color: #DD0000">"`"</span>=
<span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB"=
>$field</span><span style=3D"color: #007700">).</span><span style=3D"color:=
 #DD0000">""</span><span style=3D"color: #007700">.&nbsp;</span><span style=
=3D"color: #DD0000">"=3D:</span><span style=3D"color: #0000BB">$field</span=
><span style=3D"color: #DD0000">,&nbsp;"</span><span style=3D"color: #00770=
0">;&nbsp;<br></span><span style=3D"color: #0000BB">$values</span><span sty=
le=3D"color: #007700">[</span><span style=3D"color: #0000BB">$field</span><=
span style=3D"color: #007700">]&nbsp;=3D&nbsp;</span><span style=3D"color: =
#0000BB">$data</span><span style=3D"color: #007700">[</span><span style=3D"=
color: #0000BB">$field</span><span style=3D"color: #007700">];&nbsp;<br>}&n=
bsp;<br>}&nbsp;<br></span><span style=3D"color: #0000BB">$set&nbsp;</span><=
span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB=
">substr</span><span style=3D"color: #007700">(</span><span style=3D"color:=
 #0000BB">$set</span><span style=3D"color: #007700">,&nbsp;</span><span sty=
le=3D"color: #0000BB">0</span><span style=3D"color: #007700">,&nbsp;-</span=
><span style=3D"color: #0000BB">2</span><span style=3D"color: #007700">);</=
span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Why are you escaping the field names. Should the $allowed whitelist alre=
ady handle any SQL injection risk?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello T G!</p>
<p>Yeah, that's an awkward moment. On the one hand, you don't have to escap=
e a whitelisted value as nobody in their right mind would use a backtick in=
 the field name. On the other hand, however, if you take the formatting rou=
tine as an abstract one, unaware of the data source, it would be natural to=
 do the full processing, both quoting and escaping - just like any good quo=
ting function should do. </p>
<p>I think it would be better to move the full quoting routine into a disti=
nct function that will be doing the correct formatting regardless. I suppos=
e it will arise less questions. What do you think?</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-331">
              <div class=3D"comment-author">
              	jayenn, 23.12.17 23:49              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi a=
nd thanks  for this great information. I have learnt a lot about PDO and - =
at least as useful - about a consistent approach to error handling! I also =
like your style of writing. Thanks mucho!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Jayenn!</p>
<p>Thank you for your kind words and especially for mentioning the error ha=
ndling stuff! I am nor sort of crusade in changing the current state of err=
or handling in PHP.</p>
<p>Feel free to check back if you have any problem though - any real life u=
se case can make my articles batter for everyone.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-330">
              <div class=3D"comment-author">
              	AA, 21.12.17 09:53              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I ha=
ve a pdo search engine using MYSQL database. How can I get the number of se=
arch results per "MYSQL field"?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello!</p>
<p>Just run a </p>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;COUNT</span><sp=
an style=3D"color: #007700">(*)&nbsp;</span><span style=3D"color: #0000BB">=
FROM&nbsp;your_table&nbsp;WHERE&nbsp;&nbsp;field&nbsp;</span><span style=3D=
"color: #007700">=3D&nbsp;?</span></code></code></pre>
<p>and select that number using fetchColumn()</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-325">
              <div class=3D"comment-author">
              	Jason Franklin, 07.12.17 00:09              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>It a=
ppears that adding a code block does not work. I just tried submitting anot=
her comment with code, but it did not appear as I expected.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-324">
              <div class=3D"comment-author">
              	Jason Franklin, 06.12.17 19:27              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I su=
bmitted a comment a few days ago about escaping operands for the LIKE opera=
tor.  Do you think it may have been sent to a spam folder?</p>
<p>I figured it would have made it through by now...</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Jason!</p>
<p>There is no spam folder, but it could have been an error on the site.</p=
>
<p>Escaping special characters used for the LIKE operator is not specific t=
o PDO, it's rather related to the particular database. But probably I shoul=
d add a mention at least for MySQL. </p>
<p>What was your question anyway?</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-323">
              <div class=3D"comment-author">
              	vincent, 05.12.17 14:49              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I wa=
s talking with another programmer and hes was complaining about SQL query n=
ot working (He has not the use to test his queries on the database before c=
oding them on PHP).
And he said :</p>
<p>-- It would be usefull to be able to directely see the query made by PDO=
 to the database.<br>
-- you mean with the values of binded ?<br>
-- Yes !<br>
-- For debugging ?<br>
-- Of course, what kind of programmer do you take me for ?  </p>
<p>I searched I stumbled on you (Your articles are wonderfully readable by =
the way).</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Vincent!</p>
<p>Although it is often useful to have a query from PDO with all the data i=
nterpolated, I would rather use it for the profiling. </p>
<p>Whereas when a query is not working, all you need as an error message fr=
om a database, that will tell you precisely, what is the problem. Note that=
 you should be using prepared statements to avoid silly syntax errors cause=
d by the data - it goes without saying. </p>
<p>That said, there are several code snippets and packages that can get you=
 raw SQL from a prepared query, just google for "pdo interpolated query" or=
 "PDO raw query".</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-322">
              <div class=3D"comment-author">
              	Mike McPherson, 30.11.17 14:31              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I ha=
ve a simple loop that runs a small number of update statements
if there's only one in the loop it works fine
more than one and only the first works, with no errors reported
I'm confused!!</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">for&nbsp;(</span><span style=3D"color: #0000BB">$i</span><span s=
tyle=3D"color: #007700">=3D</span><span style=3D"color: #0000BB">0</span><s=
pan style=3D"color: #007700">;&nbsp;</span><span style=3D"color: #0000BB">$=
i</span><span style=3D"color: #007700">&lt;</span><span style=3D"color: #00=
00BB">$count</span><span style=3D"color: #007700">;&nbsp;</span><span style=
=3D"color: #0000BB">$i</span><span style=3D"color: #007700">++)&nbsp;{<br><=
/span><span style=3D"color: #0000BB">$SQL&nbsp;</span><span style=3D"color:=
 #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"UPDATE&nbsp;Candi=
date&nbsp;C&nbsp;SET&nbsp;engineer&nbsp;=3D&nbsp;'"&nbsp;</span><span style=
=3D"color: #007700">.</span><span style=3D"color: #0000BB">$engineer</span>=
<span style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #DD0000"=
>"'&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;WHERE&nbsp;..."</span><span style=3D"color: #007700">;<br>&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$result&nbsp;</span>=
<span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000B=
B">$db</span><span style=3D"color: #007700">-&gt;</span><span style=3D"colo=
r: #0000BB">query</span><span style=3D"color: #007700">(</span><span style=
=3D"color: #0000BB">$SQL</span><span style=3D"color: #007700">);<br>}</span=
><span style=3D"color: #0000BB"></span></code></code></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Mike!</p>
<p>Dunno why did you cut off the part after WHERE but it's impossible to te=
ll anything without seeing the actual code, sorry.</p>
<p>Most likely you are just updating the same row.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-319">
              <div class=3D"comment-author">
              	Jorge, 27.11.17 06:57              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><blockq=
uote>
<p>Unfortunately, there is some confusion. PDO::quote() creates a data lite=
ral, not an identifier. For example, for MySQL the returned value will be e=
nclosed in quotes, not backticks, which will make it unsuitable to be used =
as a table name.</p>
</blockquote>
<p>How frustrating. I just tested with PostgreSQL, but it uses single quote=
s so it worked there.
One wonders why in so many years, such a basic and necessary feature is not=
 there (found a thread from 2008 with people complaining about this, sayng =
it's years overdue).
I just migrated from MDB2 because of it's unfinished state and difficult in=
stall method and chose PDO. One of my tables matches one of MySQL's many re=
served words, so I must quote it and I was using quoteidentifier from MDB2.
I see Zend Engine has it, but that means a large dependency for a single qu=
oting function.
Seems I'll have to roll up my sleeves. Thanks for the heads up, it could ha=
ve gone unnoticed otherwise!</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-317">
              <div class=3D"comment-author">
              	Jorge, 26.11.17 03:29              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Nice=
 rundown, much better than overly complex tutorials.
However, identifier quoting does exist in PDO (didn't back then?).</p>
<p>$pdo-&gt;quote('mytablename');
will take care of any strange quotes. Keep in mind only MySQL uses backtick=
s, so using this is better if you want to keep it a little more DB-agnostic=
.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Jorge!</p>
<p>Thank you for your feedback.</p>
<p>Unfortunately, there is some confusion. PDO::quote() creates a data lite=
ral, not an identifier. For example, for MySQL the returned value will be e=
nclosed in quotes, not backticks, which will make it unsuitable to be used =
as a table name.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-313">
              <div class=3D"comment-author">
              	Emma, 14.11.17 09:22              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Dear=
 Colonel, I greatly appreciate this website and the common sense you share =
on Stack Overflow. May I ask you, please, if you have time, to take a look =
at a conundrum I have posted on SO? (<a href=3D"https://stackoverflow.com/q=
uestions/47278348/php-output-echoed-out-of-order">https://stackoverflow.com=
/questions/47278348/php-output-echoed-out-of-order</a>). I understand if th=
at's not possible for you. Best wishes for the future</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Emma!</p>
<p>I see it has been happily resolved already. Glad you got it working and =
thank you for your kind words.</p>
<p>Feel free to come back if you have any other questions :)</p>           =
   </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-312">
              <div class=3D"comment-author">
              	Tyler, 13.11.17 09:25              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Oh I=
 typed in my second thought before I saw that you had responded to my quest=
ion. Looks like we came to the same conclusion,</p>
<p>Awesome
Thanks for your response</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-311">
              <div class=3D"comment-author">
              	Tyler, 13.11.17 09:21              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I su=
ppose I could run a sub-query on COUNT(*)</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-310">
              <div class=3D"comment-author">
              	Tyler, 13.11.17 08:02              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o, I am running into a problem with pagination. As you recommend I use COUN=
T(*). But when using with GROUP BY I have a problem. With just one GROUP BY=
 I can use COUNT(DISTINCT column). But now I have a query that requires 2 G=
ROUP BY's and am having a problem and SQL_CALC_FOUND_ROWS is not a solution=
 for my case. It's looking like  'then you can either use rowCount() or sim=
ply call count() on the array returned by fetchAll()" are my only solutions=
.</p>
<p>Do you have any suggestions?</p>
<p>P.S. Thanks for your great PDO reference site.</p>
<p>Ty</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Tyler!</p>
<p>Thank you for the good question. I should have added it to the article.
And especially thank you for asking. It's always better to ask than devise =
something of your own.</p>
<p>Yes, there is a way to ask a database to count on its side in this case =
as well. Just wrap your query into another query, like</p>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;count</span><sp=
an style=3D"color: #007700">(*)&nbsp;</span><span style=3D"color: #0000BB">=
FROM&nbsp;</span><span style=3D"color: #007700">(</span><span style=3D"colo=
r: #0000BB">SELECT&nbsp;1&nbsp;FROM&nbsp;</span><span style=3D"color: #0077=
00">...&nbsp;</span><span style=3D"color: #0000BB">here&nbsp;goes&nbsp;the&=
nbsp;rest&nbsp;of&nbsp;your&nbsp;query</span><span style=3D"color: #007700"=
>)</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>The idea is to wrap your query into another, and use it to count results=
. For this purpose we are selecting just a constant value "1" instead of th=
e actual fields in your main query, just to make a database to do less job.=
</p>
<p>Feel free to ask if you got any other questions!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-309">
              <div class=3D"comment-author">
              	John Hind, 09.11.17 14:45              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>In t=
esting I notice that if you use sql statements containing LIKE in combinati=
on with $_GET it is possible to inject % into the statement and retrieve al=
l the data from a table.
e.g. if I do not escape the % this retrieves all users.
<a href=3D"http://example.php/?first_name">http://example.php?first_name</a=
>=3D%</p>
<p>The issue is referenced here
<a href=3D"http://php.net/manual/en/pdostatement.bindvalue.php">http://php.=
net/manual/en/pdostatement.bindvalue.php</a></p>
<p>but I can't find any mention of it in your more extensive documentation.
I have to say that I did not understand the code example you use to explain=
 how to use 'like' with pdo.</p>
<p>Thanks,
John</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello John.</p>
<p>first of all, be advised to distinguish an <em>official</em> manual page=
 for <em>user-contributed comments</em>. The latter can be left by any unsu=
specting fellow and should be taken with a pinch of salt. </p>
<p>As of your concern, it's really simple.</p>
<ol>
<li>if your code inside example.php is not intended for the substring searc=
h, then you should NOT use LIKE in the first place. </li>
<li>if your code inside example.php is intended for the substring search, t=
hen it means that the entire table contents is <em>already</em> exposed and=
 you have nothing to complain of. for example, if you are using something l=
ike `'%'.$_GET['first_name'].'%', then I will have only run 28 requests wit=
h a different letter each to dump your "entire database" without any specia=
l character used.</li>
</ol>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-308">
              <div class=3D"comment-author">
              	M, 06.11.17 12:04              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Gree=
tings. I have enjoyed reading your content, especially the part about the P=
DO wrapper. Your site has become a bit of a reference on the topic. Helps p=
eople not to reinvent the wheel every day. As a personal wish, if I may, I'=
d like to get your insights on 'cache invalidation' an PDO. A bit off topic=
 perhaps - it's just something I am working on these days. An ambitious ide=
a of having a "caching system" underlying the app, i.e. transparent to the =
app who whouldn't know if data is coming from Memcache or the database. Que=
ries would be handled by the PDO wrapper (-ish) and cached (using memcache)=
, and also invalidated when 'interested' rows are updated/deleted. Not an e=
asy task to develop something like that. Also, it'd be nice to have the Use=
r comments about "nested transactions" (see <a href=3D"http://php.net/manua=
l/en/pdo.begintransaction.php">http://php.net/manual/en/pdo.begintransactio=
n.php</a>) incorporated in your articles, would probably be useful for a bu=
nch of people. Great work.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello M!</p>
<p>Yes this question a bit off topic, but from my experience I would rather=
 warn you against such a generic all-embracing cache solution. In my opinio=
n, your regular queries should be fast by themselves, without the need of a=
ny cache. And it's only a few exceptional cases should be handled using a c=
ache, but such cases should be carefully handpicked, considered using a reg=
ular optimization, and only then optimized using a cache, with a carefully =
considered invalidation. </p>
<p>Regarding transactions, thank you for the suggestion, I will add a link =
to that comment.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-307">
              <div class=3D"comment-author">
              	Zohra Pardesi, 02.11.17 16:57              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
I again stuck at some point, Now I am trying to edit product details which =
I already have added. I also have added image field when I click on edit bu=
tton and then when I add only some feature after clicking on update button =
I find Picture which I did not touch have gone.... Now after analysing I ha=
ve understood the Problem but I am unable to resolve the issue if you can h=
elp me in this please.
my code is:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if(isset(</span><span style=3D"color: #0000BB">$_POST</span><spa=
n style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'update_p=
roduct'</span><span style=3D"color: #007700">])){<br>&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$product_na=
me&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=
=3D"color: #0000BB">$_POST</span><span style=3D"color: #007700">[</span><sp=
an style=3D"color: #DD0000">'product_name'</span><span style=3D"color: #007=
700">];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span sty=
le=3D"color: #0000BB">$cat_name</span><span style=3D"color: #007700">=3D</s=
pan><span style=3D"color: #0000BB">$_POST</span><span style=3D"color: #0077=
00">[</span><span style=3D"color: #DD0000">'cat_name'</span><span style=3D"=
color: #007700">];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</spa=
n><span style=3D"color: #0000BB">$sub_cat_name</span><span style=3D"color: =
#007700">=3D</span><span style=3D"color: #0000BB">$_POST</span><span style=
=3D"color: #007700">[</span><span style=3D"color: #DD0000">'sub_cat_name'</=
span><span style=3D"color: #007700">];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$product_img1</spa=
n><span style=3D"color: #007700">=3D</span><span style=3D"color: #0000BB">$=
_FILES</span><span style=3D"color: #007700">[</span><span style=3D"color: #=
DD0000">'product_img1'</span><span style=3D"color: #007700">][</span><span =
style=3D"color: #DD0000">'name'</span><span style=3D"color: #007700">];<br>=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color=
: #0000BB">move_uploaded_file</span><span style=3D"color: #007700">(</span>=
<span style=3D"color: #0000BB">$product_img1_tmp</span><span style=3D"color=
: #007700">,&nbsp;</span><span style=3D"color: #DD0000">"images/products_im=
ages/</span><span style=3D"color: #0000BB">$product_img1</span><span style=
=3D"color: #DD0000">"</span><span style=3D"color: #007700">);&nbsp;&nbsp;&n=
bsp;&nbsp;</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>See in above When we use move_uploaded_file then what happen actually is=
 our database only get the path of image while image actually move or resid=
es into the folder we have mentioned into path.
So, when I try to edit/update page when code approached to database field p=
roduct_img1 it only find path but not actual image. I think there must be a=
 way like move_uploaded_file which I don't know :(</p>
<p>Please could you help me in this? how to fix this issue that if I don't =
want to update image, image should remain there?????</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-305">
              <div class=3D"comment-author">
              	Zohra Pardesi, 22.10.17 22:39              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi D=
avid, Yeah, you are right, I am mad that since hours I was checking my code=
 madly, then took some rest and when again checked, I found my mistakes, bo=
th foreign keys I had placed wrongly; I corrected in the way below and my c=
ode is now working perfectly:
into insert statement (cat_id, sub_cat_id) and into values($cat_name, $sub_=
cat_name)</p>
<p>I also removed function NOW() and mysql is taking time itself. i might d=
on't need to do anything. I was so happy and wanted to let you know, when c=
ame here I found your reply.
I really appreciate you for a quick response, you are doing such a great jo=
b by helping students. Great work!
I will try to bound foreign keys as well as suggested.
Thanks a lot and Regards,</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-303">
              <div class=3D"comment-author">
              	Zohra Pardesi, 22.10.17 16:54              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
I am trying to learn PDO but stuck as receiving error message says: "PDOSta=
tement::execute(): SQLSTATE[HY093]: Invalid parameter number: parameter was=
 not defined" here is code:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if(isset(</span><span style=3D"color: #0000BB">$_POST</span><spa=
n style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'add_prod=
uct'</span><span style=3D"color: #007700">]))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&=
nbsp;</span><span style=3D"color: #0000BB">$product_name&nbsp;</span><span =
style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$_P=
OST</span><span style=3D"color: #007700">[</span><span style=3D"color: #DD0=
000">'product_name'</span><span style=3D"color: #007700">];<br>&nbsp;&nbsp;=
&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$cat_id</span><span style=
=3D"color: #007700">=3D</span><span style=3D"color: #0000BB">$_POST</span><=
span style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'cat_n=
ame'</span><span style=3D"color: #007700">];&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span style=3D"color: #FF8000">//Foreign&nbsp;Key&nbsp;from&nbsp;main_cat&n=
bsp;table<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">=
$sub_cat_id</span><span style=3D"color: #007700">=3D</span><span style=3D"c=
olor: #0000BB">$_POST</span><span style=3D"color: #007700">[</span><span st=
yle=3D"color: #DD0000">'sub_cat_name'</span><span style=3D"color: #007700">=
];&nbsp;</span><span style=3D"color: #FF8000">//Foreign&nbsp;Key&nbsp;from&=
nbsp;sub_cat&nbsp;table<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"co=
lor: #0000BB">$product_price</span><span style=3D"color: #007700">=3D</span=
><span style=3D"color: #0000BB">$_POST</span><span style=3D"color: #007700"=
>[</span><span style=3D"color: #DD0000">'product_price'</span><span style=
=3D"color: #007700">];<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"col=
or: #0000BB">$product_warranty</span><span style=3D"color: #007700">=3D</sp=
an><span style=3D"color: #0000BB">$_POST</span><span style=3D"color: #00770=
0">[</span><span style=3D"color: #DD0000">'product_warranty'</span><span st=
yle=3D"color: #007700">];</span><span style=3D"color: #0000BB"></span></cod=
e></code></pre>
<p>cat_id and sub_cat_id are foreign keys while I also want to get date and=
 time into Products table by function Now()
Prepare statement and bindParam is as below:</p>
<pre><code><code><span style=3D"color: #0000BB">$add_product&nbsp;</span><s=
pan style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB"=
>$conn</span><span style=3D"color: #007700">-&gt;</span><span style=3D"colo=
r: #0000BB">prepare</span><span style=3D"color: #007700">(</span><span styl=
e=3D"color: #DD0000">"insert&nbsp;into&nbsp;products(&nbsp;product_name,&nb=
sp;cat_name,&nbsp;sub_cat_name,&nbsp;product_price,&nbsp;product_warranty,&=
nbsp;product_add_date)&nbsp;v<br>alues&nbsp;(:product_name,&nbsp;</span><sp=
an style=3D"color: #0000BB">$cat_id</span><span style=3D"color: #DD0000">,&=
nbsp;</span><span style=3D"color: #0000BB">$sub_cat_id</span><span style=3D=
"color: #DD0000">,&nbsp;:product_price,&nbsp;:product_warranty,&nbsp;NOW())=
"</span><span style=3D"color: #007700">);<br></span><span style=3D"color: #=
0000BB">$add_product</span><span style=3D"color: #007700">-&gt;</span><span=
 style=3D"color: #0000BB">bindParam</span><span style=3D"color: #007700">(<=
/span><span style=3D"color: #DD0000">":product_name"</span><span style=3D"c=
olor: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$product_name</=
span><span style=3D"color: #007700">);<br></span><span style=3D"color: #000=
0BB">$add_product</span><span style=3D"color: #007700">-&gt;</span><span st=
yle=3D"color: #0000BB">bindParam</span><span style=3D"color: #007700">(</sp=
an><span style=3D"color: #DD0000">":product_price"</span><span style=3D"col=
or: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$product_price</s=
pan><span style=3D"color: #007700">);<br></span><span style=3D"color: #0000=
BB">$add_product</span><span style=3D"color: #007700">-&gt;</span><span sty=
le=3D"color: #0000BB">bindParam</span><span style=3D"color: #007700">(</spa=
n><span style=3D"color: #DD0000">":product_warranty"</span><span style=3D"c=
olor: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$product_warran=
ty</span><span style=3D"color: #007700">);</span><span style=3D"color: #000=
0BB"></span></code></code></pre>
<p>Call to function has been made into form where I need this to be execute=
d. </p>
<p>It looks like I have set bindParam wrongly, I don't understand how to ma=
ke it perfectly for cat_id, sub_cat_id and function NOW();
your help will be appreciated. regards,</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Zohra!</p>
<p>All you need is to brace yourself and write a consistent code. Either in=
 your editor or here in comments.</p>
<p>I took your code and run it on my local server and there is no "Invalid =
parameter number". Therefore I suppose that you are just doing some mistake=
s when running your code and don't verify it, hence the error. </p>
<p>So just double check your code, and it will work!</p>
<p>Note that you should use prepared statements for ALL variables.  $cat_id=
, $sub_cat_id should be bound as well.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-299">
              <div class=3D"comment-author">
              	David E, 21.10.17 14:37              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Can =
you help me please. I am trying to perform the following PDO. All the value=
s are here are present. However I get an error message " Call to a member f=
unction prepare() on null in "etc.</p>
<pre><code><code><span style=3D"color: #0000BB">$mbrwks&nbsp;</span><span s=
tyle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"UPD=
ATE&nbsp;friends1&nbsp;SET&nbsp;Wks&nbsp;=3D&nbsp;?,&nbsp;Yno&nbsp;=3D&nbsp=
;?,&nbsp;Mno&nbsp;=3D&nbsp;?,&nbsp;Regdat&nbsp;=3D&nbsp;?,&nbsp;<br>&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Amount&nbsp;=3D&=
nbsp;?,Cheque&nbsp;=3D&nbsp;?,Status&nbsp;=3D&nbsp;?&nbsp;WHERE&nbsp;Friend=
ship&nbsp;=3D&nbsp;?"</span><span style=3D"color: #007700">;<br></span><spa=
n style=3D"color: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;<=
/span><span style=3D"color: #0000BB">prepare</span><span style=3D"color: #0=
07700">(</span><span style=3D"color: #0000BB">$mbrwks</span><span style=3D"=
color: #007700">)-&gt;</span><span style=3D"color: #0000BB">execute</span><=
span style=3D"color: #007700">([</span><span style=3D"color: #0000BB">$week=
s</span><span style=3D"color: #007700">,</span><span style=3D"color: #0000B=
B">$yrs</span><span style=3D"color: #007700">,</span><span style=3D"color: =
#0000BB">$mm</span><span style=3D"color: #007700">,</span><span style=3D"co=
lor: #0000BB">$rdat</span><span style=3D"color: #007700">,</span><span styl=
e=3D"color: #0000BB">$fee</span><span style=3D"color: #007700">,</span><spa=
n style=3D"color: #0000BB">$cn</span><span style=3D"color: #007700">,</span=
><span style=3D"color: #0000BB">$c</span><span style=3D"color: #007700">,</=
span><span style=3D"color: #0000BB">$rn</span><span style=3D"color: #007700=
">]);</span><span style=3D"color: #0000BB"></span></code></code></pre></div=
>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello David!</p>
<p>This error means that you are calling $pdo inside a function, where vari=
able scope is different. You need to make your PDO instance accessible. A s=
hort list of variants is listed here: <a href=3D"https://phpdelusions.net/p=
do_examples/connect_to_mysql#access">https://phpdelusions.net/pdo_examples/=
connect_to_mysql#access</a></p>
<p>Please feel free to comment back if you need any help with any particula=
r method</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-296">
              <div class=3D"comment-author">
              	Ed, 17.10.17 18:43              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks so much for your quick response. I think I just need to take a step back=
 and do some more reading. I think this code wont work anyway because the s=
cope of the $bdo variable is outside of the function. I need to work that o=
ne out next!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ed!</p>
<p>Whoops, I didn't notice the issue with variable scope, shame on me.</p>
<p>There are several ways you could get a PDO instance. You may check this =
page for some suggestions: <a href=3D"https://phpdelusions.net/pdo/pdo_wrap=
per">PDO wrapper</a></p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-295">
              <div class=3D"comment-author">
              	Ed, 17.10.17 13:49              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks for the great and extensive instructions. I havent got very far but I am=
 having a problem with passing the result of a function into a conditional =
statement. The database connects ok but I think the problem is here:</p>
<pre><code><code><span style=3D"color: #0000BB">$result&nbsp;</span><span s=
tyle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stm=
t</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0=
000BB">fetch</span><span style=3D"color: #007700">();<br>return&nbsp;(</spa=
n><span style=3D"color: #0000BB">$result&nbsp;</span><span style=3D"color: =
#007700">=3D=3D</span><span style=3D"color: #0000BB">1</span><span style=3D=
"color: #007700">)?</span><span style=3D"color: #0000BB">true</span><span s=
tyle=3D"color: #007700">:</span><span style=3D"color: #0000BB">false</span>=
<span style=3D"color: #007700">);</span><span style=3D"color: #0000BB"></sp=
an></code></code></pre>
<p>Any ideas?</p>
<pre><code><code><span style=3D"color: #0000BB">$host&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'local=
host'</span><span style=3D"color: #007700">;<br></span><span style=3D"color=
: #0000BB">$db&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><=
span style=3D"color: #DD0000">'mydb'</span><span style=3D"color: #007700">;=
&nbsp;<br></span><span style=3D"color: #0000BB">$user&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'dba'<=
/span><span style=3D"color: #007700">;<br></span><span style=3D"color: #000=
0BB">$pass&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span=
 style=3D"color: #DD0000">''</span><span style=3D"color: #007700">;<br></sp=
an><span style=3D"color: #FF8000">##$charset&nbsp;=3D&nbsp;'utf8mb4';<br><b=
r></span><span style=3D"color: #0000BB">$dsn&nbsp;</span><span style=3D"col=
or: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"mysql:host=3D<=
/span><span style=3D"color: #0000BB">$host</span><span style=3D"color: #DD0=
000">;dbname=3D</span><span style=3D"color: #0000BB">$db</span><span style=
=3D"color: #DD0000">"</span><span style=3D"color: #007700">;<br></span><spa=
n style=3D"color: #FF8000">##var_dump($dsn);<br><br></span><span style=3D"c=
olor: #0000BB">$opt&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;[<b=
r></span><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #00=
7700">::</span><span style=3D"color: #0000BB">ATTR_ERRMODE&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=
=3D"color: #007700">=3D&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</span><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #0077=
00">::</span><span style=3D"color: #0000BB">ERRMODE_EXCEPTION</span><span s=
tyle=3D"color: #007700">,<br></span><span style=3D"color: #0000BB">PDO</spa=
n><span style=3D"color: #007700">::</span><span style=3D"color: #0000BB">AT=
TR_DEFAULT_FETCH_MODE&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nb=
sp;</span><span style=3D"color: #0000BB">PDO</span><span style=3D"color: #0=
07700">::</span><span style=3D"color: #0000BB">FETCH_ASSOC</span><span styl=
e=3D"color: #007700">,<br></span><span style=3D"color: #0000BB">PDO</span><=
span style=3D"color: #007700">::</span><span style=3D"color: #0000BB">ATTR_=
EMULATE_PREPARES&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D=
&gt;&nbsp;</span><span style=3D"color: #0000BB">false</span><span style=3D"=
color: #007700">,<br>];<br><br>try{<br></span><span style=3D"color: #0000BB=
">$pdo&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;new&nbsp;</span>=
<span style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">(</=
span><span style=3D"color: #0000BB">$dsn</span><span style=3D"color: #00770=
0">,&nbsp;</span><span style=3D"color: #0000BB">$user</span><span style=3D"=
color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$pass</span><s=
pan style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$=
opt</span><span style=3D"color: #007700">);<br></span><span style=3D"color:=
 #FF8000">##var_dump($pdo);<br></span><span style=3D"color: #007700">}catch=
(</span><span style=3D"color: #0000BB">Exception&nbsp;$e</span><span style=
=3D"color: #007700">){<br>echo&nbsp;</span><span style=3D"color: #DD0000">'=
Message:&nbsp;'&nbsp;</span><span style=3D"color: #007700">.</span><span st=
yle=3D"color: #0000BB">$e</span><span style=3D"color: #007700">-&gt;</span>=
<span style=3D"color: #0000BB">getMessage</span><span style=3D"color: #0077=
00">();<br>exit;<br>}<br><br>function&nbsp;</span><span style=3D"color: #00=
00BB">user_exists</span><span style=3D"color: #007700">(</span><span style=
=3D"color: #0000BB">$username</span><span style=3D"color: #007700">)&nbsp;{=
<br></span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span style=3D"=
color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><=
span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">pr=
epare</span><span style=3D"color: #007700">(</span><span style=3D"color: #D=
D0000">'SELECT&nbsp;COUNT(uid)&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;usernam=
e&nbsp;=3D&nbsp;:username'</span><span style=3D"color: #007700">);<br></spa=
n><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700"=
>-&gt;</span><span style=3D"color: #0000BB">execute</span><span style=3D"co=
lor: #007700">([</span><span style=3D"color: #DD0000">'username'&nbsp;</spa=
n><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: =
#0000BB">$username</span><span style=3D"color: #007700">]);<br></span><span=
 style=3D"color: #0000BB">$result&nbsp;</span><span style=3D"color: #007700=
">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><span style=3D=
"color: #007700">-&gt;</span><span style=3D"color: #0000BB">fetch</span><sp=
an style=3D"color: #007700">();<br>return&nbsp;(</span><span style=3D"color=
: #0000BB">$result&nbsp;</span><span style=3D"color: #007700">=3D=3D</span>=
<span style=3D"color: #0000BB">1</span><span style=3D"color: #007700">)?</s=
pan><span style=3D"color: #0000BB">true</span><span style=3D"color: #007700=
">:</span><span style=3D"color: #0000BB">false</span><span style=3D"color: =
#007700">);<br>}<br><br>if(</span><span style=3D"color: #0000BB">user_exist=
s</span><span style=3D"color: #007700">(</span><span style=3D"color: #DD000=
0">'admin'</span><span style=3D"color: #007700">)&nbsp;=3D=3D=3D&nbsp;</spa=
n><span style=3D"color: #0000BB">true</span><span style=3D"color: #007700">=
)&nbsp;{<br>echo&nbsp;</span><span style=3D"color: #DD0000">"exists"</span>=
<span style=3D"color: #007700">;<br>}&nbsp;else&nbsp;{<br>echo&nbsp;</span>=
<span style=3D"color: #DD0000">"doesnt&nbsp;exist"</span><span style=3D"col=
or: #007700">;<br>}</span><span style=3D"color: #0000BB"></span></code></co=
de></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ed! </p>
<p>Thank you for the perfectly formatted question!</p>
<p>Yes, you spotted the problem perfectly. The value returned by fetch() me=
thod is not a number but array, and therefore comparing it with a number wo=
n't give you any good result. </p>
<p>If you want to fetch the number, you should use fetchColumn() instead. S=
o your code would be</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">function&nbsp;</span><span style=3D"color: #0000BB">user_exists<=
/span><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB"=
>$username</span><span style=3D"color: #007700">)&nbsp;{<br>&nbsp;&nbsp;&nb=
sp;&nbsp;</span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</s=
pan><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000B=
B">prepare</span><span style=3D"color: #007700">(</span><span style=3D"colo=
r: #DD0000">'SELECT&nbsp;COUNT(uid)&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;us=
ername&nbsp;=3D&nbsp;:username'</span><span style=3D"color: #007700">);<br>=
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><=
span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">ex=
ecute</span><span style=3D"color: #007700">([</span><span style=3D"color: #=
DD0000">'username'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;=
</span><span style=3D"color: #0000BB">$username</span><span style=3D"color:=
 #007700">]);<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000=
BB">$result&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><spa=
n style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;=
</span><span style=3D"color: #0000BB">fetchColumn</span><span style=3D"colo=
r: #007700">();<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(</span><span style=
=3D"color: #0000BB">$result&nbsp;</span><span style=3D"color: #007700">=3D=
=3D&nbsp;</span><span style=3D"color: #0000BB">1</span><span style=3D"color=
: #007700">);<br>}</span><span style=3D"color: #0000BB"></span></code></cod=
e></pre>
<p>Besides, the result of =3D=3D operator is already a boolean, no need to =
add another condition, you can return it right away.</p>
<p>Also note that echong the error message right away is not advised. Consi=
der the information from the section related to <a href=3D"https://phpdelus=
ions.net/articles/error_reporting">PHP error reporting</a></p>
<p>Feel free to ask if you have any other questions!</p>              </div=
>
            </li>
=20
            <li class=3D"comment" id=3D"comment-294">
              <div class=3D"comment-author">
              	Konrad, 15.10.17 01:15              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi.<=
/p>
<p>I have a small suggestion - if there are more than e.g. 10 comments, the=
y could be hidden under "show more comments" link, or something. IMHO it do=
esn't have to be ajax, just a hidden &lt;div&gt; which you show upon clicki=
ng the link.</p>
<p>Right now people look at the scrollbar and get scared, because they thin=
k the article is soooo long. While it is quite long, and comprehensive, it =
is not <em>that</em> huge :P   </p>
<p>Plus, next to the 'address' field in the 'comments' section, you could a=
dd "not required" and "will not be published" </p>
<p>Thank you very much for this article, I like pointing here ppl who want =
to start with PDO :P</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Konrad!</p>
<p>Thank you for the suggestions!
I'll definitely implement both of them soon.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-291">
              <div class=3D"comment-author">
              	Bryte, 12.10.17 12:46              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
please am trying to get a value from a field in a datatable, the scenario i=
s like this:
I have a table with data about four columns, at a click of a button which i=
s an action in the table, a modal appears with four input boxes, I made the=
 first input box disabled so as to pick a value from a field in the table. =
But i can't seem to implement it. Please can you help?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-285">
              <div class=3D"comment-author">
              	David, 05.10.17 18:45              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you for your reply.
I am a little confused though, but will try to solve my lack of knowledge.
Regards.
David.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-284">
              <div class=3D"comment-author">
              	David Entwistle, 05.10.17 18:09              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I wo=
uld appreciate your help with a PDO issue.
I am calling a PDO select function which works except I only get one piece =
of data from a file that contains two pieces. the code is </p>
<p>The field "Dn" should return "Firstname Surname" separted by a space.
All I get returned is the Firstname.
Please can you help me ?
Regards David.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello David!</p>
<p>Most likely your issue is not with PDO but with HTML.
Check the HRML source of your page and find your last name all right.</p>
<p>Then follow the HTML syntax and wrap Dn field value in quotes :)</p>    =
          </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-281">
              <div class=3D"comment-author">
              	Tyler, 04.10.17 06:03              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hey,=
 I was linked to your site, and it seems to have some nice recommendations.=
 That said, I was looking at the section on rowCount, and it seems like you=
 take quite the position on 'it shouldn't be necessary'. I've run into this=
 quite a bit when performing pagination of results, and I'm curious as to w=
hat your recommendation is to do in this case instead of getting a row coun=
t?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Tyler!</p>
<p>I should have probably emphasized it better, but using anything like row=
 count for pagination is not something "not necessary" but a big mistake.</=
p>
<p>For paginafion you need 2 queries: one that gets actual data for a parti=
cular page, for this query you don't need no count at all.</p>
<p>Another query, which is used to get the total number of rows, should nev=
er be using anything like row count. Instead of selecting actual rows and t=
hen discarding them, only to get the count, one have to get just the count =
already, by using a select count(*) query. Otherwise it will defeat the ver=
y purpose of pagination: selecting only a smaller amount of data that will =
be actually processed. It's not a big deal for a personal home page, but se=
lecting all the big data only to count it may kill a mature site.</p>      =
        </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-280">
              <div class=3D"comment-author">
              	MF, 29.09.17 14:57              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi!
Whoever you are. I just wanted to let you know, that all your tips and best=
 practices are helping me a lot to code better and more efficient.
I can't thank you enough!</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-279">
              <div class=3D"comment-author">
              	K, 28.09.17 22:48              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I ju=
st wanted to say thank you - your solution worked perfectly!</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-277">
              <div class=3D"comment-author">
              	JamesP, 27.09.17 11:50              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>So I=
 understand PDO Prepared Statements should protect from SQL injection and '=
 escapes. But when I attempted the following...</p>
<pre><code><code><span style=3D"color: #0000BB">&nbsp;&nbsp;&nbsp;&nbsp;$id=
&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"=
color: #DD0000">"2'&nbsp;AND&nbsp;name=3D'Entry2"</span><span style=3D"colo=
r: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000=
BB">$someinfo&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><s=
pan style=3D"color: #DD0000">"updated"</span><span style=3D"color: #007700"=
>;<br>&nbsp;&nbsp;&nbsp;&nbsp;...</span><span style=3D"color: #0000BB">DB&n=
bsp;Stuff</span><span style=3D"color: #007700">...<br>&nbsp;&nbsp;&nbsp;&nb=
sp;</span><span style=3D"color: #0000BB">$conn&nbsp;</span><span style=3D"c=
olor: #007700">=3D&nbsp;new&nbsp;</span><span style=3D"color: #0000BB">PDO<=
/span><span style=3D"color: #007700">(</span><span style=3D"color: #DD0000"=
>"mysql:host=3D</span><span style=3D"color: #0000BB">$servername</span><spa=
n style=3D"color: #DD0000">;dbname=3D</span><span style=3D"color: #0000BB">=
$dbname</span><span style=3D"color: #DD0000">"</span><span style=3D"color: =
#007700">,&nbsp;</span><span style=3D"color: #0000BB">$username</span><span=
 style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$dbp=
assword</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;=
</span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span style=3D"colo=
r: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$conn</span><spa=
n style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">prepa=
re</span><span style=3D"color: #007700">(</span><span style=3D"color: #DD00=
00">"UPDATE&nbsp;testdb&nbsp;SET&nbsp;info=3D:someinfo&nbsp;WHERE&nbsp;id=
=3D:id"</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;=
</span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #00=
7700">-&gt;</span><span style=3D"color: #0000BB">bindParam</span><span styl=
e=3D"color: #007700">(</span><span style=3D"color: #DD0000">':id'</span><sp=
an style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$i=
d</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;</span=
><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">=
-&gt;</span><span style=3D"color: #0000BB">bindParam</span><span style=3D"c=
olor: #007700">(</span><span style=3D"color: #DD0000">':someinfo'</span><sp=
an style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$s=
omeinfo</span><span style=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;=
</span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #00=
7700">-&gt;</span><span style=3D"color: #0000BB">execute</span><span style=
=3D"color: #007700">();</span><span style=3D"color: #0000BB"></span></code>=
</code></pre>
<p>Then the row with id=3D2 and name=3Dentry2 would be updated. I should no=
te, I only saw this behavior within the "WHERE ..." part of the query. It d=
id not escape in the "SET...WHERE" part of the query, and I wasn't able to =
add any additional queries in either. I observed the same behavior when I t=
ried with mysqli as well.</p>
<p>That said, I didn't find anyone pointing this out anywhere, and when I a=
sked on Stack Overflow, no one believed me. I could probably just manually =
replace ' instances with something else for storage and replace again for o=
utput, but the fact that I'm the only one who seems to observe this has me =
seriously confused. Any insight would be greatly appreciated.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello James!</p>
<p>It is quite strange that on Stack Overflow nobody believed you, as the b=
ehavior is quite expected, given the way mysql (and PHP as well) treat inpu=
t values. Well, nothing strange on the other hand, given the average level =
of expertise there. </p>
<p>So, the issue is not actually an injection, neither it has anything to d=
o with PDO. It's an integral part of MySQL. By default, in the older versio=
ns of Mysql (pre 5.7. if I am not mistaken), when casting input value to an=
 integer, it takes first numeric characters, cutting off everything else. Y=
ou can see it with such a simple example:</p>
<pre><code><code><span style=3D"color: #0000BB">mysql</span><span style=3D"=
color: #007700">&gt;&nbsp;</span><span style=3D"color: #0000BB">select&nbsp=
;</span><span style=3D"color: #DD0000">'25&nbsp;ponies'&nbsp;</span><span s=
tyle=3D"color: #007700">+&nbsp;</span><span style=3D"color: #0000BB">0</spa=
n><span style=3D"color: #007700">;<br>+-----------------+<br>|&nbsp;</span>=
<span style=3D"color: #DD0000">'25&nbsp;ponies'&nbsp;</span><span style=3D"=
color: #007700">+&nbsp;</span><span style=3D"color: #0000BB">0&nbsp;</span>=
<span style=3D"color: #007700">|<br>+-----------------+<br>|&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span=
><span style=3D"color: #0000BB">25&nbsp;</span><span style=3D"color: #00770=
0">|<br>+-----------------+</span><span style=3D"color: #0000BB"></span></c=
ode></code></pre>
<p>As you can see, the value become just 25 when cast to an integer to perf=
orm an arithmetic operation. </p>
<p>Exactly the same happened in your example. Value "2" has been taken out =
of the "2' AND name=3D'Entry2" string which made a legitimate query and thu=
s the record got updated.</p>
<p>To prevent this behavior you can set mysql in strict mode, like </p>
<pre><code><code><span style=3D"color: #0000BB">set&nbsp;SQL_MODE</span><sp=
an style=3D"color: #007700">=3D</span><span style=3D"color: #DD0000">'STRIC=
T_TRANS_TABLES'</span><span style=3D"color: #007700">;</span><span style=3D=
"color: #0000BB"></span></code></code></pre>
<p>it will start throwing errors for the malformed numeric values instead o=
f silently casting them. </p>
<p>I've reopened your question on Stack Overflow, you can now write an answ=
er for it and link to this comment, <a href=3D"https://phpdelusions.net/pdo=
#comment-277">https://phpdelusions.net/pdo#comment-277</a> as a proof</p>  =
            </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-276">
              <div class=3D"comment-author">
              	Your Friendly PHP Neighbour, 26.09.17 19:10              </d=
iv>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Bewa=
re that nothing will alert you about the lack of support for the <code>PDO:=
:MYSQL_ATTR_FOUND_ROWS</code> attribute.</p>
<p>Only way to check if your PHP is going to ignore this attribute is to ca=
ll <code>$pdo-&gt;getAttribute(PDO::MYSQL_ATTR_FOUND_ROWS)</code>. Not sure=
 why this <a href=3D"https://bugs.php.net/bug.php?id=3D62782">isn't done wh=
en setting the attribute</a>. Go figure the reasoning behind this.</p>
<p>To reiterate: </p>
<ol>
<li>The PDO class constant <code>PDO::MYSQL_ATTR_FOUND_ROWS</code> doesn't =
always work, <a href=3D"https://bugs.php.net/bug.php?id=3D63781">even if th=
e constant is defined</a>.</li>
<li>To test if it will work, you must use <code>getAttribute()</code>.</li>
<li>If the connection option doesn't work, you're out of luck (short of rec=
ompiling your PDO driver). </li>
<li><a href=3D"https://bugs.php.net/bug.php?id=3D44135">Don't trust the man=
ual.</a>.</li>
</ol></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Neighbour!</p>
<p>I thank you for your valuable info! Looks like an important case. I adde=
d the link to this comment to the article.</p>
<p>Though I can answer one of your concerns. Given that <code>MYSQL_ATTR_FO=
UND_ROWS</code> is a <em>connection</em> option for MySQL, it's impossible =
to use it anywhere else, and thus there is no way to change this parameter =
on the fly, within the same connection, unless Mysqli C API will be changed=
.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-275">
              <div class=3D"comment-author">
              	K, 20.09.17 22:45              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,<=
/p>
<p>I'm sorry if my previous question was unclear, but I'd love an answer, e=
ven as to whether this is possible, if you have the time.</p>
<p>I'd like to do something like this:</p>
<pre><code><code><span style=3D"color: #0000BB">$query&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$dbc<=
/span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #000=
0BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"co=
lor: #DD0000">"UPDATE<br>&nbsp;&nbsp;&nbsp;&nbsp;customer_info<br>&nbsp;&nb=
sp;&nbsp;&nbsp;SET<br>&nbsp;&nbsp;&nbsp;&nbsp;customer_name&nbsp;=3D&nbsp;:=
customer_name,<br>&nbsp;&nbsp;&nbsp;&nbsp;billing_email&nbsp;=3D&nbsp;:bill=
ing_email<br>&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;customer_id&nbsp;=3D&nbsp;:=
customer_id"</span><span style=3D"color: #007700">);</span><span style=3D"c=
olor: #0000BB"></span></code></code></pre>
<p>where customer_name and customer_email come from (sanitized) user inputs=
. Is it possible to format this query so that if I wanted to update ONLY th=
e customer name or ONLY the customer email it would not overwrite the item =
that I'm NOT updating? So if the user inputs a customer name and leaves the=
 email blank, it will update the name but preserve the email that is alread=
y in the database.</p>
<p>In order to do this would I have to write a separate query for each item=
? In my actual code I have many other items that I'd like to be able to upd=
ate without overwriting the information in all of the database columns at o=
nce. It seems like using positional parameters might be a solution, but I h=
aven't been able to get it to work. I was hoping you could tell me if this =
is possible, thanks!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello!</p>
<p>Sorry for the delayed answer, by the time you asked for the first time, =
I've been on vacations and missed your comment.</p>
<p>What I would suggest is to create a query dynamically, from the array pr=
ovided, as it's explained in <a href=3D"https://phpdelusions.net/pdo/sql_in=
jection_example#solution">this article</a></p>
<p>So it should be like</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #FF8000">//&nbsp;create&nbsp;an&nbsp;array&nbsp;that&nbsp;contains&nbsp;f=
ields&nbsp;you&nbsp;want&nbsp;to&nbsp;update<br></span><span style=3D"color=
: #0000BB">$data&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;[</spa=
n><span style=3D"color: #DD0000">"customer_name"</span><span style=3D"color=
: #007700">]&nbsp;=3D&nbsp;</span><span style=3D"color: #DD0000">"something=
"</span><span style=3D"color: #007700">;<br><br></span><span style=3D"color=
: #FF8000">//&nbsp;create&nbsp;a&nbsp;whitelist&nbsp;to&nbsp;be&nbsp;sure<b=
r></span><span style=3D"color: #0000BB">$allowed&nbsp;</span><span style=3D=
"color: #007700">=3D&nbsp;[</span><span style=3D"color: #DD0000">"customer_=
name"</span><span style=3D"color: #007700">,</span><span style=3D"color: #D=
D0000">"billing_email"</span><span style=3D"color: #007700">];<br><br></spa=
n><span style=3D"color: #FF8000">//&nbsp;create&nbsp;a&nbsp;SET&nbsp;clause=
&nbsp;dynamically<br></span><span style=3D"color: #0000BB">$params&nbsp;</s=
pan><span style=3D"color: #007700">=3D&nbsp;[];<br></span><span style=3D"co=
lor: #0000BB">$setStr&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;<=
/span><span style=3D"color: #DD0000">""</span><span style=3D"color: #007700=
">;<br>foreach&nbsp;(</span><span style=3D"color: #0000BB">$allowed&nbsp;</=
span><span style=3D"color: #007700">as&nbsp;</span><span style=3D"color: #0=
000BB">$key</span><span style=3D"color: #007700">)<br>{<br>&nbsp;&nbsp;&nbs=
p;&nbsp;if&nbsp;(isset(</span><span style=3D"color: #0000BB">$data</span><s=
pan style=3D"color: #007700">[</span><span style=3D"color: #0000BB">$key</s=
pan><span style=3D"color: #007700">])&nbsp;&amp;&amp;&nbsp;</span><span sty=
le=3D"color: #0000BB">$key&nbsp;</span><span style=3D"color: #007700">!=3D&=
nbsp;</span><span style=3D"color: #DD0000">"id"</span><span style=3D"color:=
 #007700">)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$setStr&nbsp;</span>=
<span style=3D"color: #007700">.=3D&nbsp;</span><span style=3D"color: #DD00=
00">"`"</span><span style=3D"color: #007700">.</span><span style=3D"color: =
#0000BB">str_replace</span><span style=3D"color: #007700">(</span><span sty=
le=3D"color: #DD0000">"`"</span><span style=3D"color: #007700">,&nbsp;</spa=
n><span style=3D"color: #DD0000">"``"</span><span style=3D"color: #007700">=
,&nbsp;</span><span style=3D"color: #0000BB">$key</span><span style=3D"colo=
r: #007700">).</span><span style=3D"color: #DD0000">"`&nbsp;=3D&nbsp;:"</sp=
an><span style=3D"color: #007700">.</span><span style=3D"color: #0000BB">$k=
ey</span><span style=3D"color: #007700">.</span><span style=3D"color: #DD00=
00">","</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$params</span>=
<span style=3D"color: #007700">[</span><span style=3D"color: #0000BB">$key<=
/span><span style=3D"color: #007700">]&nbsp;=3D&nbsp;</span><span style=3D"=
color: #0000BB">$_POST</span><span style=3D"color: #007700">[</span><span s=
tyle=3D"color: #0000BB">$key</span><span style=3D"color: #007700">];<br>&nb=
sp;&nbsp;&nbsp;&nbsp;}<br>}<br></span><span style=3D"color: #0000BB">$setSt=
r&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D=
"color: #0000BB">rtrim</span><span style=3D"color: #007700">(</span><span s=
tyle=3D"color: #0000BB">$setStr</span><span style=3D"color: #007700">,&nbsp=
;</span><span style=3D"color: #DD0000">","</span><span style=3D"color: #007=
700">);<br></span><span style=3D"color: #0000BB">$params</span><span style=
=3D"color: #007700">[</span><span style=3D"color: #DD0000">'id'</span><span=
 style=3D"color: #007700">]&nbsp;=3D&nbsp;</span><span style=3D"color: #000=
0BB">$id</span><span style=3D"color: #007700">;<br></span><span style=3D"co=
lor: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span s=
tyle=3D"color: #0000BB">prepare</span><span style=3D"color: #007700">(</spa=
n><span style=3D"color: #DD0000">"UPDATE&nbsp;customer_info&nbsp;SET&nbsp;<=
/span><span style=3D"color: #0000BB">$setStr</span><span style=3D"color: #D=
D0000">&nbsp;WHERE&nbsp;customer_id&nbsp;=3D&nbsp;:id"</span><span style=3D=
"color: #007700">)-&gt;</span><span style=3D"color: #0000BB">execute</span>=
<span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$para=
ms</span><span style=3D"color: #007700">);</span><span style=3D"color: #000=
0BB"></span></code></code></pre>
<p>Feel free to ask if you have any other questions</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-273">
              <div class=3D"comment-author">
              	Jeremy, 15.09.17 11:04              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you for your reply.
I will give more detail into my reasoning.</p>
<p>I have an online store i have built and i am afraid that a customer may =
be left on a blank page or an abruptly ended script without reason during t=
he checkout process, or post checkout process receiving their order confirm=
ation. I've encountered such an error myself on another website from having=
 an intermittent internet connection and being left without any notificatio=
n it leaves fear of having paid for something without the order having bein=
g processed properly on their end. </p>
<p>I've been trying to handle every single type of error imaginable so my c=
ode is full of try... catches as well as a billion if statements. I'm despe=
rately trying make my coding much more efficient. </p>
<p>My use of the try... catch operator would also be that if there was an e=
rror on a product page I would have liked it to just keep the script runnin=
g and display the 'Sorry we could not find your product' situation, as a ki=
nd of diversion until i can fix what is wrong.</p>
<p>I will read you article on error reporting in further depth.</p>
<p>Thank you</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Jeremy!</p>
<p>I am eager to hear what are your thoughts after reading the article? Do =
you agree that centralized error reporting is better than catching every  e=
xception separately?</p>
<p>At the very least you an create a global try..catch wrapping your whole =
code from start to end. But To me, using a handler is more elegant solution=
</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-272">
              <div class=3D"comment-author">
              	David Entwistle, 11.09.17 18:05              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Plea=
se can you help me resolve an issue?
I have a user input box which starts a search of a PDO MySql table :- using=
 this code snippet.&lt;input type=3D"text" name =3D "t1" id=3D"t1" placehol=
der=3D"Enter an RD number"&gt;
&lt;input type=3D"button" name=3D"button1" value=3D"GO" onClick=3D"aa();"&g=
t; &lt;/td&gt;
&lt;td colspan=3D"2" align=3D"center"&gt;&lt;div id=3D"d1"&gt;&lt;/td&gt;
via this code- &lt;script type=3D"text/javascript"&gt;
function aa()
{
var xmlhttp=3Dnew XMLHttpRequest();
xmlhttp.open("GET","getrd.php?Regno=3D"+document.getElementById("t1").value=
,false);
xmlhttp.send(null);
document.getElementById("d1").innerHTML=3Dxmlhttp.responseText;&lt;script&g=
t; this returns 3 data items.  All this works. My issue is how can I put th=
ese 3 data items into &lt;input type=3D"text" name =3D "Rd" id=3D"ret1" pla=
ceholder=3D"Rd No" &gt;
&lt;input type=3D"text" name =3D "Dn" id=3D"ret2" placeholder=3D"DN"&gt;
&lt;input type=3D"text" name =3D "St" id=3D"ret3" placeholder=3D"Status"&gt=
;
I have tried a number of variations of the above code without success, I am=
 sure there is a way to do it but I am unable to get there yet.
Many thanks.
David.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-271">
              <div class=3D"comment-author">
              	Jeremy, 08.09.17 01:01              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>So i=
 understand that i shouldn't use try .. catch for error reporting. But is i=
t fine to use for displaying a custom notification to the user that an erro=
r has occurred?</p>
<p>Furthermore, if omitting rowCount as a boolean flag and using the $stmt =
variable to see if any data was returned;</p>
<pre><code><code><span style=3D"color: #0000BB">$data&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;table"</span><span style=3D"color:=
 #007700">)-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span =
style=3D"color: #007700">();<br>if&nbsp;(</span><span style=3D"color: #0000=
BB">$data</span><span style=3D"color: #007700">)&nbsp;{<br>&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #FF8000">//&nbsp;You&nbsp;have&nbsp;th=
e&nbsp;data!&nbsp;No&nbsp;need&nbsp;for&nbsp;the&nbsp;rowCount()&nbsp;ever!=
<br></span><span style=3D"color: #007700">}</span><span style=3D"color: #00=
00BB"></span></code></code></pre>
<p>If an exception has been thrown and caught the $data variable remains se=
t and giving a true boolean value even though there is no data present, and=
 it doesn't seem possible to globally unset($data) inside the catch as it's=
 a function.</p>
<p>I would like to catch an error to notify the use 'Something went wrong' =
and to return a false boolean flag to handle the rest of the script outside=
 of the try... catch. How would you recommend the best way i can achieve th=
is?</p>
<p>I'm still learning programming.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Jeremy!</p>
<p>Sorry for the delayed answer, I've been on vacation.</p>
<p>Regarding the first question, it is <em>extremely seldom</em> when you n=
eed to provide a custom error message. Given you are still learning, it is =
possible that your understanding of the error reporting is rather wrong. Ki=
ndly read this article, <a href=3D"https://phpdelusions.net/articles/error_=
reporting">https://phpdelusions.net/articles/error_reporting</a> and I hope=
 you'll change your mind. </p>
<p>The second question is simpler to answer. If an exception has been throw=
n and caught, the $data variable is <strong>not set</strong>, so there is n=
o trouble with unsetting it whatsoever. </p>
<p>If you want to continue the script execution even in case of error, it's=
 a <strong>fair use</strong> of the try..catch operator. But still, I canno=
t imagine the practical case. Could you please comment back with a little m=
ore detailed description of the scenario you have in mind?</p>             =
 </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-268">
              <div class=3D"comment-author">
              	Adri, 03.09.17 18:25              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you for that. However, I'm now confused even more. I get:  "Fatal error: =
Call to a member function query() on null" and then the path to the documen=
t... Alternatively, I get a blank page</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Well, this one is simple. All you need is=
 to read the article above, Particularly the <a href=3D"https://phpdelusion=
s.net/pdo#errors">error reporting</a> part. You didn't tell a database to r=
eport mysql errors and thus getting this cryptic one. Just make it the prop=
er way and see.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-266">
              <div class=3D"comment-author">
              	Adri, 03.09.17 15:54              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks very much (hope formatting is correct). Here it is. I created one class =
for connecting to my database:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">&lt;?</span><span style=3D"color: #0000BB">php<br></span><span s=
tyle=3D"color: #007700">class&nbsp;</span><span style=3D"color: #0000BB">Da=
tabase&nbsp;</span><span style=3D"color: #007700">{<br>private&nbsp;static&=
nbsp;</span><span style=3D"color: #0000BB">$instance&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">null</s=
pan><span style=3D"color: #007700">;<br>private&nbsp;function&nbsp;</span><=
span style=3D"color: #0000BB">__construct</span><span style=3D"color: #0077=
00">(){}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;function&=
nbsp;</span><span style=3D"color: #0000BB">getInstance</span><span style=3D=
"color: #007700">()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(</span><span=
 style=3D"color: #0000BB">is_null</span><span style=3D"color: #007700">(</s=
pan><span style=3D"color: #0000BB">self</span><span style=3D"color: #007700=
">::</span><span style=3D"color: #0000BB">$instance</span><span style=3D"co=
lor: #007700">)){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"co=
lor: #0000BB">self</span><span style=3D"color: #007700">::</span><span styl=
e=3D"color: #0000BB">$instance&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;new&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span sty=
le=3D"color: #007700">(</span><span style=3D"color: #DD0000">"mysql:host=3D=
localhost;dbname=3Delektroakustika;"</span><span style=3D"color: #007700">,=
&nbsp;</span><span style=3D"color: #DD0000">"root"</span><span style=3D"col=
or: #007700">,&nbsp;</span><span style=3D"color: #DD0000">""</span><span st=
yle=3D"color: #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style=3D"color: #0000BB">self</=
span><span style=3D"color: #007700">::</span><span style=3D"color: #0000BB"=
>$instance</span><span style=3D"color: #007700">;&nbsp;<br>&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><span st=
yle=3D"color: #0000BB"></span></code></code></pre>
<p>And now I'm making one that is supposed to handle queries (called it Act=
iveRecord as that is the pattern I'm trying to implement):</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">abstract&nbsp;class&nbsp;</span><span style=3D"color: #0000BB">A=
ctiveRecord&nbsp;</span><span style=3D"color: #007700">{&nbsp;&nbsp;&nbsp;<=
br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;</span><span style=3D"c=
olor: #0000BB">$conn</span><span style=3D"color: #007700">;<br>&nbsp;&nbsp;=
&nbsp;&nbsp;public&nbsp;static&nbsp;function&nbsp;</span><span style=3D"col=
or: #0000BB">getAll</span><span style=3D"color: #007700">(){<br>&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">=
$conn&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span styl=
e=3D"color: #0000BB">Database</span><span style=3D"color: #007700">::</span=
><span style=3D"color: #0000BB">getInstance</span><span style=3D"color: #00=
7700">();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span s=
tyle=3D"color: #0000BB">$table&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;static::</span><span style=3D"color: #0000BB">$table</span><span s=
tyle=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</span><span style=3D"color: #0000BB">$q&nbsp;</span><span style=3D"color=
: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$conn</span><span=
 style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">query<=
/span><span style=3D"color: #007700">(</span><span style=3D"color: #DD0000"=
>"select&nbsp;*&nbsp;from&nbsp;</span><span style=3D"color: #007700">{</spa=
n><span style=3D"color: #0000BB">$table</span><span style=3D"color: #007700=
">}</span><span style=3D"color: #DD0000">"</span><span style=3D"color: #007=
700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span sty=
le=3D"color: #0000BB">$res&nbsp;</span><span style=3D"color: #007700">=3D&n=
bsp;</span><span style=3D"color: #0000BB">$q</span><span style=3D"color: #0=
07700">-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span styl=
e=3D"color: #007700">();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;return&nbsp;</span><span style=3D"color: #0000BB">$res</span><span style=
=3D"color: #007700">;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</span><span style=
=3D"color: #0000BB"></span></code></code></pre>
<p>Finally, I plan to create a class for each table in my db, that will ext=
end the previous class and use one of the methods I'll create in ActiveReco=
rd. Something like this: </p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">class&nbsp;</span><span style=3D"color: #0000BB">Autor&nbsp;</sp=
an><span style=3D"color: #007700">extends&nbsp;</span><span style=3D"color:=
 #0000BB">ActiveRecord&nbsp;</span><span style=3D"color: #007700">{<br>&nbs=
p;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;</span><span style=3D"color: #0=
000BB">$table&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><s=
pan style=3D"color: #DD0000">"autor"</span><span style=3D"color: #007700">;=
<br>}<br></span><span style=3D"color: #0000BB">$conn&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">Databas=
e</span><span style=3D"color: #007700">::</span><span style=3D"color: #0000=
BB">getInstance</span><span style=3D"color: #007700">();<br></span><span st=
yle=3D"color: #0000BB">$allAutors&nbsp;</span><span style=3D"color: #007700=
">=3D&nbsp;</span><span style=3D"color: #0000BB">Autor</span><span style=3D=
"color: #007700">::</span><span style=3D"color: #0000BB">getAll</span><span=
 style=3D"color: #007700">();<br></span><span style=3D"color: #0000BB">prin=
t_r</span><span style=3D"color: #007700">(</span><span style=3D"color: #000=
0BB">$allAutors</span><span style=3D"color: #007700">);</span><span style=
=3D"color: #0000BB"></span></code></code></pre>
<p>When I run the last code, I get the error, so obviously, my query is wro=
ng. I realize this is quite basic, but I can't seem to solve the problem. T=
hank you!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Adri!</p>
<p>Sorry I forgot to mention that a code should be padded by empty lines as=
 well. But nevermind, I already added them.</p>
<p>First and foremost: the "error" you are getting is not just a red card t=
elling you that you failed something. It usually <strong>explains</strong> =
what specific error you made. So it's always worth to read what the error s=
ays or at least provide to a person you are asking for help. There could be=
 thousands errors, and its no use to stare at the code looking for them if =
PHP can tell you that already. Especially because it can be caused not by t=
he code itself but by some other issue - a database, or server config or wh=
atever.</p>
<p>As of your code, I tried it and it works.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-265">
              <div class=3D"comment-author">
              	Adri, 02.09.17 16:49              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi! =
I'm trying to implement PDO in my code (I'm a complete noob, by the way) an=
d I have a "why won't this work" type of issue. Would you mind checking it =
out (I'm not sure if that is OK, which is why I'm not sharing the code now)=
? Thanks for your explanations, by the way, they are incredibly useful!</p>=
</div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Adri!</p>
<p>Yes it's all right to ask a question here. Just make sure that your code=
 is indented by 4 spaces, so it will be nicely formatted</p>              <=
/div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-261">
              <div class=3D"comment-author">
              	Valdas, 27.08.17 23:18              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks a lot, PDO is FTW :)))</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-257">
              <div class=3D"comment-author">
              	K, 25.08.17 17:50              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
sorry if this is a double post! I wasn't sure if my other comment was in mo=
deration or disappeared. </p>
<p>Thanks for the great tutorial, it's one of the best I've come across for=
 learning to use PDO. </p>
<p>I was wondering if you could give an example of how to create a PDO upda=
te query where you can have a variable number of inputs. So for example if =
I have a form where I can update a customer's name, email, or phone number.=
 But sometimes I want to update only one at a time without overwriting the =
information already in the database.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-255">
              <div class=3D"comment-author">
              	Tomi, 14.08.17 20:17              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Awes=
ome! I'm just learning PHP and this was the first tutorial that made any se=
nse. Most have code without going to the details which are the most confusi=
ng part at the start</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Tomi!</p>
<p>Thank you for your kind words!</p>
<p>Can you do me a favor? I am going to add a section called "PDO examples"=
 with practical examples of PDO usage. If you can think of any example case=
 you'd like you see, please drop a comment.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-254">
              <div class=3D"comment-author">
              	abinax, 11.08.17 22:27              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k You</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-251">
              <div class=3D"comment-author">
              	Trevor S, 26.07.17 21:27              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>This=
 is an awesome guide, thanks so much for this.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-250">
              <div class=3D"comment-author">
              	Christian, 24.07.17 18:05              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>So a=
 normal use case would be like this.</p>
<pre><code><code><span style=3D"color: #0000BB">$table&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">=93my=
Table=94</span><span style=3D"color: #007700">;<br></span><span style=3D"co=
lor: #0000BB">$table&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</=
span><span style=3D"color: #DD0000">"`"</span><span style=3D"color: #007700=
">.</span><span style=3D"color: #0000BB">str_replace</span><span style=3D"c=
olor: #007700">(</span><span style=3D"color: #DD0000">"`"</span><span style=
=3D"color: #007700">,</span><span style=3D"color: #DD0000">"``"</span><span=
 style=3D"color: #007700">,</span><span style=3D"color: #0000BB">$table</sp=
an><span style=3D"color: #007700">).</span><span style=3D"color: #DD0000">"=
`"</span><span style=3D"color: #007700">;</span><span style=3D"color: #0000=
BB"></span></code></code></pre>
<p>Now $table is:</p>
<pre><code><code><span style=3D"color: #0000BB">$table&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;`</span><span style=3D"color: #DD0000">myTa=
ble</span><span style=3D"color: #007700">`;</span><span style=3D"color: #00=
00BB"></span></code></code></pre>
<p>Then I use this for query:</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">=93SELE=
CT&nbsp;</span><span style=3D"color: #007700">*&nbsp;</span><span style=3D"=
color: #0000BB">from&nbsp;$table=94</span><span style=3D"color: #007700">;&=
nbsp;</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>or use </p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">=93SELE=
CT&nbsp;</span><span style=3D"color: #007700">*&nbsp;</span><span style=3D"=
color: #0000BB">from&nbsp;</span><span style=3D"color: #007700">`</span><sp=
an style=3D"color: #0000BB">$table</span><span style=3D"color: #007700">`</=
span><span style=3D"color: #0000BB">=94</span><span style=3D"color: #007700=
">;&nbsp;</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>?</p>
<p>Thanks again.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Christian!</p>
<p>If backticks are already added to the identifier, then there is no point=
 to add them again. So it should be your first variant.</p>              </=
div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-249">
              <div class=3D"comment-author">
              	Christian, 24.07.17 16:37              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you for articles and your responses to questions. Can you please clarify =
the section =91Prepared statements and table names=92?</p>
<pre><code><code><span style=3D"color: #0000BB">$table&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"`"</=
span><span style=3D"color: #007700">.</span><span style=3D"color: #0000BB">=
str_replace</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"`"</span><span style=3D"color: #007700">,</span><span style=
=3D"color: #DD0000">"``"</span><span style=3D"color: #007700">,</span><span=
 style=3D"color: #0000BB">$table</span><span style=3D"color: #007700">).</s=
pan><span style=3D"color: #DD0000">"`"</span><span style=3D"color: #0000BB"=
></span></code></code></pre>
<p>I read that MySQL an identifier needs a (`) backtick if it contains spec=
ial characters or is a reserved word. In your example we concatenate (`) ba=
ckticks on both side of the identifier and replace single backticks with do=
uble backticks on original $table variable. So the new $table variable woul=
d be ``identifier`` because extra backticks are like an escape character(\)=
 and that would remove one backtick? How does this sanitize $table variable=
 ? Does this have anything to do with PHP Execution Operators? Thank you fo=
r your help!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Christian!</p>
<p>Thank you for the good question.
Look at this from the point of view of the regular string formatting. To fo=
rmat a string we need to enclose it into delimiters and then escape those d=
elimiters that could happen to be inside. Exactly the same we are doing her=
e: We are adding delimiters (single backticks around) and then escaping the=
se that are could be already inside of the table name. But we don't double =
the surrounding backticks, neither removing any. The above statement could =
be split into two:</p>
<pre><code><code><span style=3D"color: #0000BB">$table&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">str_r=
eplace</span><span style=3D"color: #007700">(</span><span style=3D"color: #=
DD0000">"`"</span><span style=3D"color: #007700">,</span><span style=3D"col=
or: #DD0000">"``"</span><span style=3D"color: #007700">,</span><span style=
=3D"color: #0000BB">$table</span><span style=3D"color: #007700">);&nbsp;</s=
pan><span style=3D"color: #FF8000">//&nbsp;escape&nbsp;possible&nbsp;delimi=
ters&nbsp;inside<br></span><span style=3D"color: #0000BB">$table&nbsp;</spa=
n><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0=
000">"`</span><span style=3D"color: #0000BB">$table</span><span style=3D"co=
lor: #DD0000">)`"</span><span style=3D"color: #007700">;&nbsp;</span><span =
style=3D"color: #FF8000">//&nbsp;adding&nbsp;backticks</span><span style=3D=
"color: #0000BB"></span></code></code></pre>
<p>Imagine we have a table name coming from the user input and a hacker put=
 a backtick inside. Without doubling, with only surrounding backticks we'll=
 get an injection:</p>
<pre><code><code><span style=3D"color: #0000BB">$table&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"tabl=
e`&nbsp;UNION&nbsp;...&nbsp;--"</span><span style=3D"color: #007700">;&nbsp=
;</span><span style=3D"color: #FF8000">//&nbsp;coming&nbsp;from&nbsp;user<b=
r></span><span style=3D"color: #0000BB">$sql&nbsp;</span><span style=3D"col=
or: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT&nbsp;FR=
OM&nbsp;`</span><span style=3D"color: #0000BB">$table</span><span style=3D"=
color: #DD0000">`&nbsp;LIMIT&nbsp;10"</span><span style=3D"color: #007700">=
;</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>will result with malicious query </p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;FROM&nbsp;`table`&nbsp;UNION&nbsp;...&nbsp;--`&nbsp;LIMIT&nbsp;10"</s=
pan><span style=3D"color: #007700">;</span><span style=3D"color: #0000BB"><=
/span></code></code></pre>
<p>whereas with doubled backticks inside the whole statement will make a qu=
ery like this </p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;FROM&nbsp;`table``&nbsp;UNION&nbsp;...&nbsp;--`&nbsp;LIMIT&nbsp;10"</=
span><span style=3D"color: #007700">;</span><span style=3D"color: #0000BB">=
</span></code></code></pre>
<p>Where </p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">`</span><span style=3D"color: #DD0000">table</span><span style=
=3D"color: #007700">``</span><span style=3D"color: #DD0000">&nbsp;UNION&nbs=
p;...&nbsp;--</span><span style=3D"color: #007700">`</span><span style=3D"c=
olor: #0000BB"></span></code></code></pre>
<p>is a single identifier (a-non existent of course, which will produce an =
error, but an error is better than injection).</p>
<p>Hope it is clear now. If not, please ask :)</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-248">
              <div class=3D"comment-author">
              	Christian, 24.07.17 16:32              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you for articles and your responses to questions.  Can you please clarify=
 the section =91Prepared statements and table names=92?</p>
<pre><code><code><span style=3D"color: #0000BB">$table&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"`"</=
span><span style=3D"color: #007700">.</span><span style=3D"color: #0000BB">=
str_replace</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"`"</span><span style=3D"color: #007700">,</span><span style=
=3D"color: #DD0000">"``"</span><span style=3D"color: #007700">,</span><span=
 style=3D"color: #0000BB">$table</span><span style=3D"color: #007700">).</s=
pan><span style=3D"color: #DD0000">"`"</span><span style=3D"color: #0000BB"=
></span></code></code></pre>
<p>I read that MySQL an identifier needs a (<code>) backtick if it contains=
 special characters or is a reserved word. In your example we concatenate (=
</code>) backticks on both side of the identifier and replace single backti=
cks with double backticks on original $table variable.  So the new $table v=
ariable would be <code>identifier</code> because extra backticks are like a=
n escape character() and that would remove one backtick?  How does this san=
itize $table variable ? Does this have anything to do with PHP Execution Op=
erators? Thank you for your help!</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-245">
              <div class=3D"comment-author">
              	Bill Hayden, 13.07.17 13:44              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Ther=
e seems to be a bug in the code sample that describes the foreach functiona=
lity:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">'SELECT&nbsp;name&nbsp;FROM&nbsp;users'</span><span style=3D"col=
or: #007700">);<br>foreach&nbsp;(</span><span style=3D"color: #0000BB">$stm=
t&nbsp;</span><span style=3D"color: #007700">as&nbsp;</span><span style=3D"=
color: #0000BB">$row</span><span style=3D"color: #007700">)<br>{<br>&nbsp;&=
nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style=3D"color: #0000BB">$row</span=
><span style=3D"color: #007700">[</span><span style=3D"color: #DD0000">'nam=
e'</span><span style=3D"color: #007700">]&nbsp;.&nbsp;</span><span style=3D=
"color: #DD0000">"\n"</span><span style=3D"color: #007700">;<br>}</span><sp=
an style=3D"color: #0000BB"></span></code></code></pre>
<p>This should be:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">query</span><span style=3D"color: #007700">(</span><span style=3D"color=
: #DD0000">'SELECT&nbsp;name&nbsp;FROM&nbsp;users'</span><span style=3D"col=
or: #007700">);<br>foreach&nbsp;(</span><span style=3D"color: #0000BB">$stm=
t</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0=
000BB">fetchAll</span><span style=3D"color: #007700">()&nbsp;as&nbsp;</span=
><span style=3D"color: #0000BB">$row</span><span style=3D"color: #007700">)=
<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style=3D"color: #00=
00BB">$row</span><span style=3D"color: #007700">[</span><span style=3D"colo=
r: #DD0000">'name'</span><span style=3D"color: #007700">]&nbsp;.&nbsp;</spa=
n><span style=3D"color: #DD0000">"\n"</span><span style=3D"color: #007700">=
;<br>}</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Alternatively, you could put -&gt;fetchAll() at the end of the $stmt ass=
ignment instead of in the foreach.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello, Bill!</p>
<p>There is no error and there is an explanation why it is so.</p>
<p>Let me suggest you to try the first code snippet yourself, see it actual=
ly works and then follow the link from the article explaining the trick :)<=
/p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-244">
              <div class=3D"comment-author">
              	Christian, 12.07.17 22:17              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Does=
 Sanitizing like the following make sense?</p>
<pre><code><code><span style=3D"color: #0000BB">$pdo&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;new&nbsp;</span><span style=3D"color: #0000BB=
">PDO</span><span style=3D"color: #007700">(</span><span style=3D"color: #D=
D0000">'sqlite:/path/db/users.db'</span><span style=3D"color: #007700">);<b=
r></span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span style=3D"co=
lor: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><sp=
an style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">prep=
are</span><span style=3D"color: #007700">(</span><span style=3D"color: #DD0=
000">'SELECT&nbsp;name&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;id&nbsp;=3D&nbs=
p;:id'</span><span style=3D"color: #007700">);<br></span><span style=3D"col=
or: #FF8000">//&nbsp;filter&nbsp;your&nbsp;data&nbsp;first&nbsp;,&nbsp;espe=
cially&nbsp;important&nbsp;for&nbsp;INSERT,&nbsp;UPDATE,&nbsp;etc.<br></spa=
n><span style=3D"color: #0000BB">$id&nbsp;</span><span style=3D"color: #007=
700">=3D&nbsp;</span><span style=3D"color: #0000BB">filter_input</span><spa=
n style=3D"color: #007700">(</span><span style=3D"color: #0000BB">INPUT_GET=
</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #=
DD0000">'id'</span><span style=3D"color: #007700">,&nbsp;</span><span style=
=3D"color: #0000BB">FILTER_SANITIZE_NUMBER_INT</span><span style=3D"color: =
#007700">);&nbsp;&nbsp;<br></span><span style=3D"color: #FF8000">//&nbsp;Au=
tomatically&nbsp;sanitized&nbsp;for&nbsp;SQL&nbsp;by&nbsp;PDO<br></span><sp=
an style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt=
;</span><span style=3D"color: #0000BB">bindParam</span><span style=3D"color=
: #007700">(</span><span style=3D"color: #DD0000">':id'</span><span style=
=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$id</span>=
<span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB"=
>PDO</span><span style=3D"color: #007700">::</span><span style=3D"color: #0=
000BB">PARAM_INT</span><span style=3D"color: #007700">);&nbsp;<br></span><s=
pan style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-&g=
t;</span><span style=3D"color: #0000BB">execute</span><span style=3D"color:=
 #007700">();</span><span style=3D"color: #0000BB"></span></code></code></p=
re></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Christian!</p>
<p>If you mean <code>filter_input()</code>, it's superfluous for this code =
snippet. Using prepared statement is secure enough. So, an extra sanitizati=
on won't make too much sense.</p>
<p>Personally, I would make such a snippet quite shorter</p>
<pre><code><code><span style=3D"color: #0000BB">$pdo&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;new&nbsp;</span><span style=3D"color: #0000BB=
">PDO</span><span style=3D"color: #007700">(</span><span style=3D"color: #D=
D0000">'sqlite:/path/db/users.db'</span><span style=3D"color: #007700">);<b=
r></span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span style=3D"co=
lor: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><sp=
an style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">prep=
are</span><span style=3D"color: #007700">(</span><span style=3D"color: #DD0=
000">'SELECT&nbsp;name&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;id&nbsp;=3D&nbs=
p;?'</span><span style=3D"color: #007700">);<br></span><span style=3D"color=
: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span sty=
le=3D"color: #0000BB">execute</span><span style=3D"color: #007700">([</span=
><span style=3D"color: #0000BB">$_GET</span><span style=3D"color: #007700">=
[</span><span style=3D"color: #DD0000">'id'</span><span style=3D"color: #00=
7700">]]);&nbsp;</span><span style=3D"color: #0000BB"></span></code></code>=
</pre>
<p>but it's only a matter of taste and you can keep with manual binding and=
 named parameters.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-243">
              <div class=3D"comment-author">
              	David Entwistle, 10.07.17 16:22              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks for your reply.  When a user has logged in they presented with a menu sc=
reen to choose where on the site they want to work. Then a menu second allo=
ws them to select a sub area to work in according to their user rights. its=
 function is to open MySql tables via a PDO connection. this is the problem=
 screen. it is taking too long to appear. Thanks David E.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>It's hard to tell what could be a problem=
.
But at least try to change "localhost" to 127.0.0.1 in the DSN.</p>
<p>If it's not the case, you need to investigate more, what particular oper=
ator in your code takes all the time.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-242">
              <div class=3D"comment-author">
              	David Entwistle, 10.07.17 15:01              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Many=
 thanks for your prompt reply. I was trying to avoid the "waiting for" mess=
ages.  Your answer is very much appreciated. Thanks again. David E.</p></di=
v>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Can you please elaborate on these "waitin=
g for" messages? May be I can offer some solution, but for the moment I am =
not quite getting what is it.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-241">
              <div class=3D"comment-author">
              	David Entwistle, 10.07.17 14:45              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>A qu=
estion of good practice.
Is it appropriate to create database connection at login time and then not =
close the connection until logging out ?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello David!</p>
<p>thank you for the good question.</p>
<p>It depends on what you're calling "login" and "logout".<br>
In case you're talking of a user visiting your site, it would be impossible=
. The nature of PHP's life-cycle is atomic. It starts every time a user vis=
its another page, generates the page to be shown, and then dies, a fraction=
 of second after starting. And so with every new page a new PDO connection =
inevitably have to be established.</p>
<p>In case you are talking of a single script execution - yes, like it said=
 in the article, the connection should be established only once.</p>
<p>You're welcome to ask if something is still unclear for you!</p>        =
      </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-240">
              <div class=3D"comment-author">
              	Sujata, 10.07.17 14:14              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><blockq=
uote>
<p>Thanks for the great article!</p>
</blockquote></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-238">
              <div class=3D"comment-author">
              	David Entwistle, 06.07.17 18:06              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Many=
 thanks for the updated code, it is working perfectly now.  Very much appre=
ciated. Kind regards. David E.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-236">
              <div class=3D"comment-author">
              	David Entwistle, 05.07.17 14:55              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Many=
 thanks for rapid response to my PDO query and thanks for the conversion co=
ding.
I have this line in my connection code already, but I did add your line to =
the new script. PDO::ATTR_EMULATE_PREPARES   =3D&gt; false,
However I am still getting error message SQLSTATE[42000]: Syntax error or a=
ccess violation: 1064 You have an error in your SQL syntax; check the manua=
l that corresponds to your MySQL server version for the right syntax to use=
 near 'LIKE ? ORDER BY Friendship LIMIT ?,?' at line 1. I am stuck now. Hop=
e you can help me. Many thanks.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello David!</p>
<p>First, I must confess that I made a terrible mistake. I overlooked the s=
evere vulnerability in your code. If $option is coming from the browser, th=
en it's a disaster. You should sanitize this variable, checking it against =
an array of predefined values. And most likely this is the source of the er=
ror you are getting.</p>
<p>So the final code would be</p>
<pre><code><code><span style=3D"color: #0000BB">$options&nbsp;</span><span =
style=3D"color: #007700">=3D&nbsp;[</span><span style=3D"color: #DD0000">"n=
ame"</span><span style=3D"color: #007700">,</span><span style=3D"color: #DD=
0000">"price"</span><span style=3D"color: #007700">,</span><span style=3D"c=
olor: #DD0000">"qty"</span><span style=3D"color: #007700">];&nbsp;</span><s=
pan style=3D"color: #FF8000">//&nbsp;set&nbsp;your&nbsp;own&nbsp;values<br>=
</span><span style=3D"color: #0000BB">$key&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</s=
pan><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0=
000BB">array_search</span><span style=3D"color: #007700">(</span><span styl=
e=3D"color: #0000BB">$option</span><span style=3D"color: #007700">,&nbsp;</=
span><span style=3D"color: #0000BB">$options</span><span style=3D"color: #0=
07700">);<br></span><span style=3D"color: #0000BB">$option&nbsp;&nbsp;</spa=
n><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #000=
0BB">$options</span><span style=3D"color: #007700">[</span><span style=3D"c=
olor: #0000BB">$key</span><span style=3D"color: #007700">];<br><br></span><=
span style=3D"color: #0000BB">$query&nbsp;</span><span style=3D"color: #007=
700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT&nbsp;*&nbsp;FRO=
M&nbsp;friends1&nbsp;WHERE&nbsp;`</span><span style=3D"color: #0000BB">$opt=
ion</span><span style=3D"color: #DD0000">`&nbsp;LIKE&nbsp;?&nbsp;<br>&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ORDER&nbsp;BY&nbsp;Fr=
iendship&nbsp;LIMIT&nbsp;?,?"</span><span style=3D"color: #007700">;<br></s=
pan><span style=3D"color: #0000BB">$stmt&nbsp;</span><span style=3D"color: =
#007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><span st=
yle=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">prepare</=
span><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">=
$query</span><span style=3D"color: #007700">);<br></span><span style=3D"col=
or: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span s=
tyle=3D"color: #0000BB">execute</span><span style=3D"color: #007700">([</sp=
an><span style=3D"color: #DD0000">"%</span><span style=3D"color: #0000BB">$=
srch</span><span style=3D"color: #DD0000">%"</span><span style=3D"color: #0=
07700">,</span><span style=3D"color: #0000BB">$start</span><span style=3D"c=
olor: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$records_per_pa=
ge</span><span style=3D"color: #007700">]);<br></span><span style=3D"color:=
 #0000BB">$data&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span>=
<span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-=
&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span style=3D"col=
or: #007700">();</span><span style=3D"color: #0000BB"></span></code></code>=
</pre>
<p>The first three lines are responsible for the $option santitization.</p>=
              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-234">
              <div class=3D"comment-author">
              	William Entriken, 30.06.17 18:55              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>s/co=
unt(/COUNT(/g</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-233">
              <div class=3D"comment-author">
              	William Entriken, 30.06.17 18:34              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>"Goo=
d ORMs are Doctrine, Eloquent, RedBean, and Yii::AR. Aura.SQL is a good exa=
mple of a PDO wrapper with many additional features."</p>
<p>Please provide a review of these or maybe a separate post. It is a huge =
qualifier when you say "for real applications you'll need to use one of the=
se bunch of libraries but for now let me tell you all about PDO..."</p></di=
v>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello William!</p>
<p>Thank you for a good suggestion.
Indeed it's a very good idea to outline at least essential features of thes=
e libraries and to show why they actually to be preferred. I cannot promise=
 it will appear soon, as it' pretty much an undertaking, but I'll definitel=
y will start composing such an article</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-232">
              <div class=3D"comment-author">
              	David Entwistle, 30.06.17 12:23              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>How =
may I convert this mysql query to PDO query.</p>
<pre><code><code><span style=3D"color: #0000BB">$query&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELE=
CT&nbsp;*&nbsp;FROM&nbsp;friends1&nbsp;WHERE&nbsp;</span><span style=3D"col=
or: #0000BB">$option</span><span style=3D"color: #DD0000">&nbsp;LIKE&nbsp;'=
%</span><span style=3D"color: #0000BB">$srch</span><span style=3D"color: #D=
D0000">%'&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;ORDER&nbsp;BY&nbsp;Friendship&nbsp;LIMIT&nbsp;</span><span style=3D"col=
or: #0000BB">$start</span><span style=3D"color: #DD0000">,</span><span styl=
e=3D"color: #0000BB">$records_per_page</span><span style=3D"color: #DD0000"=
>"</span><span style=3D"color: #007700">;</span><span style=3D"color: #0000=
BB"></span></code></code></pre>
<p><code>$option</code> is user selected from dropdown list.
<code>$srch</code> is user input search criteria.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello David!</p>
<p>There are two issues to keep in mind when converting such a query, both =
mentioned in this article:</p>
<ol>
<li>First, you have to make sure that the whole search string is set to a v=
ariable, including wildcard characters</li>
<li>Second, make sure that emulation is turned off, to make LIMIT parameter=
s binding easier</li>
</ol>
<p>So the final code would be</p>
<pre><code><code><span style=3D"color: #0000BB">$query&nbsp;</span><span st=
yle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELE=
CT&nbsp;*&nbsp;FROM&nbsp;friends1&nbsp;WHERE&nbsp;</span><span style=3D"col=
or: #0000BB">$option</span><span style=3D"color: #DD0000">&nbsp;LIKE&nbsp;?=
&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ORDER=
&nbsp;BY&nbsp;Friendship&nbsp;LIMIT&nbsp;?,?"</span><span style=3D"color: #=
007700">;<br></span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span =
style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pd=
o</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0=
000BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"=
color: #0000BB">$query</span><span style=3D"color: #007700">);<br></span><s=
pan style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-&g=
t;</span><span style=3D"color: #0000BB">execute</span><span style=3D"color:=
 #007700">([</span><span style=3D"color: #DD0000">"%</span><span style=3D"c=
olor: #0000BB">$srch</span><span style=3D"color: #DD0000">%"</span><span st=
yle=3D"color: #007700">,</span><span style=3D"color: #0000BB">$start</span>=
<span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB"=
>$records_per_page</span><span style=3D"color: #007700">]);<br></span><span=
 style=3D"color: #0000BB">$data&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><span style=3D"c=
olor: #007700">-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><s=
pan style=3D"color: #007700">();</span><span style=3D"color: #0000BB"></spa=
n></code></code></pre>
<p>Hope it helps!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-225">
              <div class=3D"comment-author">
              	Jan Stekl, 20.06.17 03:37              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Very=
, very good website for someone starting with PDO. Thank You for making it!=
</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-224">
              <div class=3D"comment-author">
              	Ganesh, 17.06.17 09:25              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
</p>
<p>Trying to get last 25 row in ascending order but getting error any idea =
what could be error</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'(SELEC=
T&nbsp;`id`,`msg`,`time`,`sender_id`,`mid`&nbsp;from&nbsp;msgs&nbsp;WHERE&n=
bsp;mid&nbsp;&gt;&nbsp;0&nbsp;and&nbsp;`grp_id`&nbsp;=3D&nbsp;:grp_id2&nbsp=
;ORDER&nbsp;BY&nbsp;id&nbsp;DESC&nbsp;limit&nbsp;25)&nbsp;ORDER&nbsp;BY&nbs=
p;id&nbsp;ASC'</span><span style=3D"color: #007700">;<br></span><span style=
=3D"color: #0000BB">$sql_array&nbsp;</span><span style=3D"color: #007700">=
=3D&nbsp;array(<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #DD=
0000">'grp_id2'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</s=
pan><span style=3D"color: #0000BB">$grp_id<br></span><span style=3D"color: =
#007700">);<br></span><span style=3D"color: #0000BB">$stmt&nbsp;</span><spa=
n style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$=
data</span><span style=3D"color: #007700">[</span><span style=3D"color: #DD=
0000">'pdo'</span><span style=3D"color: #007700">]-&gt;</span><span style=
=3D"color: #0000BB">prepare</span><span style=3D"color: #007700">(</span><s=
pan style=3D"color: #0000BB">$sql</span><span style=3D"color: #007700">);<b=
r></span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #=
007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><span styl=
e=3D"color: #007700">(</span><span style=3D"color: #0000BB">$sql_array</spa=
n><span style=3D"color: #007700">);</span><span style=3D"color: #0000BB"></=
span></code></code></pre>
<p>output</p>
<blockquote>
<p>Warning: PDO::prepare(): Unknown type 17 sent by the server. Please send=
 a report to the developers in msgs.php on line 174
Fatal error: Call to a member function execute() on boolean in msgs.php on =
line 176</p>
</blockquote></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ganesh!</p>
<p>Thank you for your question.
I never seen such an error message before.
Looks like you already posted a bug on the PHP site, <a href=3D"https://bug=
s.php.net/bug.php?id=3D74769">https://bugs.php.net/bug.php?id=3D74769</a></=
p>
<p>Looks like it's all you can do.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-223">
              <div class=3D"comment-author">
              	Ganesh Kandu, 15.06.17 14:38              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,
Thanks for Awesome Documentation and easiest on </p>
<p>what should i care about when i am migrating to postgresql from mysql ??=
?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-222">
              <div class=3D"comment-author">
              	Ganesh Kandu, 15.06.17 14:15              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-221">
              <div class=3D"comment-author">
              	Ganesh Kandu, 14.06.17 10:20              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I Wa=
nt to use dbprefix</p>
<pre><code><code><span style=3D"color: #0000BB">CREATE&nbsp;TABLE&nbsp;</sp=
an><span style=3D"color: #007700">`</span><span style=3D"color: #DD0000">%D=
BPREFIX%_poll_vote</span><span style=3D"color: #007700">`&nbsp;(<br>&nbsp;`=
</span><span style=3D"color: #DD0000">id</span><span style=3D"color: #00770=
0">`&nbsp;</span><span style=3D"color: #0000BB">int</span><span style=3D"co=
lor: #007700">(</span><span style=3D"color: #0000BB">11</span><span style=
=3D"color: #007700">)&nbsp;</span><span style=3D"color: #0000BB">NOT&nbsp;N=
ULL&nbsp;AUTO_INCREMENT</span><span style=3D"color: #007700">,<br>&nbsp;`</=
span><span style=3D"color: #DD0000">ip</span><span style=3D"color: #007700"=
>`&nbsp;</span><span style=3D"color: #0000BB">int</span><span style=3D"colo=
r: #007700">(</span><span style=3D"color: #0000BB">11</span><span style=3D"=
color: #007700">)&nbsp;DEFAULT&nbsp;</span><span style=3D"color: #0000BB">N=
ULL</span><span style=3D"color: #007700">,<br>)&nbsp;</span><span style=3D"=
color: #0000BB">ENGINE</span><span style=3D"color: #007700">=3D</span><span=
 style=3D"color: #0000BB">InnoDB&nbsp;</span><span style=3D"color: #007700"=
>DEFAULT&nbsp;</span><span style=3D"color: #0000BB">CHARSET</span><span sty=
le=3D"color: #007700">=3D</span><span style=3D"color: #0000BB">utf8</span><=
/code></code></pre>
<p>in select,update and insert also
should i use :dbprefix but not working</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ganesh!</p>
<p>Unfortunately, PDO doesn't have a placeholder for the table name. So So =
all you can do is to use a PHP variable and make sure it is not coming from=
 user input:</p>
<pre><code><code><span style=3D"color: #0000BB">CREATE&nbsp;TABLE&nbsp;</sp=
an><span style=3D"color: #007700">`{</span><span style=3D"color: #0000BB">$=
DBPREFIX</span><span style=3D"color: #007700">}</span><span style=3D"color:=
 #DD0000">_poll_vote</span><span style=3D"color: #007700">`&nbsp;(<br>&nbsp=
;`</span><span style=3D"color: #DD0000">id</span><span style=3D"color: #007=
700">`&nbsp;</span><span style=3D"color: #0000BB">int</span><span style=3D"=
color: #007700">(</span><span style=3D"color: #0000BB">11</span><span style=
=3D"color: #007700">)&nbsp;</span><span style=3D"color: #0000BB">NOT&nbsp;N=
ULL&nbsp;AUTO_INCREMENT</span><span style=3D"color: #007700">,<br>&nbsp;`</=
span><span style=3D"color: #DD0000">ip</span><span style=3D"color: #007700"=
>`&nbsp;</span><span style=3D"color: #0000BB">int</span><span style=3D"colo=
r: #007700">(</span><span style=3D"color: #0000BB">11</span><span style=3D"=
color: #007700">)&nbsp;DEFAULT&nbsp;</span><span style=3D"color: #0000BB">N=
ULL</span><span style=3D"color: #007700">,<br>)&nbsp;</span><span style=3D"=
color: #0000BB">ENGINE</span><span style=3D"color: #007700">=3D</span><span=
 style=3D"color: #0000BB">InnoDB&nbsp;</span><span style=3D"color: #007700"=
>DEFAULT&nbsp;</span><span style=3D"color: #0000BB">CHARSET</span><span sty=
le=3D"color: #007700">=3D</span><span style=3D"color: #0000BB">utf8</span><=
/code></code></pre>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-218">
              <div class=3D"comment-author">
              	bifa, 09.06.17 11:50              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Very=
 instructives
Thanks.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-217">
              <div class=3D"comment-author">
              	Thapelo, 07.06.17 13:43              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you for your advice. I would like you to be my mentor. I have still going=
 through your site and I am happy to tell you that I am really learning a l=
ot. </p>
<p>Thank you very much.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-215">
              <div class=3D"comment-author">
              	Thapelo, 06.06.17 20:14              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,
I found out that your site is very useful to me as i am a beginner to codin=
g. I wanted to know whether to use mysqli or pdo. I searched and came to a =
point which i decided to pay more attention to using pdo than mysqli.
My question is, am i on the right track with my decision or do i have to le=
rn php with mysqli first?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello!</p>
<p>PDO is easier to use, therefore it is easier to learn as well.
So I would recommend to keep up with PDO.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-214">
              <div class=3D"comment-author">
              	Greg, 02.06.17 18:24              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>"<em=
>In such a case explicit binding have to be used, for which you have a choi=
ce of two functions, bindValue() and bindParam(). The former one has to be =
preferred, because, unlike bindParam() it has no side effects to deal with.=
</em>"</p>
<p>You mention that bindParam has side effects, but there's no explanation =
as to what they are. PHP The Right Way and some other sites recommend bindP=
aram, so I'm really curious why you recommend bindValue.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-212">
              <div class=3D"comment-author">
              	daniel phillis, 30.05.17 22:12              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you for providing a great resource. I want to reference your site in my u=
ndergrad paper to Flidners University South Australia, on serving my first =
database with WAMP, can i obtain your name ?</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-210">
              <div class=3D"comment-author">
              	Mark, 25.05.17 20:13              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I'm =
trying to run a stored procedure on a Sybase 11.0.1.2596 database in a PHP =
file using PDO and dblib as the driver. I can call a procedure with no para=
meters with no problems using something like:</p>
<pre><code><code><span style=3D"color: #0000BB">call&nbsp;custom</span><spa=
n style=3D"color: #007700">.</span><span style=3D"color: #0000BB">show_cloc=
ked_in_employees</span></code></code></pre>
<p>However, if the procedure takes parameters, I get an error. If I have a =
procedure like this that takes 2 parameters:</p>
<pre><code><code><span style=3D"color: #0000BB">create&nbsp;procedure&nbsp;=
custom</span><span style=3D"color: #007700">.</span><span style=3D"color: #=
0000BB">custom_sp_R_cons_rvc_time_prd_ttls</span><span style=3D"color: #007=
700">(</span><span style=3D"color: #0000BB">in&nbsp;business_date_start&nbs=
p;timestamp</span><span style=3D"color: #007700">,</span><span style=3D"col=
or: #0000BB">in&nbsp;business_date_end&nbsp;timestamp</span><span style=3D"=
color: #007700">)<br></span><span style=3D"color: #0000BB">result</span><sp=
an style=3D"color: #007700">(</span><span style=3D"color: #0000BB">start_bu=
siness_date&nbsp;timestamp</span><span style=3D"color: #007700">,</span><sp=
an style=3D"color: #0000BB">end_business_date&nbsp;timestamp</span><span st=
yle=3D"color: #007700">,</span><span style=3D"color: #0000BB">store_number&=
nbsp;OBJ_NUM</span><span style=3D"color: #007700">,</span><span style=3D"co=
lor: #0000BB">store_id&nbsp;SEQ_NUM</span><span style=3D"color: #007700">,.=
..)<br></span><span style=3D"color: #0000BB">begin<br>&nbsp;&nbsp;</span><s=
pan style=3D"color: #007700">declare&nbsp;@</span><span style=3D"color: #00=
00BB">start_business_date&nbsp;timestamp</span><span style=3D"color: #00770=
0">;<br>&nbsp;&nbsp;declare&nbsp;@</span><span style=3D"color: #0000BB">end=
_business_date&nbsp;timestamp</span><span style=3D"color: #007700">;<br>&nb=
sp;&nbsp;...<br></span><span style=3D"color: #0000BB">end</span></code></co=
de></pre>
<p>I have tried calling it many ways and received different errors includin=
g this:</p>
<pre><code><code><span style=3D"color: #0000BB">SQL&nbsp;Anywhere&nbsp;Erro=
r&nbsp;</span><span style=3D"color: #007700">-</span><span style=3D"color: =
#0000BB">188</span><span style=3D"color: #007700">:&nbsp;</span><span style=
=3D"color: #0000BB">Not&nbsp;enough&nbsp;values&nbsp;</span><span style=3D"=
color: #007700">for&nbsp;</span><span style=3D"color: #0000BB">host&nbsp;va=
riables&nbsp;</span><span style=3D"color: #007700">[</span><span style=3D"c=
olor: #0000BB">13638</span><span style=3D"color: #007700">]&nbsp;(</span><s=
pan style=3D"color: #0000BB">severity&nbsp;16</span><span style=3D"color: #=
007700">)&nbsp;[(</span><span style=3D"color: #0000BB">null</span><span sty=
le=3D"color: #007700">)]</span><span style=3D"color: #0000BB"></span></code=
></code></pre>
<p>etc. If I run this procedure in a SQL client like RazorSQL using:</p>
<pre><code><code><span style=3D"color: #0000BB">call&nbsp;custom</span><spa=
n style=3D"color: #007700">.</span><span style=3D"color: #0000BB">custom_sp=
_R_cons_rvc_time_prd_ttls</span><span style=3D"color: #007700">(</span><spa=
n style=3D"color: #DD0000">'2017-05-02'</span><span style=3D"color: #007700=
">,&nbsp;</span><span style=3D"color: #DD0000">'2017-05-02'</span><span sty=
le=3D"color: #007700">)</span><span style=3D"color: #0000BB"></span></code>=
</code></pre>
<p>it works perfectly. The exact way I'm trying to call it is like this:</p=
>
<pre><code><code><span style=3D"color: #0000BB">$dbh&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;new&nbsp;</span><span style=3D"color: #0000BB=
">PDO</span><span style=3D"color: #007700">(</span><span style=3D"color: #D=
D0000">'dblib:host=3D&lt;host_ip&gt;'</span><span style=3D"color: #007700">=
,&nbsp;</span><span style=3D"color: #0000BB">$user</span><span style=3D"col=
or: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$password</span><=
span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">=
null</span><span style=3D"color: #007700">);<br></span><span style=3D"color=
: #0000BB">$stmt&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span=
><span style=3D"color: #0000BB">$dbh</span><span style=3D"color: #007700">-=
&gt;</span><span style=3D"color: #0000BB">prepare</span><span style=3D"colo=
r: #007700">(</span><span style=3D"color: #DD0000">'call&nbsp;custom.custom=
_sp_R_cons_rvc_time_prd_ttls(:start_date,&nbsp;:end_date)'</span><span styl=
e=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$new_param=
s&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;array(</span><span st=
yle=3D"color: #DD0000">':start_date'&nbsp;</span><span style=3D"color: #007=
700">=3D&gt;&nbsp;</span><span style=3D"color: #DD0000">'2017-05-02'</span>=
<span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #DD0000"=
>':end_date'&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span=
><span style=3D"color: #DD0000">'2017-05-02'</span><span style=3D"color: #0=
07700">);<br></span><span style=3D"color: #0000BB">$stmt</span><span style=
=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</spa=
n><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$ne=
w_params</span><span style=3D"color: #007700">);</span><span style=3D"color=
: #0000BB"></span></code></code></pre></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-209">
              <div class=3D"comment-author">
              	John, 25.05.17 15:09              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I wo=
uld like to know more, is there any pdf's available about this tutorial I'm=
 eager to learn</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-206">
              <div class=3D"comment-author">
              	Alex, 23.05.17 11:11              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi! =
Another brief question:
I was expecting to receive the exact same results using this approaches, bu=
t it seems I got different results (results in terms of the output results/=
data of the query)</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt</span><span style=3D"=
color: #007700">-&gt;</span><span style=3D"color: #0000BB">bindParam</span>=
<span style=3D"color: #007700">(</span><span style=3D"color: #DD0000">':Lim=
'</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: =
#0000BB">$L</span><span style=3D"color: #007700">,&nbsp;</span><span style=
=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span=
 style=3D"color: #0000BB">PARAM_INT</span><span style=3D"color: #007700">);=
<br></span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color:=
 #007700">-&gt;</span><span style=3D"color: #0000BB">bindParam</span><span =
style=3D"color: #007700">(</span><span style=3D"color: #DD0000">':Lim2'</sp=
an><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000=
BB">$L2</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"c=
olor: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span styl=
e=3D"color: #0000BB">PARAM_INT</span><span style=3D"color: #007700">);<br><=
/span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007=
700">-&gt;</span><span style=3D"color: #0000BB">bindParam</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #DD0000">':Name'</span><s=
pan style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$=
Name</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"colo=
r: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span style=
=3D"color: #0000BB">PARAM_STR</span><span style=3D"color: #007700">);<br></=
span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #0077=
00">-&gt;</span><span style=3D"color: #0000BB">bindParam</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #DD0000">':Name2'</span><=
span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">=
$Name2</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"co=
lor: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span style=
=3D"color: #0000BB">PARAM_STR</span><span style=3D"color: #007700">);<br></=
span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #0077=
00">-&gt;</span><span style=3D"color: #0000BB">execute</span><span style=3D=
"color: #007700">();&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB"=
></span></code></code></pre>
<p>And then this one:
$stmt-&gt;execute(["Lim" =3D&gt; $L, "Lim2" =3D&gt; $L2, "Name" =3D&gt; $Na=
me, "Name2" =3D&gt; $Name2]);</p>
<p>I'm I missing something? Shouldn't have been the exact results?</p>
<p>Thanks!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Nope, as long as this code works, there s=
hould be no difference.
The only case I can think of is when you are comparing a numeric value with=
 a string field, something like <code>name=3D1</code> in SQL. In this case =
results are indeed unpredictable. </p>
<p>Do you mind to provide more details on the difference you are talking ab=
out?</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-205">
              <div class=3D"comment-author">
              	Alex, 23.05.17 10:53              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o,
I am following closely your tutorial and I am really grateful for the usefu=
l information.
Now I need your help again:</p>
<p>As you said, there is a problem with the Limit clause.. and I'm stuck in=
 the middle.</p>
<p>On one hand, I need the  emulation mode turned ON as I have to query for=
 multiple fields having the same name, as in your example:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;t&nbsp;WHERE&nbsp;foo&nbsp;LIKE&=
nbsp;:search&nbsp;OR&nbsp;bar&nbsp;LIKE&nbsp;:search"</span><span style=3D"=
color: #007700">);<br></span><span style=3D"color: #0000BB">$stmt</span><sp=
an style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">exec=
ute</span><span style=3D"color: #007700">([</span><span style=3D"color: #DD=
0000">'search'</span><span style=3D"color: #007700">]&nbsp;=3D&gt;&nbsp;</s=
pan><span style=3D"color: #DD0000">"%</span><span style=3D"color: #0000BB">=
$search</span><span style=3D"color: #DD0000">%"</span><span style=3D"color:=
 #007700">);`</span><span style=3D"color: #DD0000"><br><br>The&nbsp;query&n=
bsp;is&nbsp;even&nbsp;more&nbsp;complex,&nbsp;type&nbsp;of:<br><br></span><=
span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #DD0000">&n=
bsp;=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><span style=
=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">prepare</spa=
n><span style=3D"color: #DD0000">("SELECT&nbsp;*&nbsp;FROM&nbsp;t&nbsp;WHER=
E&nbsp;(((foo&nbsp;LIKE&nbsp;:search&nbsp;OR&nbsp;bar&nbsp;LIKE&nbsp;:searc=
h)&nbsp;AND&nbsp;(boo&nbsp;LIKE&nbsp;:search2"))&nbsp;OR&nbsp;((foo2&nbsp;L=
IKE&nbsp;:search&nbsp;OR&nbsp;bar2&nbsp;LIKE&nbsp;:search)&nbsp;&nbsp;AND&n=
bsp;(boo&nbsp;LIKE:&nbsp;search2))&nbsp;...&nbsp;and&nbsp;so&nbsp;on&nbsp;)=
&nbsp;&nbsp;LIMIT&nbsp;:Limit1,&nbsp;Limit2</span></code></code></pre>
<p>And on the other hand I need the Limit parameters, for which the emulati=
on needs to be OFF in order to function. </p>
<p>Otherwise, Is there any way to bind only the values for Limit parameters=
 and continue executing:
$stm -&gt;execute(array_merge($params,${"in_params{$x}"}));    </p>
<p>Thanks a lot!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Alex!</p>
<p>Thank you for a good question!</p>
<p>Indeed there is no way to combine the execute and bindvalue methods.
So in general you just have to write all the binding by hand.
I suppose that for an exceptional case it is not a big deal.</p>
<p>However, I think there is a workaround, which is quite close to your req=
uirements: you can write a loop, binding all other parameters from array, a=
nd then make two distinct bindvalue calls, something like this:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">for&nbsp;</span><span style=3D"color: #0000BB">each</span><span =
style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$params&nbs=
p;</span><span style=3D"color: #007700">as&nbsp;</span><span style=3D"color=
: #0000BB">$key&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</s=
pan><span style=3D"color: #0000BB">$value</span><span style=3D"color: #0077=
00">)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB"=
>$stmt</span><span style=3D"color: #007700">-&gt;</span><span style=3D"colo=
r: #0000BB">bindValue</span><span style=3D"color: #007700">(</span><span st=
yle=3D"color: #0000BB">$key</span><span style=3D"color: #007700">,&nbsp;</s=
pan><span style=3D"color: #0000BB">$value</span><span style=3D"color: #0077=
00">);<br>}<br></span><span style=3D"color: #0000BB">$stmt</span><span styl=
e=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">bindValue</=
span><span style=3D"color: #007700">(</span><span style=3D"color: #DD0000">=
'Limit1'</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"=
color: #0000BB">$limit1</span><span style=3D"color: #007700">);<br></span><=
span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-&=
gt;</span><span style=3D"color: #0000BB">bindValue</span><span style=3D"col=
or: #007700">(</span><span style=3D"color: #DD0000">'Limit2'</span><span st=
yle=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$limit2=
</span><span style=3D"color: #007700">);</span><span style=3D"color: #0000B=
B"></span></code></code></pre>
<p>This is all I can offer. Hope it helps!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-202">
              <div class=3D"comment-author">
              	Boz, 14.05.17 01:30              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,<=
/p>
<p>I have a piece of hardware that collects data  and operates a machine an=
d then you can log into it to get statistics. A second operation it does (n=
ot very well) is send out data to a web database which stores what it sends=
. Every tutorial i find with api for php uses mysqli connect or other bad p=
ractices. Do you have to do a tutorial with the right pdo framework?</p></d=
iv>
            </li>
=20
            <li class=3D"comment" id=3D"comment-195">
              <div class=3D"comment-author">
              	Friend, 04.05.17 17:07              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Ther=
e's a misspelling in the Transactions section:</p>
<p>"to cancel all the changes you made sihce transaction start"</p>
<p>sihce should be since</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thank you, fixed.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-188">
              <div class=3D"comment-author">
              	MgAnt, 24.04.17 19:37              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>It's=
 c. 2017, seven years after mysql 5.5.3 was published, which supports utf8m=
b4 - don't you think you should suggest this as encoding instead of utf-8?<=
/p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-187">
              <div class=3D"comment-author">
              	Dave, 21.04.17 23:17              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><blockq=
uote>
<p>you can use the method chaining and thus call execute() right along with=
 prepare():</p>
</blockquote>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"UPDATE=
&nbsp;users&nbsp;SET&nbsp;name&nbsp;=3D&nbsp;?&nbsp;WHERE&nbsp;id&nbsp;=3D&=
nbsp;?"</span><span style=3D"color: #007700">;<br></span><span style=3D"col=
or: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span st=
yle=3D"color: #0000BB">prepare</span><span style=3D"color: #007700">(</span=
><span style=3D"color: #0000BB">$sql</span><span style=3D"color: #007700">)=
-&gt;</span><span style=3D"color: #0000BB">execute</span><span style=3D"col=
or: #007700">([</span><span style=3D"color: #0000BB">$name</span><span styl=
e=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$id</span=
><span style=3D"color: #007700">]);</span><span style=3D"color: #0000BB"></=
span></code></code></pre>
<blockquote>
<p>However, if you want to get the number of affected rows, the code will h=
ave to be the same boresome three lines:</p>
</blockquote>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"DELETE&nbsp;FROM&nbsp;goods&nbsp;WHERE&nbsp;category&nbsp;=3D=
&nbsp;?"</span><span style=3D"color: #007700">);<br></span><span style=3D"c=
olor: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span=
 style=3D"color: #0000BB">execute</span><span style=3D"color: #007700">([</=
span><span style=3D"color: #0000BB">$cat</span><span style=3D"color: #00770=
0">]);<br></span><span style=3D"color: #0000BB">$deleted&nbsp;</span><span =
style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$st=
mt</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #=
0000BB">rowCount</span><span style=3D"color: #007700">();</span><span style=
=3D"color: #0000BB"></span></code></code></pre>
<p>Have you considered</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">(</span><span style=3D"color: #0000BB">$stmt&nbsp;</span><span s=
tyle=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo=
</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #00=
00BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"c=
olor: #DD0000">"DELETE&nbsp;FROM&nbsp;goods&nbsp;WHERE&nbsp;category&nbsp;=
=3D&nbsp;?"</span><span style=3D"color: #007700">))-&gt;</span><span style=
=3D"color: #0000BB">execute</span><span style=3D"color: #007700">([</span><=
span style=3D"color: #0000BB">$cat</span><span style=3D"color: #007700">]);=
<br></span><span style=3D"color: #0000BB">$deleted&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</s=
pan><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000B=
B">rowCount</span><span style=3D"color: #007700">();</span><span style=3D"c=
olor: #0000BB"></span></code></code></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Dave!</p>
<p>Everyone is tempted to do that at first, but soon realizes it's impossib=
le :)</p>
<p>The method chaining returns the return value of the <em>last method</em>=
 in the chain, <code>execute()</code> here, and it's a boolean value. So it=
 won't work.</p>
<p>To overcome this inconvenience I propose to extend PDO a bit, as it show=
n in the other article, <a href=3D"https://phpdelusions.net/pdo/pdo_wrapper=
">https://phpdelusions.net/pdo/pdo_wrapper</a></p>
<p>So we can make it </p>
<pre><code><code><span style=3D"color: #0000BB">&nbsp;$deleted&nbsp;</span>=
<span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000B=
B">$pdo</span><span style=3D"color: #007700">-&gt;</span><span style=3D"col=
or: #0000BB">run</span><span style=3D"color: #007700">(</span><span style=
=3D"color: #DD0000">"DELETE&nbsp;FROM&nbsp;goods&nbsp;WHERE&nbsp;category&n=
bsp;=3D&nbsp;?"</span><span style=3D"color: #007700">,[</span><span style=
=3D"color: #0000BB">$cat</span><span style=3D"color: #007700">])-&gt;</span=
><span style=3D"color: #0000BB">rowCount</span><span style=3D"color: #00770=
0">();</span><span style=3D"color: #0000BB"></span></code></code></pre>    =
          </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-186">
              <div class=3D"comment-author">
              	Phil Wilkinson, 21.04.17 01:29              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Got =
caught out last night when upgrading our production server's PHP7 version a=
nd modules (most likely php7-pdo?).  PDO couldn't parse this previously wor=
king DSN:</p>
<pre><code><code><span style=3D"color: #0000BB">mysql</span><span style=3D"=
color: #007700">:</span><span style=3D"color: #0000BB">host</span><span sty=
le=3D"color: #007700">=3D</span><span style=3D"color: #0000BB">localhost</s=
pan><span style=3D"color: #007700">:</span><span style=3D"color: #0000BB">1=
3304</span><span style=3D"color: #007700">;</span><span style=3D"color: #00=
00BB">dbname</span><span style=3D"color: #007700">=3D</span><span style=3D"=
color: #0000BB">test</span><span style=3D"color: #007700">;</span><span sty=
le=3D"color: #0000BB">charset</span><span style=3D"color: #007700">=3D</spa=
n><span style=3D"color: #0000BB">utf8</span></code></code></pre>
<p>Fixed with this (note the port has moved in the DSN):</p>
<pre><code><code><span style=3D"color: #0000BB">mysql</span><span style=3D"=
color: #007700">:</span><span style=3D"color: #0000BB">host</span><span sty=
le=3D"color: #007700">=3D</span><span style=3D"color: #0000BB">localhost</s=
pan><span style=3D"color: #007700">;</span><span style=3D"color: #0000BB">d=
bname</span><span style=3D"color: #007700">=3D</span><span style=3D"color: =
#0000BB">test</span><span style=3D"color: #007700">;</span><span style=3D"c=
olor: #0000BB">port</span><span style=3D"color: #007700">=3D</span><span st=
yle=3D"color: #0000BB">13304</span><span style=3D"color: #007700">;</span><=
span style=3D"color: #0000BB">charset</span><span style=3D"color: #007700">=
=3D</span><span style=3D"color: #0000BB">utf8</span></code></code></pre>
<p>Better to stay safe and follow the manual gents.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-185">
              <div class=3D"comment-author">
              	Priya Telvekar, 19.04.17 18:50              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
really good stuff to know. Helped me!! Thanks!</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-184">
              <div class=3D"comment-author">
              	Jeff, 18.04.17 23:56              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I'm =
having a hard time gaining an understanding of best practices of real world=
 implementation of PDO. Especially file structuring - as in where my PDO co=
nnection should be located and efficiently used throughout a php app. If th=
is is not within the scope of this site perhaps you can direct me to a good=
 reference. Thanks!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Jeff!</p>
<p>Thank you for the good question, it's perfectly within the scope of this=
 site.</p>
<p>In general, you just create a separate file where PDO instance is create=
d, like <code>$pdo =3D new PDO ...</code>. And then just include/require th=
at file into every script that needs a PDO connection.</p>
<p>The main question here is how to use that instance. And this answer depe=
nds on your coding style. If your code is procedural, then just use that <c=
ode>$pdo</code> variable. To make it accessible inside functions, either ma=
ke it <code>global</code> or use a static wrapper like one is shown on the =
next page: <a href=3D"https://phpdelusions.net/pdo/pdo_wrapper">https://php=
delusions.net/pdo/pdo_wrapper</a></p>
<p>If your code is OOP, that it's a different tory, too big to cover in a c=
omment. You may google for the Dependency injection and IoC containers.</p>
<p>If you still have some questions, I'll be glad to answer.</p>           =
   </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-180">
              <div class=3D"comment-author">
              	Alex, 21.02.17 16:24              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>So t=
he following query seems to not work:</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;u.*,&nbsp;AVG(Rating)&nbsp;As&nbsp;AverageRating&nbsp;FROM&nbsp;users=
&nbsp;u&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LEFT&nbsp;=
JOIN&nbsp;RatingsTable&nbsp;r&nbsp;WHERE&nbsp;r.UserID=3Du.id<br>&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;Active&nbsp;=3D&nbsp;1"</s=
pan><span style=3D"color: #007700">;<br></span><span style=3D"color: #0000B=
B">$users&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span =
style=3D"color: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</s=
pan><span style=3D"color: #0000BB">query</span><span style=3D"color: #00770=
0">(</span><span style=3D"color: #0000BB">$sql</span><span style=3D"color: =
#007700">)-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span s=
tyle=3D"color: #007700">();</span><span style=3D"color: #0000BB"></span></c=
ode></code></pre>
<p>I don't know if is due to the fact that there are 2 WHERE clauses (I've =
removed one).
Also as logic I don't know if it is intended to return what I  expect. </p>
<ul>
<li>So I need to retrieve all the details from Users (from those users that=
 are active);</li>
<li>then, for the users that have Ratings (and the ratings are also active)=
, I need to see the ratings, otherwise I'll just stick with the user's info=
 and mention that there is no rating for him.</li>
</ul>
<p>Isn't the JOIN supposed to return only those that have ratings?</p>
<p>Thanx!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hi Alex,</p>
<p>Sorry it was a copy paste error. There should be ON instead of first WHE=
RE.
Regarding JOIN, the the original one indeed will get you only users with ra=
tings. But LEFT JOIN is a special join to give you all users regardless.</p=
>
<p>As of your other question, remember those u and r used in the query? the=
y are called aliases and intended to distinguish field names from different=
 tables. So the final query would be</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;u.*,&nbsp;AVG(Rating)&nbsp;As&nbsp;AverageRating&nbsp;FROM&nbsp;users=
&nbsp;u&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;LEFT&nbsp;JOIN&nbsp;RatingsTable&n=
bsp;r&nbsp;ON&nbsp;r.UserID=3Du.id&nbsp;AND&nbsp;r.Active&nbsp;=3D&nbsp;1<b=
r>&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;u.Active&nbsp;=3D&nbsp;1"</span><span =
style=3D"color: #007700">;<br></span><span style=3D"color: #0000BB">$users&=
nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"c=
olor: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span =
style=3D"color: #0000BB">query</span><span style=3D"color: #007700">(</span=
><span style=3D"color: #0000BB">$sql</span><span style=3D"color: #007700">)=
-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span style=3D"co=
lor: #007700">();</span><span style=3D"color: #0000BB"></span></code></code=
></pre>
<p>And, regarding your last comment, PHP is all right.</p>              </d=
iv>
            </li>
=20
            <li class=3D"comment" id=3D"comment-178">
              <div class=3D"comment-author">
              	Alex, 21.02.17 16:02              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi a=
gain, (it seems that my first comment wasn't posted - It was submitted seve=
ral minutes before this one: Alex, 21.02.17 01:36)</p>
<p>OK, thanks a lot for suggestions, I'll give it another shot during this =
night.
Only one more question here:</p>
<ul>
<li>as my both selects contain "WHERE ACTIVE =3D 1" it refers one time at U=
ser being active and the second time it refers the Rating being Active =3D =
1 (so we have to make sure that users is activated and that his rating has =
been approved). Using your suggested code, could I make something like this=
?
$sql =3D "SELECT u.*, AVG(Rating) As AverageRating FROM users u
WHERE Active =3D 1 (## Meaning User to be active ##)
LEFT JOIN RatingsTable r WHERE r.UserID=3Du.id
WHERE Active =3D 1"; (## Meaning the Rating for the corresponding User -  t=
o be active as well ##)</li>
</ul>
<p>Thanks a lot! </p>
<p>P.S. My first comment (really first comment that I cannot see it here / =
maybe it wasn't even submitted successfully) was about your suggestion betw=
een  PHP / Java / Python for a good, robust, stable but flexible web applic=
ation, based on your experience. Maybe also suggesting a set of "knowledge =
toolkit".</p>
<p>Kind regards,
Alex</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-177">
              <div class=3D"comment-author">
              	Alex, 21.02.17 01:36              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o again,
How do you see a better implementation for this case, as migrating it from =
simple mySql to PDO is seems a lot slower:
I have multiple users to retrieve from DB and show their information, but s=
ome information is stored in another tables, so then I have to run another =
query in the while loop, for each User ID </p>
<p>Example:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;&nbsp;Acti=
ve&nbsp;=3D&nbsp;1&nbsp;ORDER&nbsp;BY&nbsp;RAND&nbsp;()"</span><span style=
=3D"color: #007700">);&nbsp;&nbsp;&nbsp;&nbsp;<br></span><span style=3D"col=
or: #0000BB">$stmt</span><span style=3D"color: #007700">-&gt;</span><span s=
tyle=3D"color: #0000BB">execute</span><span style=3D"color: #007700">();<br=
></span><span style=3D"color: #0000BB">$i&nbsp;</span><span style=3D"color:=
 #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">0</span><span styl=
e=3D"color: #007700">;<br>foreach&nbsp;(</span><span style=3D"color: #0000B=
B">$stmt&nbsp;</span><span style=3D"color: #007700">as&nbsp;</span><span st=
yle=3D"color: #0000BB">$row</span><span style=3D"color: #007700">)&nbsp;{<b=
r>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$Fname</spa=
n><span style=3D"color: #007700">[</span><span style=3D"color: #0000BB">$i<=
/span><span style=3D"color: #007700">]&nbsp;=3D&nbsp;</span><span style=3D"=
color: #0000BB">$row</span><span style=3D"color: #007700">[</span><span sty=
le=3D"color: #DD0000">'Fname'</span><span style=3D"color: #007700">];<br>..=
..&nbsp;and&nbsp;</span><span style=3D"color: #0000BB">so&nbsp;on<br><br>&n=
bsp;&nbsp;&nbsp;&nbsp;$getRatings&nbsp;</span><span style=3D"color: #007700=
">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</span><span style=3D"=
color: #007700">-&gt;</span><span style=3D"color: #0000BB">prepare</span><s=
pan style=3D"color: #007700">(</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;AVG(Rating)&nbsp;As&nbsp;AverageRating&nbsp;FROM&nbsp;RatingsTable&nb=
sp;WHERE&nbsp;UserID=3D&nbsp;'</span><span style=3D"color: #0000BB">$UserID=
</span><span style=3D"color: #007700">[</span><span style=3D"color: #0000BB=
">$j</span><span style=3D"color: #007700">]</span><span style=3D"color: #DD=
0000">'&nbsp;AND&nbsp;Active&nbsp;=3D&nbsp;'1'"</span><span style=3D"color:=
 #007700">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: =
#0000BB">$getRatings</span><span style=3D"color: #007700">-&gt;</span><span=
 style=3D"color: #0000BB">execute</span><span style=3D"color: #007700">();<=
br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">=
$i</span><span style=3D"color: #007700">++;<br>}</span><span style=3D"color=
: #0000BB"></span></code></code></pre>
<p>so the point here is that I'm assigning the details from DB to arrays of=
 First Names, Last Names, User ID's, then Ratings and some other informatio=
n that I need to retrieve from other tables based on the specific UserID.
Is there a better, cleaner, faster way to do it, maybe not using so many ar=
rays and using the $row['anythingHere'] variables and using it / displaying=
 in the loop (not just storing / assigning in the loop and then use it late=
r based on the array indexes).</p>
<p>Thanks a lot!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Alex!</p>
<p>That's a really good question. Indeed, there are means for the improveme=
nt, both for the performance and cleaner code. </p>
<p>From what I see, there are three main points </p>
<ul>
<li>Take out ORDER BY RAND() part. It doesn't seem to do any good, but can =
slow down things considerably.</li>
<li>Take out the nested query as well, and use LEFT JOIN instead. You can j=
oin as many tables as you wish</li>
<li>Get all records at once in a single array using fetchAll() method</li>
</ul>
<p>So it should be something like this</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"SELECT=
&nbsp;u.*,&nbsp;AVG(Rating)&nbsp;As&nbsp;AverageRating&nbsp;FROM&nbsp;users=
&nbsp;u&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LEFT&nbsp;=
JOIN&nbsp;RatingsTable&nbsp;r&nbsp;WHERE&nbsp;r.UserID=3Du.id<br>&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;Active&nbsp;=3D&nbsp;1"</s=
pan><span style=3D"color: #007700">;<br></span><span style=3D"color: #0000B=
B">$users&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span =
style=3D"color: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</s=
pan><span style=3D"color: #0000BB">query</span><span style=3D"color: #00770=
0">(</span><span style=3D"color: #0000BB">$sql</span><span style=3D"color: =
#007700">)-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span s=
tyle=3D"color: #007700">();<br></span><span style=3D"color: #0000BB">shuffl=
e</span><span style=3D"color: #007700">(</span><span style=3D"color: #0000B=
B">$users</span><span style=3D"color: #007700">);&nbsp;</span><span style=
=3D"color: #FF8000">//&nbsp;if&nbsp;you&nbsp;need&nbsp;them&nbsp;to&nbsp;be=
&nbsp;random</span><span style=3D"color: #0000BB"></span></code></code></pr=
e>
<p>Now you can loop over single $users array and get any column. Fname, for=
 example:</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">foreach(</span><span style=3D"color: #0000BB">$users&nbsp;</span=
><span style=3D"color: #007700">as&nbsp;</span><span style=3D"color: #0000B=
B">$row</span><span style=3D"color: #007700">)&nbsp;{<br>&nbsp;&nbsp;&nbsp;=
&nbsp;echo&nbsp;</span><span style=3D"color: #0000BB">$row</span><span styl=
e=3D"color: #007700">[</span><span style=3D"color: #DD0000">'Fname'</span><=
span style=3D"color: #007700">];<br>}</span><span style=3D"color: #0000BB">=
</span></code></code></pre>
<p>If the code still be slow, make sure that you have an index for the User=
ID field in AverageRating table (and in the all other linked tables as well=
). </p>
<p>Feel free to ask if you have any other questions!</p>              </div=
>
            </li>
=20
            <li class=3D"comment" id=3D"comment-176">
              <div class=3D"comment-author">
              	quraisah, 20.02.17 17:22              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks it help me.thanks again if i had any inquiry regarding pdo i will back t=
o this web again.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-175">
              <div class=3D"comment-author">
              	quraisah, 20.02.17 10:38              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>how =
suppose im write using pdo style for user redirect their respective webpage=
 after login. example admin login will re direct to admin page and normal u=
ser redirect to user page after login. please show some simple example.</p>=
</div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello!</p>
<p>this question doesn't really belong to PDO as you have to deal with the =
information already fetched from the database. Assuming you have a variable=
 <code>$row</code> with user data where level <code>field</code> is respons=
ible for the user level, the code would be</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if(</span><span style=3D"color: #0000BB">$row</span><span style=
=3D"color: #007700">[</span><span style=3D"color: #DD0000">'level'</span><s=
pan style=3D"color: #007700">]&nbsp;=3D=3D&nbsp;</span><span style=3D"color=
: #DD0000">'admin'</span><span style=3D"color: #007700">)&nbsp;</span><span=
 style=3D"color: #0000BB">header</span><span style=3D"color: #007700">(</sp=
an><span style=3D"color: #DD0000">"Location:&nbsp;/admin.php"</span><span s=
tyle=3D"color: #007700">)</span><span style=3D"color: #0000BB"></span></cod=
e></code></pre>
<p>You can add as many such condition as you like. Hope it helps!</p>      =
        </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-174">
              <div class=3D"comment-author">
              	Relexk, 18.02.17 01:19              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>how =
do i make something like this with pdo</p>
<p>$userquery =3D mysql_query("SELECT fname, lname, email FROM register WHE=
RE email =3D'$login_session'") or die("the query could be fale please try a=
gain");
if(mysql_num_rows($userquery) !=3D 1){
die("that username could not be found!");
}
while($row =3D mysql_fetch_array($userquery, MYSQL_ASSOC)){</p>
<pre><code><code><span style=3D"color: #0000BB">&nbsp;&nbsp;&nbsp;$dbfname&=
nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"c=
olor: #0000BB">$row</span><span style=3D"color: #007700">[</span><span styl=
e=3D"color: #DD0000">"fname"</span><span style=3D"color: #007700">];<br>&nb=
sp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$dblname&nbsp;</span><=
span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB=
">$row</span><span style=3D"color: #007700">[</span><span style=3D"color: #=
DD0000">"lname"</span><span style=3D"color: #007700">];<br>&nbsp;&nbsp;&nbs=
p;</span><span style=3D"color: #0000BB">$dbemail&nbsp;</span><span style=3D=
"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$row</span>=
<span style=3D"color: #007700">[</span><span style=3D"color: #DD0000">"emai=
l"</span><span style=3D"color: #007700">];<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;=
&nbsp;&nbsp;if(</span><span style=3D"color: #0000BB">$login_session&nbsp;</=
span><span style=3D"color: #007700">!=3D&nbsp;</span><span style=3D"color: =
#0000BB">$dbemail</span><span style=3D"color: #007700">){<br>&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><span style=3D"=
color: #0000BB"></span></code></code></pre>
<p>thanks i advance</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello!</p>
<p>With PDO this code will be much simpler:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SELECT&nbsp;fname,&nbsp;lname,&nbsp;email&nbsp;FROM&nbsp;regi=
ster&nbsp;WHERE&nbsp;email&nbsp;=3D?"</span><span style=3D"color: #007700">=
);<br></span><span style=3D"color: #0000BB">$stmt</span><span style=3D"colo=
r: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><span =
style=3D"color: #007700">([</span><span style=3D"color: #0000BB">$login_ses=
sion</span><span style=3D"color: #007700">]);<br></span><span style=3D"colo=
r: #0000BB">$row&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span=
><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">=
-&gt;</span><span style=3D"color: #0000BB">fetch</span><span style=3D"color=
: #007700">();<br>if(</span><span style=3D"color: #0000BB">$row</span><span=
 style=3D"color: #007700">){<br>&nbsp;&nbsp;&nbsp;&nbsp;die(</span><span st=
yle=3D"color: #DD0000">"that&nbsp;username&nbsp;could&nbsp;not&nbsp;be&nbsp=
;found!"</span><span style=3D"color: #007700">);<br>}<br></span><span style=
=3D"color: #0000BB">$dbfname&nbsp;</span><span style=3D"color: #007700">=3D=
&nbsp;</span><span style=3D"color: #0000BB">$row</span><span style=3D"color=
: #007700">[</span><span style=3D"color: #DD0000">"fname"</span><span style=
=3D"color: #007700">];<br></span><span style=3D"color: #0000BB">$dblname&nb=
sp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"col=
or: #0000BB">$row</span><span style=3D"color: #007700">[</span><span style=
=3D"color: #DD0000">"lname"</span><span style=3D"color: #007700">];<br></sp=
an><span style=3D"color: #0000BB">$dbemail&nbsp;</span><span style=3D"color=
: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$row</span><span =
style=3D"color: #007700">[</span><span style=3D"color: #DD0000">"email"</sp=
an><span style=3D"color: #007700">];</span><span style=3D"color: #0000BB"><=
/span></code></code></pre>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-173">
              <div class=3D"comment-author">
              	Pablo, 14.02.17 00:30              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you! Great job. You helped me to understand better what I was just assumi=
ng as best practice.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-172">
              <div class=3D"comment-author">
              	Andy, 08.02.17 16:56              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>How =
can I use PDO for this kind of statement:</p>
<pre><code><code><span style=3D"color: #0000BB">$sql1&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"INSER=
T&nbsp;INTO&nbsp;dates&nbsp;(d_insertdate,&nbsp;d_date,&nbsp;d_time,&nbsp;d=
_name"</span><span style=3D"color: #007700">;<br></span><span style=3D"colo=
r: #0000BB">$sql2&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;&nbsp=
;</span><span style=3D"color: #DD0000">")&nbsp;VALUES&nbsp;(SYSDATE(),'"&nb=
sp;</span><span style=3D"color: #007700">.&nbsp;</span><span style=3D"color=
: #0000BB">$d_date&nbsp;</span><span style=3D"color: #007700">.&nbsp;</span=
><span style=3D"color: #DD0000">"',&nbsp;'"&nbsp;</span><span style=3D"colo=
r: #007700">.&nbsp;</span><span style=3D"color: #0000BB">$d_time&nbsp;</spa=
n><span style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #DD000=
0">"',&nbsp;'"&nbsp;</span><span style=3D"color: #007700">.&nbsp;</span><sp=
an style=3D"color: #0000BB">$d_name&nbsp;</span><span style=3D"color: #0077=
00">.&nbsp;</span><span style=3D"color: #DD0000">"'"</span><span style=3D"c=
olor: #007700">;<br><br>if&nbsp;(</span><span style=3D"color: #0000BB">strl=
en</span><span style=3D"color: #007700">(</span><span style=3D"color: #0000=
BB">$d_admission</span><span style=3D"color: #007700">)&nbsp;&gt;&nbsp;</sp=
an><span style=3D"color: #0000BB">0</span><span style=3D"color: #007700">)&=
nbsp;{</span><span style=3D"color: #0000BB">$sql1&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$sql1&nb=
sp;</span><span style=3D"color: #007700">.&nbsp;</span><span style=3D"color=
: #DD0000">",&nbsp;d_admission"</span><span style=3D"color: #007700">;&nbsp=
;</span><span style=3D"color: #0000BB">$sql2&nbsp;</span><span style=3D"col=
or: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$sql2&nbsp;</sp=
an><span style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #DD00=
00">",&nbsp;'</span><span style=3D"color: #0000BB">$d_admission</span><span=
 style=3D"color: #DD0000">'"</span><span style=3D"color: #007700">;}<br>if&=
nbsp;(</span><span style=3D"color: #0000BB">strlen</span><span style=3D"col=
or: #007700">(</span><span style=3D"color: #0000BB">$d_artists</span><span =
style=3D"color: #007700">)&nbsp;&gt;&nbsp;</span><span style=3D"color: #000=
0BB">0</span><span style=3D"color: #007700">)&nbsp;&nbsp;&nbsp;{</span><spa=
n style=3D"color: #0000BB">$sql1&nbsp;</span><span style=3D"color: #007700"=
>=3D&nbsp;</span><span style=3D"color: #0000BB">$sql1&nbsp;</span><span sty=
le=3D"color: #007700">.&nbsp;</span><span style=3D"color: #DD0000">",&nbsp;=
d_artists"</span><span style=3D"color: #007700">;&nbsp;&nbsp;&nbsp;</span><=
span style=3D"color: #0000BB">$sql2&nbsp;</span><span style=3D"color: #0077=
00">=3D&nbsp;</span><span style=3D"color: #0000BB">$sql2&nbsp;</span><span =
style=3D"color: #007700">.&nbsp;</span><span style=3D"color: #DD0000">",&nb=
sp;'</span><span style=3D"color: #0000BB">$d_artists</span><span style=3D"c=
olor: #DD0000">'"</span><span style=3D"color: #007700">;}<br>if&nbsp;(</spa=
n><span style=3D"color: #0000BB">strlen</span><span style=3D"color: #007700=
">(</span><span style=3D"color: #0000BB">$d_infotext</span><span style=3D"c=
olor: #007700">)&nbsp;&gt;&nbsp;</span><span style=3D"color: #0000BB">0</sp=
an><span style=3D"color: #007700">)&nbsp;&nbsp;{</span><span style=3D"color=
: #0000BB">$sql1&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span=
><span style=3D"color: #0000BB">$sql1&nbsp;</span><span style=3D"color: #00=
7700">.&nbsp;</span><span style=3D"color: #DD0000">",&nbsp;d_infotext"</spa=
n><span style=3D"color: #007700">;&nbsp;&nbsp;</span><span style=3D"color: =
#0000BB">$sql2&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><=
span style=3D"color: #0000BB">$sql2&nbsp;</span><span style=3D"color: #0077=
00">.&nbsp;</span><span style=3D"color: #DD0000">",&nbsp;'</span><span styl=
e=3D"color: #0000BB">$d_infotext</span><span style=3D"color: #DD0000">'"</s=
pan><span style=3D"color: #007700">;}</span><span style=3D"color: #0000BB">=
</span></code></code></pre>
<p>Thx!</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Andy!</p>
<p>Thank you for a real good question.</p>
<p>For PDO there is no simple solution. But it can be done with a code like=
 this</p>
<pre><code><code><span style=3D"color: #0000BB">$sql&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"INSERT=
&nbsp;INTO&nbsp;dates&nbsp;(d_insertdate,&nbsp;d_date,&nbsp;d_time,&nbsp;d_=
name"</span><span style=3D"color: #007700">;<br><br></span><span style=3D"c=
olor: #0000BB">$parameters&nbsp;</span><span style=3D"color: #007700">=3D&n=
bsp;[</span><span style=3D"color: #0000BB">$d_date</span><span style=3D"col=
or: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$d_time</span><sp=
an style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$d=
_name</span><span style=3D"color: #007700">];<br><br>if&nbsp;(</span><span =
style=3D"color: #0000BB">strlen</span><span style=3D"color: #007700">(</spa=
n><span style=3D"color: #0000BB">$d_admission</span><span style=3D"color: #=
007700">)&nbsp;&gt;&nbsp;</span><span style=3D"color: #0000BB">0</span><spa=
n style=3D"color: #007700">)&nbsp;{</span><span style=3D"color: #0000BB">$s=
ql&nbsp;</span><span style=3D"color: #007700">.=3D&nbsp;</span><span style=
=3D"color: #DD0000">",&nbsp;d_admission"</span><span style=3D"color: #00770=
0">;&nbsp;</span><span style=3D"color: #0000BB">$parameters</span><span sty=
le=3D"color: #007700">[]&nbsp;=3D&nbsp;</span><span style=3D"color: #0000BB=
">$d_admission</span><span style=3D"color: #007700">;}<br>if&nbsp;(</span><=
span style=3D"color: #0000BB">strlen</span><span style=3D"color: #007700">(=
</span><span style=3D"color: #0000BB">$d_artists</span><span style=3D"color=
: #007700">)&nbsp;&gt;&nbsp;</span><span style=3D"color: #0000BB">0</span><=
span style=3D"color: #007700">)&nbsp;&nbsp;&nbsp;{</span><span style=3D"col=
or: #0000BB">$sql&nbsp;</span><span style=3D"color: #007700">.=3D&nbsp;</sp=
an><span style=3D"color: #DD0000">",&nbsp;d_artists"</span><span style=3D"c=
olor: #007700">;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">$pa=
rameters</span><span style=3D"color: #007700">[]&nbsp;=3D&nbsp;</span><span=
 style=3D"color: #0000BB">$d_artists</span><span style=3D"color: #007700">;=
}<br>if&nbsp;(</span><span style=3D"color: #0000BB">strlen</span><span styl=
e=3D"color: #007700">(</span><span style=3D"color: #0000BB">$d_infotext</sp=
an><span style=3D"color: #007700">)&nbsp;&gt;&nbsp;</span><span style=3D"co=
lor: #0000BB">0</span><span style=3D"color: #007700">)&nbsp;&nbsp;{</span><=
span style=3D"color: #0000BB">$sql&nbsp;</span><span style=3D"color: #00770=
0">.=3D&nbsp;</span><span style=3D"color: #DD0000">",&nbsp;d_infotext"</spa=
n><span style=3D"color: #007700">;&nbsp;&nbsp;</span><span style=3D"color: =
#0000BB">$parameters</span><span style=3D"color: #007700">[]&nbsp;=3D&nbsp;=
</span><span style=3D"color: #0000BB">$d_infotext</span><span style=3D"colo=
r: #007700">;}<br><br></span><span style=3D"color: #0000BB">$sql&nbsp;</spa=
n><span style=3D"color: #007700">.=3D&nbsp;</span><span style=3D"color: #DD=
0000">")&nbsp;VALUES&nbsp;(SYSDATE()"</span><span style=3D"color: #007700">=
.</span><span style=3D"color: #0000BB">str_repeat</span><span style=3D"colo=
r: #007700">(</span><span style=3D"color: #DD0000">",&nbsp;?"</span><span s=
tyle=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">count<=
/span><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB"=
>$parameters</span><span style=3D"color: #007700">)).</span><span style=3D"=
color: #DD0000">")"</span><span style=3D"color: #007700">;<br><br></span><s=
pan style=3D"color: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt=
;</span><span style=3D"color: #0000BB">prepare</span><span style=3D"color: =
#007700">(</span><span style=3D"color: #0000BB">$sql</span><span style=3D"c=
olor: #007700">)-&gt;</span><span style=3D"color: #0000BB">execute</span><s=
pan style=3D"color: #007700">(</span><span style=3D"color: #0000BB">$parame=
ters</span><span style=3D"color: #007700">);</span><span style=3D"color: #0=
000BB"></span></code></code></pre>
<p>Here we are using just a single $sql variable which is getting field nam=
es based on your conditions.
Also, we are adding all our variables into <code>$parameters</code> array.<=
/p>
<p>Finally, we are adding VALUES part to the query, creating as many <code>=
?</code> marks in the query as many items in the <code>$parameters</code> a=
rray.<br>
And all we need now is to prepare a query and execute it with parameters.</=
p>
<p>Feel free to ask if you have any further questions!</p>              </d=
iv>
            </li>
=20
            <li class=3D"comment" id=3D"comment-169">
              <div class=3D"comment-author">
              	raNor, 03.02.17 01:25              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks a lot for this. As a beginner with PDO this taught me a lot.</p>
<p>I will definitely share your work with my classmates.</p>
<p>Cheers,</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-167">
              <div class=3D"comment-author">
              	Steve R, 28.01.17 12:19              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you for this extraordinary work. I found your concise, well formed presen=
tation of material an easy read and the explanations, examples and insights=
 on technique to be extremely helpful. My gratitude to you for your work on=
 and in, presenting this document.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-166">
              <div class=3D"comment-author">
              	Greg, 26.01.17 04:12              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Lots=
 of useful details on PDO! I use wizzyweb as it automates the code creation=
 for data entry and reports, even prepared statements for safer code.</p></=
div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-162">
              <div class=3D"comment-author">
              	Albert221, 11.01.17 01:10              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o!</p>
<p>I was at the beginning of writing a complex tutorial on how to use PDO i=
n polish, because there's not even one <strong>good</strong> tutorial about=
 it and while I was researching for some resources other than PHP manual I =
encountered your The only proper PDO tutorial and I got an idea to translat=
e it into polish, of course give you a proper credit and publish it on my b=
log (<a href=3D"http://nastoletni.pl/">http://nastoletni.pl</a>).</p>
<p>I'd be very grateful and I think polish beginners would be really gratef=
ul too for such a quality tutorial in such an important and trivial thing w=
hich is connecting to database in PHP.</p>
<p>Don't mind sending an email if you prefer it.</p>
<p>Best regards,
Albert Wolszon</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Albert! </p>
<p>Thank you for giving this article such a credit!
That would be a honor for me if you translate it to your native language. S=
urely, I am giving you the permission to translate.<br>
Please send me a link when it will be done!</p>
<p>Also, feel free to ask for clarifications, whenever you find it necessar=
y.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-161">
              <div class=3D"comment-author">
              	Kalule, 08.01.17 10:53              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks for the the articles. Very educative even for experienced programmers. K=
eep up the good work bro.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Kalule!</p>
<p>Thanks a lot for your feedback!
May I ask, what you find especially interesting in this article? and also, =
may be there are some parts that are not very clear or detailed? Please sha=
re your opinion.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-158">
              <div class=3D"comment-author">
              	Danilcha, 04.01.17 05:29              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>In t=
his example:
$stmt =3D $pdo-&gt;prepare("DELETE FROM goods WHERE category =3D ?");
$stmt-&gt;execute([$cat]);
$deleted =3D $stmt-&gt;fetchColumn();</p>
<p>Shouldn't it be rowCount instead of fetchColumn?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Danilcha!</p>
<p>Sure, that's my fault. Fixed.
Thanks for pointing out!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-157">
              <div class=3D"comment-author">
              	Viktor, 03.01.17 17:42              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,<=
/p>
<p>You seem to be very a skilled PHP developer, could you link me a good PH=
P tutorial so I can start learning the language the right way? Right now I =
have a website that I wrote from scratch using HTML, CSS of course and a bi=
t of copy-pasted, slightly edited JS. The only PHP I'm using are include st=
atements so that my pages don't become too hard to maintain. I'd like to be=
 able to load images, table content and text from a database, dynamically c=
reating a page the same way it's also done on forums and webshops. I unders=
tand that PHP 7 is relatively new so most of the tutorials out there are wr=
itten for PHP 5.6 or older. Is this a problem or is the conversion to 7 eas=
y?</p>
<p>Thanks,</p>
<p>Viktor</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Viktor!
Thank you for the good question.</p>
<p>The best resources to learn Php are <a href=3D"http://www.phptherightway=
.com/">http://www.phptherightway.com/</a> and <a href=3D"http://www.laracas=
ts.com/">http://www.laracasts.com/</a></p>
<p>As of the version, just don't worry: php7 is 99.9% the same as 5.6.</p>
<p>Feel free to ask other questions!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-156">
              <div class=3D"comment-author">
              	Tyler, 02.01.17 09:39              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Just=
 a note, if you are using an IN clause, and you need to -&gt;execute more v=
alues (besides those in the IN clause), this seems like a clean way to do i=
t:</p>
<pre><code><code><span style=3D"color: #0000BB">$query</span><span style=3D=
"color: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><=
span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">array_=
merge</span><span style=3D"color: #007700">(<br>&nbsp;&nbsp;&nbsp;&nbsp;arr=
ay&nbsp;(</span><span style=3D"color: #0000BB">$value1</span><span style=3D=
"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$value2</span=
><span style=3D"color: #007700">),&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span>=
<span style=3D"color: #0000BB">array_merge&nbsp;</span><span style=3D"color=
: #007700">(</span><span style=3D"color: #0000BB">$IN_CLAUSE_ARRAY</span><s=
pan style=3D"color: #007700">,&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;array&nbsp;(</span><span style=3D"color: #0000BB">$another_val=
ue</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color:=
 #0000BB">$another_value</span><span style=3D"color: #007700">))));</span><=
span style=3D"color: #0000BB"></span></code></code></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Tyler!</p>
<p>Thank you for the suggestion!</p>
<p>Indeed, last time I've answered the similar question on SO, I tought I s=
hould add such an example but got busy and forgot it. </p>
<p>Yet I think that you made your example a bit overcomplicated. You need o=
nly one <code>array_merge()</code> call:</p>
<pre><code><code><span style=3D"color: #0000BB">$query</span><span style=3D=
"color: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</span><=
span style=3D"color: #007700">(</span><span style=3D"color: #0000BB">array_=
merge</span><span style=3D"color: #007700">(<br>&nbsp;&nbsp;&nbsp;&nbsp;arr=
ay(</span><span style=3D"color: #0000BB">$value1</span><span style=3D"color=
: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$value2</span><span=
 style=3D"color: #007700">),</span><span style=3D"color: #0000BB">$IN_CLAUS=
E_ARRAY</span><span style=3D"color: #007700">,&nbsp;array&nbsp;(</span><spa=
n style=3D"color: #0000BB">$another1</span><span style=3D"color: #007700">,=
&nbsp;</span><span style=3D"color: #0000BB">$another2</span><span style=3D"=
color: #007700">)));</span><span style=3D"color: #0000BB"></span></code></c=
ode></pre>
<p>Please check the updated section: <a href=3D"https://phpdelusions.net/pd=
o#in">https://phpdelusions.net/pdo#in</a></p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-154">
              <div class=3D"comment-author">
              	M, 31.12.16 05:39              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Ques=
tion(s) regarding "Mysqlnd and buffered queries. Huge datasets.".</p>
<p>With the mysqlnd driver, what does that mean for fetch vs fetchall?</p>
<ul>
<li>Will the database be "hit" multiple times using fetch and only once usi=
ng fetchall?</li>
</ul>
<p>Thanks.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-153">
              <div class=3D"comment-author">
              	Joe, 26.12.16 22:49              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi,
If I wanted to save a single row from my database as a variable for later u=
se, would this be the correct way to do it ?</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SELECT&nbsp;count&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;punc=
h&nbsp;WHERE&nbsp;id=3D1&nbsp;LIMIT&nbsp;1"</span><span style=3D"color: #00=
7700">);&nbsp;<br></span><span style=3D"color: #0000BB">$stmt</span><span s=
tyle=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">execute<=
/span><span style=3D"color: #007700">();&nbsp;<br></span><span style=3D"col=
or: #0000BB">$row&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700"=
>-&gt;</span><span style=3D"color: #0000BB">fetch</span><span style=3D"colo=
r: #007700">();<br></span><span style=3D"color: #0000BB">$counter&nbsp;</sp=
an><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #00=
00BB">$row</span><span style=3D"color: #007700">[</span><span style=3D"colo=
r: #DD0000">'count'</span><span style=3D"color: #007700">];<br>echo&nbsp;</=
span><span style=3D"color: #0000BB">$counter</span><span style=3D"color: #0=
07700">;</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>Thanks :)</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hi Joe!</p>
<p>You just have to read this tutorial a <a href=3D"https://phpdelusions.ne=
t/pdo#fetchcolumn">little further</a> ;)</p>
<p>Depends on whether you're using a variable in your query or not, there w=
ill be either one line or three lines, not five. Just check the code by the=
 link and choose the variant that suits you best.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-151">
              <div class=3D"comment-author">
              	Joe, 26.12.16 20:46              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
I am following your code, however I am getting the following error.</p>
<blockquote>
<p>Parse error: syntax error, unexpected '[' in connect.php on line 9</p>
</blockquote></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Joe!</p>
<p>This one is very easy to fix. 5 years ago a new syntax for arrays was in=
troduced in PHP - square braces instead of <code>array()</code>. You can ch=
ange your code as follows. But better consider upgrading your PHP to a more=
 recent version</p>
<pre><code><code><span style=3D"color: #0000BB">$host&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'127.0=
.0.1'</span><span style=3D"color: #007700">;<br></span><span style=3D"color=
: #0000BB">$db&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&n=
bsp;</span><span style=3D"color: #DD0000">'test'</span><span style=3D"color=
: #007700">;<br></span><span style=3D"color: #0000BB">$user&nbsp;</span><sp=
an style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">=
'root'</span><span style=3D"color: #007700">;<br></span><span style=3D"colo=
r: #0000BB">$pass&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #DD0000">''</span><span style=3D"color: #007700">;<=
br></span><span style=3D"color: #0000BB">$charset&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'utf8'</=
span><span style=3D"color: #007700">;<br><br></span><span style=3D"color: #=
0000BB">$dsn&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><sp=
an style=3D"color: #DD0000">"mysql:host=3D</span><span style=3D"color: #000=
0BB">$host</span><span style=3D"color: #DD0000">;dbname=3D</span><span styl=
e=3D"color: #0000BB">$db</span><span style=3D"color: #DD0000">;charset=3D</=
span><span style=3D"color: #0000BB">$charset</span><span style=3D"color: #D=
D0000">"</span><span style=3D"color: #007700">;<br></span><span style=3D"co=
lor: #0000BB">$opt&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;arra=
y(<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">PDO</sp=
an><span style=3D"color: #007700">::</span><span style=3D"color: #0000BB">A=
TTR_ERRMODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span sty=
le=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><sp=
an style=3D"color: #0000BB">ERRMODE_EXCEPTION</span><span style=3D"color: #=
007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">=
PDO</span><span style=3D"color: #007700">::</span><span style=3D"color: #00=
00BB">ATTR_DEFAULT_FETCH_MODE&nbsp;</span><span style=3D"color: #007700">=
=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=3D=
"color: #007700">::</span><span style=3D"color: #0000BB">FETCH_ASSOC</span>=
<span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span st=
yle=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><s=
pan style=3D"color: #0000BB">ATTR_EMULATE_PREPARES&nbsp;&nbsp;&nbsp;</span>=
<span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #0=
000BB">false</span><span style=3D"color: #007700">,<br>);<br></span><span s=
tyle=3D"color: #0000BB">$pdo&nbsp;</span><span style=3D"color: #007700">=3D=
&nbsp;new&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #0000BB">$dsn</span><span=
 style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$use=
r</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: =
#0000BB">$pass</span><span style=3D"color: #007700">,&nbsp;</span><span sty=
le=3D"color: #0000BB">$opt</span><span style=3D"color: #007700">);</span><s=
pan style=3D"color: #0000BB"></span></code></code></pre>
<p>Hope you get the idea</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-147">
              <div class=3D"comment-author">
              	HashHashPHPNinjaCat, 21.12.16 03:03              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi e=
veryone!</p>
<p>If you you wish to be able to full Unicode in MySQL database, I would re=
ad here on how to do that utf8mb4</p>
<p>Make your code appear like this:</p>
<pre><code><code><span style=3D"color: #0000BB">$host&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'127.0=
.0.1'</span><span style=3D"color: #007700">;<br></span><span style=3D"color=
: #0000BB">$db&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&n=
bsp;</span><span style=3D"color: #DD0000">'test'</span><span style=3D"color=
: #007700">;<br></span><span style=3D"color: #0000BB">$user&nbsp;</span><sp=
an style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">=
'root'</span><span style=3D"color: #007700">;<br></span><span style=3D"colo=
r: #0000BB">$pass&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #DD0000">''</span><span style=3D"color: #007700">;<=
br></span><span style=3D"color: #0000BB">$charset&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'utf8mb4=
'</span><span style=3D"color: #007700">;<br><br></span><span style=3D"color=
: #0000BB">$dsn&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span>=
<span style=3D"color: #DD0000">"mysql:host=3D</span><span style=3D"color: #=
0000BB">$host</span><span style=3D"color: #DD0000">;dbname=3D</span><span s=
tyle=3D"color: #0000BB">$db</span><span style=3D"color: #DD0000">;charset=
=3D</span><span style=3D"color: #0000BB">$charset</span><span style=3D"colo=
r: #DD0000">"</span><span style=3D"color: #007700">;<br></span><span style=
=3D"color: #0000BB">$opt&nbsp;</span><span style=3D"color: #007700">=3D&nbs=
p;[<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">PDO</s=
pan><span style=3D"color: #007700">::</span><span style=3D"color: #0000BB">=
ATTR_ERRMODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span st=
yle=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><s=
pan style=3D"color: #0000BB">ERRMODE_EXCEPTION</span><span style=3D"color: =
#007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB"=
>PDO</span><span style=3D"color: #007700">::</span><span style=3D"color: #0=
000BB">ATTR_DEFAULT_FETCH_MODE&nbsp;</span><span style=3D"color: #007700">=
=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=3D=
"color: #007700">::</span><span style=3D"color: #0000BB">FETCH_ASSOC</span>=
<span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span st=
yle=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><s=
pan style=3D"color: #0000BB">ATTR_EMULATE_PREPARES&nbsp;&nbsp;&nbsp;</span>=
<span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #0=
000BB">false</span><span style=3D"color: #007700">,<br>];<br></span><span s=
tyle=3D"color: #0000BB">$pdo&nbsp;</span><span style=3D"color: #007700">=3D=
&nbsp;new&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=
=3D"color: #007700">(</span><span style=3D"color: #0000BB">$dsn</span><span=
 style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$use=
r</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: =
#0000BB">$pass</span><span style=3D"color: #007700">,&nbsp;</span><span sty=
le=3D"color: #0000BB">$opt</span><span style=3D"color: #007700">);</span><s=
pan style=3D"color: #0000BB"></span></code></code></pre>
<p>Notice the "utf8mb4" instead of "utf8". &#128570;</p>
<p>Then you will be able to store these into your database.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello PHP Ninja Cat!</p>
<p>Thank you for your suggestion!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-142">
              <div class=3D"comment-author">
              	Ian, 12.12.16 22:26              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>[ Th=
ank you for your reply dated 12 Dec 16]
Hello again.
After using the code above:-</p>
<pre><code><code><span style=3D"color: #0000BB">$host&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'127.0=
.0.1'</span><span style=3D"color: #007700">;<br></span><span style=3D"color=
: #0000BB">$db&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&n=
bsp;</span><span style=3D"color: #DD0000">'test'</span><span style=3D"color=
: #007700">;<br></span><span style=3D"color: #0000BB">$user&nbsp;</span><sp=
an style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">=
'root'</span><span style=3D"color: #007700">;<br></span><span style=3D"colo=
r: #0000BB">$pass&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</spa=
n><span style=3D"color: #DD0000">''</span><span style=3D"color: #007700">;<=
br></span><span style=3D"color: #0000BB">$charset&nbsp;</span><span style=
=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">'utf8'</=
span><span style=3D"color: #007700">;<br><br></span><span style=3D"color: #=
0000BB">$dsn&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><sp=
an style=3D"color: #DD0000">"mysql:host=3D</span><span style=3D"color: #000=
0BB">$host</span><span style=3D"color: #DD0000">;dbname=3D</span><span styl=
e=3D"color: #0000BB">$db</span><span style=3D"color: #DD0000">;charset=3D</=
span><span style=3D"color: #0000BB">$charset</span><span style=3D"color: #D=
D0000">"</span><span style=3D"color: #007700">;<br></span><span style=3D"co=
lor: #0000BB">$opt&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;[<br=
>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><s=
pan style=3D"color: #007700">::</span><span style=3D"color: #0000BB">ATTR_E=
RRMODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D=
"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span st=
yle=3D"color: #0000BB">ERRMODE_EXCEPTION</span><span style=3D"color: #00770=
0">,<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB">PDO</=
span><span style=3D"color: #007700">::</span><span style=3D"color: #0000BB"=
>ATTR_DEFAULT_FETCH_MODE&nbsp;</span><span style=3D"color: #007700">=3D&gt;=
&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=3D"color:=
 #007700">::</span><span style=3D"color: #0000BB">FETCH_ASSOC</span><span s=
tyle=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"=
color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><span sty=
le=3D"color: #0000BB">ATTR_EMULATE_PREPARES&nbsp;&nbsp;&nbsp;</span><span s=
tyle=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">=
false</span><span style=3D"color: #007700">,<br>];<br></span><span style=3D=
"color: #0000BB">$pdo&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;n=
ew&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=3D"colo=
r: #007700">(</span><span style=3D"color: #0000BB">$dsn</span><span style=
=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000BB">$user</spa=
n><span style=3D"color: #007700">,&nbsp;</span><span style=3D"color: #0000B=
B">$pass</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"=
color: #0000BB">$opt</span><span style=3D"color: #007700">);</span><span st=
yle=3D"color: #0000BB"></span></code></code></pre>
<p>and inserting the server ip address, my database user name,
password, database name.  I'm finding it don't work.  Am I going wrong?</p>
<p>Would you write a sample code which will, Connect and open the database,=
 create a table and finally insert data and close?  Thank you.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ian!</p>
<p>Well, this this is the exact code that should work, given you provides t=
he correct database credentials. To avoid a confusion, please keep in mind =
the following:</p>
<ul>
<li>when something doesn't work, always provide the actual outcome - the er=
ror message, the information shown, etc. You know it's hard to tell anythin=
g if you can't see the actual result</li>
<li>this code have to be used with PDO only. whatever else functions like m=
ysql_query or mysqli_query won't work with it.</li>
<li>Taken by itself, this very code is not supposed to "work". It just conn=
ects to a database, that's all. What is your expectations for this code, ho=
w it's supposed to work?</li>
</ul>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-141">
              <div class=3D"comment-author">
              	Ian, 12.12.16 02:07              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o.
Just a quick query, I'm currently teaching myself php, and started looking =
at database. I'd just like to ask, how do I insert using mysqli as the data=
 is been displayed on the screen only, and not been inserted into the datab=
ase?   Secondly is pdo better, if so, how do I get started with it?</p>
<p>Thank You</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ian!</p>
<p>Thank you for your questions.</p>
<p>For the first question it's hard to tell, without a code. All I can tell=
 is that you have to use a prepared statement for your query because it hel=
ps you to avoid many problems.</p>
<p>As of the PDO - you just landed on the exact page you need: this is a ve=
ry good PDO tutorial. Feel free to ask any question you have.</p>          =
    </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-139">
              <div class=3D"comment-author">
              	Hannes, 09.12.16 09:58              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I re=
ally like your page and whole blog :) everybody should use code like you ex=
plain. If you ever release a book i'll buy it :)</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-138">
              <div class=3D"comment-author">
              	Sam Judge, 07.12.16 21:57              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Oh w=
ow didn't know about the trailing comma in the arrays, learn something new =
every day :D Great tutorial, very comprehensive and useful !</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>You're welcome!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-137">
              <div class=3D"comment-author">
              	Sam Judge, 07.12.16 12:47              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>You =
have an error in one of your first snippets : </p>
<pre><code><code><span style=3D"color: #0000BB">$opt&nbsp;</span><span styl=
e=3D"color: #007700">=3D&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span sty=
le=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</span><sp=
an style=3D"color: #0000BB">ATTR_ERRMODE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">=
=3D&gt;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=3D=
"color: #007700">::</span><span style=3D"color: #0000BB">ERRMODE_EXCEPTION<=
/span><span style=3D"color: #007700">,<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><s=
pan style=3D"color: #0000BB">PDO</span><span style=3D"color: #007700">::</s=
pan><span style=3D"color: #0000BB">ATTR_DEFAULT_FETCH_MODE&nbsp;</span><spa=
n style=3D"color: #007700">=3D&gt;&nbsp;</span><span style=3D"color: #0000B=
B">PDO</span><span style=3D"color: #007700">::</span><span style=3D"color: =
#0000BB">FETCH_ASSOC</span><span style=3D"color: #007700">,<br>&nbsp;&nbsp;=
&nbsp;&nbsp;</span><span style=3D"color: #0000BB">PDO</span><span style=3D"=
color: #007700">::</span><span style=3D"color: #0000BB">ATTR_EMULATE_PREPAR=
ES&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&gt;&nbsp;</sp=
an><span style=3D"color: #0000BB">false</span><span style=3D"color: #007700=
">,<br>];</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>You have a comma after your last key-value pair! I'm sure that's not rig=
ht :)</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Sam!</p>
<p>Thank you for taking care, but there is no error: )<br>
Unlike JS, <a href=3D"http://php.net/manual/en/language.types.array.php">in=
 PHP it's pretty legitimate</a> and hugely useful too, allowing an uniform =
syntax for all array members.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-136">
              <div class=3D"comment-author">
              	grnadpa, 05.12.16 04:20              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>in t=
he try-catch you allow, the </p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"colo=
r: #0000BB">$pdo</span><span style=3D"color: #007700">-&gt;</span><span sty=
le=3D"color: #0000BB">prepare</span><span style=3D"color: #007700">(</span>=
<span style=3D"color: #DD0000">"INSERT&nbsp;INTO&nbsp;users&nbsp;VALUES&nbs=
p;(NULL,?,?,?,?)"</span><span style=3D"color: #007700">)-&gt;</span><span s=
tyle=3D"color: #0000BB">execute</span><span style=3D"color: #007700">(</spa=
n><span style=3D"color: #0000BB">$data</span><span style=3D"color: #007700"=
>);<br>}&nbsp;catch&nbsp;(</span><span style=3D"color: #0000BB">PDOExceptio=
n&nbsp;$e</span><span style=3D"color: #007700">)&nbsp;{<br>&nbsp;&nbsp;&nbs=
p;&nbsp;if&nbsp;(</span><span style=3D"color: #0000BB">$e</span><span style=
=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">getCode</spa=
n><span style=3D"color: #007700">()&nbsp;=3D=3D&nbsp;</span><span style=3D"=
color: #0000BB">1062</span><span style=3D"color: #007700">)&nbsp;{&nbsp;&nb=
sp;</span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>did not work for me as the value was 23000 or some such on a duplicate. =
What did work for me was </p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if&nbsp;(</span><span style=3D"color: #0000BB">$e</span><span st=
yle=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">errorInfo=
</span><span style=3D"color: #007700">[</span><span style=3D"color: #0000BB=
">1</span><span style=3D"color: #007700">]&nbsp;=3D=3D&nbsp;</span><span st=
yle=3D"color: #0000BB">1062</span><span style=3D"color: #007700">)&nbsp;{</=
span><span style=3D"color: #0000BB"></span></code></code></pre>
<p>I'm running on a dell Inspiron 15 laptop under windows 10 using Chrome V=
ersion 54.0.2840.99 . PHP version: 5.6.21 MySQL 5.7</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thank you for the report! </p>
<p>Although it's just to illustrate the handling process, I have to dig int=
o these codes deeper. I had the same issue before but no time to investigat=
e and develop the universal solution. Will add to my TODO list.</p>        =
      </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-133">
              <div class=3D"comment-author">
              	Ian Shepherd, 23.11.16 19:05              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>This=
 is a great article, and I have bookmarked the site for future use. Having =
seen your comment about inviting corrections to your English (which is exce=
llent, by the way), I have one that will improve readability in this articl=
e: in several places, you say "one have to", which should be "one has to". =
The verb "to have" is conjugated like so: I have; you (singular) have; he/s=
he/it/one has; we have; you (plural) have; they have. Hope this helps :)</p=
></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ian!</p>
<p>Thank you for your kind words and a suggestion!
Been busy recently, but finally got time to fix that.</p>              </di=
v>
            </li>
=20
            <li class=3D"comment" id=3D"comment-132">
              <div class=3D"comment-author">
              	My name, 19.11.16 15:55              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>That=
 code is vulnerable to sql injection.
you obviously havent tested it thoroughly.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-130">
              <div class=3D"comment-author">
              	Alan Cameron, 24.10.16 22:21              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I wo=
uld like more on how to INSERT INTO  a MySQL database.
I am having trouble understanding some code I have gathered from the intern=
et and the insert function of the DB.php after assembling the data keys and=
 values as fields and placeholders calls the query function of the DB.php t=
o do the insert as a Query. It then checks to see if an error occurred usin=
g</p>
<pre><code><code><span style=3D"color: #0000BB"></span><span style=3D"color=
: #007700">if&nbsp;(!</span><span style=3D"color: #0000BB">$this</span><spa=
n style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">query=
</span><span style=3D"color: #007700">(</span><span style=3D"color: #0000BB=
">$sql</span><span style=3D"color: #007700">,&nbsp;</span><span style=3D"co=
lor: #0000BB">$fields</span><span style=3D"color: #007700">)-&gt;</span><sp=
an style=3D"color: #0000BB">error</span><span style=3D"color: #007700">())<=
br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</span><span style=3D"color: #0=
000BB">true</span><span style=3D"color: #007700">;<br>}</span><span style=
=3D"color: #0000BB"></span></code></code></pre>
<p>This is returning without any error but no data is inserted.
What is the correct way using PDO to check for successful completion of the=
 insert?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Alan!</p>
<p>Thank you for the good question.
Although the example you posted is not a genuine PDO (there is no error() m=
ethod), and thus I cannot comment on it, I can answer the question regardin=
g error handling in general.</p>
<p>Most of time, you don't have to check for the success. Just write your c=
ode out of the assumption that everything goes well. So in your case you ca=
n just return true, unconditionally.</p>
<p>As of the possible failure, you don't have to write any dedicated handli=
ng code either.
Let me explain. You see, an error message like "Sorry insert failed" exists=
 only in schoolbooks. While for the real life sites it is agreed upon, that=
 on any unexpected error your program should just halt. Given PHP can halt =
on error by itself, you don't have to write any handling code by hand. Howe=
ver, this halting process consists of several steps. I am still in the proc=
ess of writing a whole article on the matter but in short:</p>
<ul>
<li>on a live site, a complete error message should go into error log. Just=
 to let you know what went wrong.</li>
<li>while in the browser a generic error page have to be shown.</li>
</ul>
<p>Both actions (logging and showing an excuse page) can be set up in a cen=
tralized way, written only once, somewhere else in your code. Means for the=
 moment you can keep your code as is, while by the time it goes live, you w=
ill be able to add whatever centralized error handling code you wish.</p>
<p>To let PDO halt on errors, just set it in exception mode is it's shown i=
n the article above, and avoid catching exceptions right in place. </p>
<p>Please feel free to ask if something is still unclear to you or you have=
 some particular scenario in mind you have to handle.</p>              </di=
v>
            </li>
=20
            <li class=3D"comment" id=3D"comment-128">
              <div class=3D"comment-author">
              	Sameer sakhare, 07.10.16 14:55              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks for the reply and the solution.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-127">
              <div class=3D"comment-author">
              	craz-ola, 06.10.16 06:24              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I re=
ally don't see the benefit of PDO. I've written almost 100 e-stores from th=
e ground up with all SQL flavors. This just seems like a big headache and a=
nnoying. It's easy to prepare SQL statements and send them to a server. I p=
ersonally don't think 'oh wow its gonna help my queries so much' ... I usua=
lly output the query in text to test it in a shell window.... and PDO is th=
e type of thing that causes sites to crash , be slow, and be dumb.. because=
 the developer put too much faith into it..! it just makes it harder to deb=
ug later....</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>PDO doesn't cause sites to crash or be sl=
ow.
You confused it with something else.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-126">
              <div class=3D"comment-author">
              	robot, 05.10.16 18:40              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>pdo =
o mysqli?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello robot! :)</p>
<p>Here is an article for you,
<a href=3D"https://phpdelusions.net/pdo/mysqli_comparison">https://phpdelus=
ions.net/pdo/mysqli_comparison</a></p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-125">
              <div class=3D"comment-author">
              	Ionut, 05.10.16 10:19              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Inte=
resting and logical points of view on this site, I like it. </p>
<p>I have a question regarding exception handling though: ok, it makes sens=
e to let exceptions bubble up the call stack and use an application-wide ha=
ndler, but what do I do if I need to show an error message in a certain pla=
ce on the page? </p>
<p>For instance, I have a page that displays a menu at the top, and underne=
ath that menu is the place where I want success/error messages to appear. I=
f the user tries to perform an operation in that page, and the operation fa=
ils because of the db, how can I display an error message in the proper pla=
ce on the page if I use a generic exception handler?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Ionut!</p>
<p>Thank you for a very good question.</p>
<p>Speaking of database errors, you don't actually show error messages for =
them.
For the success message it's all right;
For the validation errors it's all right;
But for the system errors it is not. </p>
<p>For such a system-wide error like a database failure (or whatever else P=
HP error), it's better to show a static 500 error message. Because if your =
database failed, then most likely you won't get your page properly anyway -=
 there are a lot of other queries that won't fire too. Just look at all the=
se big boys - they don't show you anything like that on page reload.</p>
<p>The only case when such an error message can be shown is AJAX call. But =
again, for a server it's all the same: on failure it have to send an error =
HTTP status code and a static error page. Then either the latter will be sh=
own (if requested directly) or the AJAX handler will consider the response =
status code (which is not 200) and show an error message. </p>
<p>If you still have any doubts, please provide a particular error example =
you are thinking of. It will make my answer more focused.</p>              =
</div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-124">
              <div class=3D"comment-author">
              	Sameer sakhare, 04.10.16 22:47              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I wa=
s waiting for my comment to be approved by moderator as it has link of imag=
e file : explaining my Question in detail.</p>
<p>I really need answer for the question, can you please look into it.</p><=
/div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Sorry, but there was no comment with an i=
mage. Can you please try to re-post it?
Or you can reply to the notification email directly, with your image attach=
ed.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-123">
              <div class=3D"comment-author">
              	Jouni "rautamiekka" J?rvinen, 04.10.16 18:05              </=
div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>"if =
you need to know how many rows in the table, use SELECT COUNT(*) query."</p=
>
<p>Partially false. First, don't take every column into the counting, it's =
worthless wasting. Second, make use of indexes, especially the primary key =
(or closest unique key of same purpose if no primary exists) like this: </p=
>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;COUNT</span><sp=
an style=3D"color: #007700">(`</span><span style=3D"color: #DD0000">primary=
keycolumn</span><span style=3D"color: #007700">`)&nbsp;</span><span style=
=3D"color: #0000BB">FROM&nbsp;</span><span style=3D"color: #007700">`</span=
><span style=3D"color: #DD0000">table</span><span style=3D"color: #007700">=
`&nbsp;USE&nbsp;</span><span style=3D"color: #0000BB">INDEX&nbsp;</span><sp=
an style=3D"color: #007700">(`</span><span style=3D"color: #DD0000">PRIMARY=
</span><span style=3D"color: #007700">`)</span><span style=3D"color: #0000B=
B"></span></code></code></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Joni!</p>
<p>Thank you for your contribution.
Unfortunately, both your statements are not true.</p>
<p>The first one is just irrelevant to the question. count(*) has nothing t=
o do with selecting columns. When counting, your database actually doesn't =
select anything, it just counts.</p>
<p>The second statement is wrong too, just because your database is smart e=
nough to pick up the appropriate index by itself. You can test it yourself,=
 by running query</p>
<pre><code><code><span style=3D"color: #0000BB">EXPLAIN&nbsp;SELECT&nbsp;co=
unt</span><span style=3D"color: #007700">(*)&nbsp;</span><span style=3D"col=
or: #0000BB">FROM&nbsp;table&nbsp;</span></code></code></pre>
<p>and checking the KEY section. There will be a key, if you have one defin=
ed in your table.</p>
<p>Hope it is all clear now :)</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-120">
              <div class=3D"comment-author">
              	Stefan, 03.10.16 06:28              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>You =
can't seriously call this a "proper PDO tutorial" when you don't ever say w=
hat "PDO" means, not even once. I had to google it to find out that it mean=
s "PHP Data Objects", which doesn't appear anywhere on this page (except no=
w in my comment).</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Funny, but you are right!</p>
<p>Dunno what practical use you can make from knowing that acronym meaning,=
 or whether "PHP Data Objects" makes any better sense for you, but indeed y=
ou are right - I didn't bother to put it here. I will fix it, special for y=
ou!</p>
<p>I am glad it was the only factual error you found :)</p>              </=
div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-119">
              <div class=3D"comment-author">
              	Sameer sakhare, 02.10.16 17:23              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Your=
 post covers every thing about PDO and its execution, but i have following =
doubts:</p>
<ol>
<li>What about sub-queries in where clause</li>
</ol>
<p>eg : </p>
<pre><code><code><span style=3D"color: #0000BB">Select&nbsp;</span><span st=
yle=3D"color: #007700">*&nbsp;</span><span style=3D"color: #0000BB">from&nb=
sp;tblUser&nbsp;Where&nbsp;nUserTypeID</span><span style=3D"color: #007700"=
>=3D(&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=3D"color: #0000BB=
">SELECT&nbsp;nTypeID&nbsp;from&nbsp;tblTypeMaster&nbsp;where&nbsp;vTypeNam=
e&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</span><span style=3D=
"color: #DD0000">'admin'</span><span style=3D"color: #007700">)</span><span=
 style=3D"color: #0000BB"></span></code></code></pre>
<p>sorry if query is not well formated</p>
<ol start=3D"2">
<li>What about JOINS</li>
</ol></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>The kind of SQL query is irrelevant to PD=
O: you can run any kind of query with PDO. You can run joins, sub-queries, =
stored procedures; set variables - whatever. PDO has nothing to do with you=
r SQL - it will just relay it to database server.</p>
<p>Hope it's clear now.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-118">
              <div class=3D"comment-author">
              	Leslie, 27.09.16 15:29              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>You =
have a typo in the INSERT/UPDATE example:</p>
<pre><code><code><span style=3D"color: #0000BB">$values</span><span style=
=3D"color: #007700">[</span><span style=3D"color: #0000BB">$field</span><sp=
an style=3D"color: #007700">]&nbsp;=3D&nbsp;</span><span style=3D"color: #0=
000BB">$source</span><span style=3D"color: #007700">[</span><span style=3D"=
color: #0000BB">$field</span><span style=3D"color: #007700">];</span><span =
style=3D"color: #0000BB"></span></code></code></pre>
<p>should be</p>
<pre><code><code><span style=3D"color: #0000BB">$values</span><span style=
=3D"color: #007700">[</span><span style=3D"color: #0000BB">$field</span><sp=
an style=3D"color: #007700">]&nbsp;=3D&nbsp;</span><span style=3D"color: #0=
000BB">$data</span><span style=3D"color: #007700">[</span><span style=3D"co=
lor: #0000BB">$field</span><span style=3D"color: #007700">];</span><span st=
yle=3D"color: #0000BB"></span></code></code></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thanks a lot!
Fixed.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-115">
              <div class=3D"comment-author">
              	Danny, 17.09.16 11:42              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I am=
 not a robot &gt;.&gt;</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Neither I am :)</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-114">
              <div class=3D"comment-author">
              	Danny, 17.09.16 11:41              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hell=
o</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-111">
              <div class=3D"comment-author">
              	Bob, 24.08.16 14:23              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>You =
say "This is the main and the only important reason why you were deprived f=
rom your beloved mysql_query() function and thrown into the harsh world of =
Data Objects: PDO has prepared statements support out of the box"</p>
<p>But $mysqli-&gt;prepare supports prepared statements. So prepared statem=
ents do not seem to be a reason to use PDO instead of mysqli.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thank you for catching that. Indeed the p=
hrasing is not that clear. However, mysqli is not mentioned not implied her=
e. This article is not about mysqli vs PDO comparison. It's solely about PD=
O, and it is expected that the reader is interested in PDO and this is why =
it mentioned here. </p>
<p>If you're looking for the article explaining why one should prefer PDO o=
ver mysqli, here is one: <a href=3D"https://phpdelusions.net/pdo/mysqli_com=
parison">https://phpdelusions.net/pdo/mysqli_comparison</a></p>
<p>Hope it is clear now.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-110">
              <div class=3D"comment-author">
              	Will, 24.08.16 14:19              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>As r=
equested, a correction to the last paragraph on your landing page. You can =
delete this comment after using it.</p>
<p>Text with improved grammar:
Disclaimer: I am not a native English speaker and have never even attended =
an English class, so there are tons of mistakes in the text for sure - I be=
g your pardon for them. Please, feel free to leave comments with correction=
s.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thanks a lot! Corrected.</p>             =
 </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-109">
              <div class=3D"comment-author">
              	George Butter, 22.08.16 06:07              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>This=
 is the best PDO tutorial I have found yet and I have SCOURED the internet.=
 Your explanations are so much more logical than anyone else's and you have=
 covered so much. Thank You.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-107">
              <div class=3D"comment-author">
              	Tyler, 07.08.16 00:54              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>If o=
ne should never use the rowCount() to count rows in database, what is the b=
est way to handle pagination?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello Tyler!</p>
<p>Thank you for the good question. Pagination is exactly the case when one=
 should never ever use the <code>rowCount()</code>.</p>
<p>By using this function you will ask a database to send into your PHP scr=
ipt all the rows found. It is highly inefficient and even may lead your ser=
ver to failure. </p>
<p>Instead, just like it is said in the article, you have to ask a database=
 to count the number of rows, by sending a query </p>
<pre><code><code><span style=3D"color: #0000BB">SELECT&nbsp;count</span><sp=
an style=3D"color: #007700">(*)&nbsp;</span><span style=3D"color: #0000BB">=
FROM&nbsp;</span><span style=3D"color: #007700">...</span><span style=3D"co=
lor: #0000BB"></span></code></code></pre>
<p>and then reading that single result. </p>
<p>Feel free to ask if you have any further questions!</p>              </d=
iv>
            </li>
=20
            <li class=3D"comment" id=3D"comment-104">
              <div class=3D"comment-author">
              	jamsden, 03.08.16 05:14              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>This=
 site has taught me more than 100 others. Thanks for the clear explanation =
of these confusing points.</p>
<p>One comment, it might be helpful to absolute beginners like myself, if y=
ou showed both email and status in your placeholders example. It was a litt=
le confusing for me to make the leap from SQL to named placeholder substitu=
tion.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hi there!</p>
<p>Thank you a lot for the kind words, and - especially - for the suggestio=
n. Indeed it was a stupid for me to omit status in the examples. Fixed now!=
</p>
<p>You're welcome to share any other suggestions or confusions - it will he=
lp me to make the site better for other people!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-103">
              <div class=3D"comment-author">
              	Merlin, 30.07.16 19:49              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Merl=
in rolls a +8 fireball against the robot.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-101">
              <div class=3D"comment-author">
              	robot, 26.07.16 22:02              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>iRob=
ot</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-98">
              <div class=3D"comment-author">
              	Cliff, 01.07.16 04:17              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I ha=
ve tried everything to get a piece of code to work. Can I pay you to give m=
e a solution that works, as well as review other pieces of code I have writ=
ten. If you reply to my email I will send the code. Unfortunately the time =
I have spent trying to learn this stuff has been sucking up all my time whe=
n I should be doing other things that make money.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-95">
              <div class=3D"comment-author">
              	Bell, 26.06.16 17:19              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>"Rec=
ently all PHP extensions that work with mysql database were updated based o=
n a low-level library called mysqlnd, which replaced old libmysql client"</=
p>
<p>This means PHP 5.3+. The word "recently" should be replaced.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thank you for your suggestion.</p>
<p>I will try to re-phrase it, but the problem is that replacement is not p=
ermanent. There are distributions, where libmysql is used by default. Means=
 one could still encounter with outdated setup. So, for the end user the ch=
ange is still recent, in the meaning one cannot rely on mysqlnd for sure.</=
p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-94">
              <div class=3D"comment-author">
              	gemozlobin, 25.06.16 12:56              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>It d=
id not work, beacause PDO::FETCH_UNIQUE does not work with PDO statement::s=
etFetchMode, it affect only if use in fetchAll method :(</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thank you for shring! </p>
<p>I will not delete your comments because it may help someone else. We all=
 learn from our mistakes and sharing a mistake is as good as sharing an ach=
ievement. </p>
<p>I will add a clarification regarding setFetchMode() to the article.</p>
<p>Thank you for this finding again!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-93">
              <div class=3D"comment-author">
              	gemozlobin, 25.06.16 12:42              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Abou=
t previous comment
Sorry it was my mistake.
I use ORM over PDO and it did not work, but clean PDO is working.
You can delete this and my previous comment</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-92">
              <div class=3D"comment-author">
              	gemozlobin, 25.06.16 00:51              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks for great job
But unfortunely PDO::FETCH_UNIQUE in mysql is not work as wrote in article.=
 This options tell PDO return unique value not row indexed by key :(</p></d=
iv>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Such a use case (to get only unique value=
s) would make a very little sense, as any database can return you unique va=
lues already.</p>
<p>Besides, all PDO fetch modes are irrelevant to database backend, working=
 exactly the same way for all databases including mysql.</p>
<p>I tested this code many times and always get the result as shown in the =
example.</p>
<p>What is your setup? Do you have an unique value listed first in the fiel=
d list in your query?</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-87">
              <div class=3D"comment-author">
              	Gerrit, 16.06.16 15:03              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
thanks for the excellent article. It gives some really helpful advice even =
for a little advanced developer.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thank you for your kind feedback!
This kind of response helps to keep the thing going. Check back for updates=
!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-86">
              <div class=3D"comment-author">
              	Julien, 06.06.16 22:28              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Grea=
t article. It convinced me to switch from mysqli to PDO.
There is just one detail that bother me, about the prepared statements and =
LIKE clauses. I may be wrong, but I'm pretty sure this don't work as intend=
ed:</p>
<pre><code><code><span style=3D"color: #0000BB">$search2&nbsp;</span><span =
style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #DD0000">"%<=
/span><span style=3D"color: #0000BB">$search</span><span style=3D"color: #D=
D0000">%"</span><span style=3D"color: #007700">;<br></span><span style=3D"c=
olor: #0000BB">$stmt&nbsp;&nbsp;</span><span style=3D"color: #007700">=3D&n=
bsp;</span><span style=3D"color: #0000BB">$pdo</span><span style=3D"color: =
#007700">-&gt;</span><span style=3D"color: #0000BB">prepare</span><span sty=
le=3D"color: #007700">(</span><span style=3D"color: #DD0000">"SELECT&nbsp;*=
&nbsp;FROM&nbsp;table&nbsp;WHERE&nbsp;name&nbsp;LIKE&nbsp;?"</span><span st=
yle=3D"color: #007700">);<br></span><span style=3D"color: #0000BB">$stmt</s=
pan><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000B=
B">execute</span><span style=3D"color: #007700">([</span><span style=3D"col=
or: #0000BB">$search2</span><span style=3D"color: #007700">]);<br></span><s=
pan style=3D"color: #0000BB">$data&nbsp;</span><span style=3D"color: #00770=
0">=3D&nbsp;</span><span style=3D"color: #0000BB">$stmt</span><span style=
=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">fetchAll</sp=
an><span style=3D"color: #007700">();</span><span style=3D"color: #0000BB">=
</span></code></code></pre>
<p>PDO will escape the two extra '%' in $search2 as it will escape every ot=
her '%' that may have been already in $search.
It's the same thing for this:</p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;</span><span sty=
le=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">$pdo</=
span><span style=3D"color: #007700">-&gt;</span><span style=3D"color: #0000=
BB">prepare</span><span style=3D"color: #007700">(</span><span style=3D"col=
or: #DD0000">"SHOW&nbsp;TABLES&nbsp;LIKE&nbsp;?"</span><span style=3D"color=
: #007700">);<br></span><span style=3D"color: #0000BB">$stmt</span><span st=
yle=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</=
span><span style=3D"color: #007700">([</span><span style=3D"color: #DD0000"=
>"%</span><span style=3D"color: #0000BB">$name</span><span style=3D"color: =
#DD0000">%"</span><span style=3D"color: #007700">]);<br></span><span style=
=3D"color: #0000BB">var_dump</span><span style=3D"color: #007700">(</span><=
span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #007700">-&=
gt;</span><span style=3D"color: #0000BB">fetchAll</span><span style=3D"colo=
r: #007700">());</span><span style=3D"color: #0000BB"></span></code></code>=
</pre>
<p>A proper way to handle this might be: </p>
<pre><code><code><span style=3D"color: #0000BB">$stmt&nbsp;&nbsp;</span><sp=
an style=3D"color: #007700">=3D&nbsp;</span><span style=3D"color: #0000BB">=
$pdo</span><span style=3D"color: #007700">-&gt;</span><span style=3D"color:=
 #0000BB">prepare</span><span style=3D"color: #007700">(</span><span style=
=3D"color: #DD0000">"SELECT&nbsp;*&nbsp;FROM&nbsp;table&nbsp;WHERE&nbsp;nam=
e&nbsp;LIKE&nbsp;CONCAT('%',&nbsp;?,&nbsp;'%')"</span><span style=3D"color:=
 #007700">);<br></span><span style=3D"color: #0000BB">$stmt</span><span sty=
le=3D"color: #007700">-&gt;</span><span style=3D"color: #0000BB">execute</s=
pan><span style=3D"color: #007700">([</span><span style=3D"color: #0000BB">=
$search</span><span style=3D"color: #007700">]);<br></span><span style=3D"c=
olor: #0000BB">$data&nbsp;</span><span style=3D"color: #007700">=3D&nbsp;</=
span><span style=3D"color: #0000BB">$stmt</span><span style=3D"color: #0077=
00">-&gt;</span><span style=3D"color: #0000BB">fetchAll</span><span style=
=3D"color: #007700">();</span><span style=3D"color: #0000BB"></span></code>=
</code></pre></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>This confusion is very easy to clear: pdo=
 won't escape % symbol and has not a single reason to do so. Therefore all =
the above codes would work.</p>
<p>Your variant is perfectly legitimate too, but to me it's just too length=
y.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-83">
              <div class=3D"comment-author">
              	test, 30.05.16 14:54              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>This=
 is a test to see if i am a robot works</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Passed, of course. There is no armor to b=
reak.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-82">
              <div class=3D"comment-author">
              	AucT, 23.05.16 11:02              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I me=
an what do you think about using for simple task smth like <a href=3D"http:=
//stackoverflow.com/a/27826114/1767461">http://stackoverflow.com/a/27826114=
/1767461</a></p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thank you for the suggestion.</p>
<p>There is a serious flaw in the answer by the link provided, as it doesn'=
t sanitize the field names. </p>
<p>You may find a correct solution in this article, in the following sectio=
n: <a href=3D"https://phpdelusions.net/pdo#identifiers">https://phpdelusion=
s.net/pdo#identifiers</a></p>
<p>Please ask if you find anything unclear or if you have any further quest=
ions.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-81">
              <div class=3D"comment-author">
              	AucT, 23.05.16 10:54              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi!
I would like you to put some simple active record function, to update and i=
nsert assoc array</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-79">
              <div class=3D"comment-author">
              	wmm, 15.05.16 21:07              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>sorr=
y, i wasn't clear.  i was asking about what actually gets sent to mysql/mar=
ia (hereafter, myria).  your comment about the artificial query made me cur=
ious about what PDO actually sends.  i used wireshark to expose the convers=
ation (WS is your friend :) and it appears the completely prepared query is=
 sent to myria.  </p>
<p>so, now, i'm a bit more confused - can you illucidate?  (i'm really NOT =
trying to make a point here, it's just that inquiring minds need to know :)=
</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Got you.
It's ok with your confusion. I understand the feeling. You just need to put=
 all the tiles together. Either way, I don't mind. </p>
<p>If you are using PDO with default settings, then emulation mode is used,=
 when PDO is sending a regular SQL with all the values put i the query. It =
occurs when execute() method is called.</p>
<p>While with setting PDO::ATTR_EMULATE_PREPARES to FALSE, the behavior cha=
nges: PDO sends a query with placeholders, when prepare() is called. So my =
comment on the artificial query is only applicable to this mode. </p>
<p>If you are already turned emulation off and still observing SQL with dat=
a substituted - then it is something unusual.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-78">
              <div class=3D"comment-author">
              	wmm, 14.05.16 00:52              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>last=
 question (promise) - you say that the query in mysql log is "an artificial=
 query that has been created solely for logging purpose, but not a real one=
 that has been executed" - exactly what is sent to mysql?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Well, first of all please promise to ask =
more.
When asking, you are helping me to make this article better.</p>
<p>When in native mode (i.e. when emulation is turned off) the exact query =
with placeholders is sent. I.e. if you wrote</p>
<p>SELECT * FROM t WHERE id=3D?</p>
<p>then exactly the same query is sent to mysql and executed. This is how n=
ative prepared statements are intended to work. You may read my answer with=
 explanation here: <a href=3D"http://stackoverflow.com/a/8265319/285587">ht=
tp://stackoverflow.com/a/8265319/285587</a></p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-77">
              <div class=3D"comment-author">
              	wmm, 13.05.16 23:58              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>than=
ks - in practice, never.  but i ran across this catch-22 behavior experimen=
ting with PDO in phpsh quite by accident.  i thought there might be some wa=
y to recover, but, at the time, i had to exit phpsh then re-connect.</p></d=
iv>
            </li>
=20
            <li class=3D"comment" id=3D"comment-76">
              <div class=3D"comment-author">
              	wmm, 13.05.16 22:13              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>i ta=
ke it that, short of using buffered queries (or script exit), using PDO::qu=
ery('SELECT something') will get you into a position where you can't recove=
r, since there's no PDOStatement on which to do a fetch/fetchAll().  or did=
 i miss something?   i assume the situation clears on script exit and/or co=
nnection loss.</p>
<p>tnx for the write up, both here and in SO - i refer to your thoughts fre=
quently.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Yes, you are right.
Everything that was associated with the connection (unfetched resultsets, p=
repared statements, transactions etc.) will be cleared up on the connection=
 close (and PHP will close a connection on exit).</p>
<p>However, I am not quite getting your point, why would you run a query wi=
thout assigning the result to a variable.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-75">
              <div class=3D"comment-author">
              	Socrat, 11.05.16 10:48              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>You =
have an error in text:
for all undefined properties <strong>get magic method will be called
if there is no </strong>get method in the class, then new property will be =
created</p>
<p>PDO doesn't execute <strong>get, instead it calls </strong>set to set va=
lues.
Cheers ;)</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thanks a ton!
Fixed!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-73">
              <div class=3D"comment-author">
              	Trevor, 30.04.16 20:57              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you so much for this brilliant document. It really covers most of the thi=
ngs in an inspiring way.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thank you for your feedback!</p>
<p>If you have any questions, I'll be glad to answer, as answering question=
s lets me make the article more clear and useful.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-71">
              <div class=3D"comment-author">
              	idk15, 26.04.16 06:45              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>One =
other downside to unbuffered queries is you can't run any other queries unt=
il the current query has returned all of its results.  That's why it is mor=
e convenient for the user to have PHP retrieve all the rows of a dataset be=
fore iterating over them - doing so allows other queries to be run inside t=
he while loop.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Thanks a lot for the reminder. Surely it'=
s a really important issue. Added it to the text.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-70">
              <div class=3D"comment-author">
              	ydk2, 15.04.16 10:34              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Yes =
great and simple.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-69">
              <div class=3D"comment-author">
              	brokenOval, 12.04.16 22:05              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Grea=
t article - love the gotchas at the end. I would love to see an addition de=
aling with the INSERT... ON DUPLICATE UPDATE procedure (which I'm currently=
 exploring) and how the single statement would take x number of bound varia=
bles on the INSERT with additional variables if the UPDATE procedure is sen=
t.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hello!</p>
<p>I am in doubts whether to add on duplicate case or not, as it's not dire=
ctly related to PDO. Either way the answer is sumple.</p>
<p>This kind of query has a neat feature exactly for your case. You can ref=
er to an insert part value using values() function (which is different from=
 regular values()):</p>
<p>Insert into t (foo, bar) values (?,?) On duplicate key update bar=3D val=
ues(bar);</p>
<p>So you have to bind your variables only once.
Hope you get the idea.</p>
<p>Either way feel free to ask any questions!</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-67">
              <div class=3D"comment-author">
              	len, 09.04.16 17:53              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>This=
 tutorial is a hackers wet dream. The statement
$pdo =3D new PDO($dsn, $user, $pass, $opt); </p>
<p>could possibly dump your complete login details (server, user, pw, etc) =
if there is any issue with connecting to the db (timeout or whatever). This=
 info is contained in the exception.  I stopped reading after that statemen=
t, I don't care if it is mentioned later on, YOU SHOULD NEVER send that com=
mand naked. I know what you are going to say later on but what I wrote is 1=
00% true and I tested it.</p>
<p>No wonder php has such a bad reputation.</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>PHP has its reputation due to users. Who =
is ignorant about most basic PHP settings. display_errors for instance. Whi=
ch have to be turned OFF on a live site - a PROPER way for hiding error mes=
sages. </p>
<p>ALL messages, mind you, not only one you've accidentally became aware of=
.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-66">
              <div class=3D"comment-author">
              	Salagir, 01.04.16 16:30              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
ks for the great article! I've been modifiying my code already!</p>
<p>A few things:</p>
<blockquote>
<p>"but most of time it's all right and won't cause any problem. E.g."
There is no example after that.</p>
<p>$deleted =3D $stmt-&gt;fetchRow();
I didn't find this function in the manual. Are you thinking rowCount() ?</p=
>
<p>Although you can tell rowCount()
Font change for ")" stops too soon ;p</p>
</blockquote></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-62">
              <div class=3D"comment-author">
              	Geist, 10.03.16 04:51              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Hi, =
I'm kinda new to PDO and would like some advice. </p>
<p>Right now I have three different tables in three different &amp; separat=
e databases (2 PGSQL, 1 MSSQL) that I have to INSERT into for user registra=
tion. This means I have 3 PDO connections, now all three INSERT are a bit d=
ifferent:</p>
<p>SQL 1: INSERT into user (Name, Password, Age)
SQL 2: INSERT into users ([LOGINNAME], [PASS], [OCCUPATION])
SQL 3: INSERT into users (Name, Address, Position)</p>
<p>Now what I want to do is to somehow rollback the INSERTs if one or more =
fails to insert, and commit only if all three can be inserted?
Can I rollback or commit outside of the try catch? or do I put all of them =
in one huge try catch block? or is there a better way that I can approach t=
his?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>Hi!</p>
<p>I am afraid I can't offer anything better.</p>
<p>It's impossible to have a proper transaction for the separate connection=
s. If you commit outside of try catch, there could be an error during commi=
t itself - yet you'll be unable to rollback. </p>
<p>But that's better than nothing - so, I think that you have to commit out=
side of try catch. You may also want to add another try catch to wrap commi=
ts, and try to recover successful inserts somehow.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-57">
              <div class=3D"comment-author">
              	Redeemer Pace, 25.02.16 01:02              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Well=
 done tutorial especially for who is new to PDO. </p>
<p>I use it as OOP mode on base class, way easier that way :P</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-56">
              <div class=3D"comment-author">
              	Bad Habit, 24.02.16 21:06              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Plea=
se tell about PDO::FETCH_CLASSTYPE, it comes handy when you store objects o=
f different subclasses in a single table</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-48">
              <div class=3D"comment-author">
              	Krash, 29.01.16 19:44              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Not =
covered topic with inserting batches. E.g.
INSERT INTO MyTable (col) VALUES (1),(2),(3);
AND
INSERT INTO MyTable (col) VALUES (1),(2),(3),(4);
Is two separate prepared needed?
$q1 =3D $pdo-&gt;prepare("INSERT INTO MyTable (col) VALUES (?),(?),(?),(?)"=
);
$q1 =3D $pdo-&gt;prepare("INSERT INTO MyTable (col) VALUES (?),(?),(?)");</=
p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-44">
              <div class=3D"comment-author">
              	boogers, 25.01.16 09:27              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>nice=
 job ripping the design from SO</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>You meant bootstrap and PHP.NET? ;)</p>  =
            </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-42">
              <div class=3D"comment-author">
              	Hugo, 20.01.16 16:13              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>@Ry =
nothing wrong with doing so, if you actually handle the error. If you are j=
ust echo'ing out the error message, you are better off not catching anythin=
g at all, you will get more information that way. And you can then turn off=
 display_errors in production.</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-41">
              <div class=3D"comment-author">
              	Ry, 14.12.15 02:08              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>grea=
t article, but what's wrong with wrapping pdo code by try - catch? I though=
t it was the way one handles exceptions in PHP?</p></div>
              <div class=3D"comment-reply" style=3D"overflow:hidden">
                <h4>Reply:</h4><p>I completely rewrote this section. Hope n=
ow it's clear.</p>              </div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-39">
              <div class=3D"comment-author">
              	David, 21.11.15 16:05              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>Than=
k you</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-38">
              <div class=3D"comment-author">
              	Yaqoob, 16.11.15 17:57              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>This=
 article pretty much clarified the proper useage of PDO, but sometimes it g=
ot over my head. old habits from mysqli_*</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-29">
              <div class=3D"comment-author">
              	Sunny, 23.10.15 17:52              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I'm =
trying to go from old, raw mysql to abstraction. PDO looks like a good path=
. Thanks !</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-28">
              <div class=3D"comment-author">
              	Porky, 14.10.15 22:01              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>I am=
 robot</p></div>
            </li>
=20
            <li class=3D"comment" id=3D"comment-20">
              <div class=3D"comment-author">
              	mac ll, 29.09.15 04:28              </div>
              <div class=3D"comment-body" style=3D"overflow:hidden"><p>good=
</p></div>
            </li>
          </ul>
         =20
        </div>
      </div>
    </div>

   =20

    <div class=3D"footer">
      <div class=3D"container">
        <div class=3D"col-xs-12 col-sm-2 col-md-2">
        </div>
        <div class=3D"col-xs-12 col-sm-10 col-md-8">
            <a href=3D"https://phpdelusions.net/about" class=3D"footer-link=
">About</a>
            =A9 phpdelusions.net, 2020
        </div>
        <div class=3D"col-xs-12 col-sm-12 col-md-2">
          <p></p>
        </div>
      </div>
    </div>
    <!-- Srcipts-->

   =20
   =20
   =20
 =20

<iframe scrolling=3D"no" frameborder=3D"0" allowtransparency=3D"true" src=
=3D"cid:frame-ABD77247F734ABB0FE2D976607614F45@mhtml.blink" title=3D"Twitte=
r settings iframe" style=3D"display: none;"></iframe></body></html>
------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-e27e8652-3219-412c-b094-4d5354059d31@mhtml.blink

@charset "windows-1252";

.fb_hidden { position: absolute; top: -10000px; z-index: 10001; }

.fb_reposition { overflow: hidden; position: relative; }

.fb_invisible { display: none; }

.fb_reset { background: none; border: 0px; border-spacing: 0px; color: rgb(=
0, 0, 0); cursor: auto; direction: ltr; font-family: "lucida grande", tahom=
a, verdana, arial, sans-serif; font-size: 11px; font-style: normal; font-va=
riant: normal; font-weight: normal; letter-spacing: normal; line-height: 1;=
 margin: 0px; overflow: visible; padding: 0px; text-align: left; text-decor=
ation: none; text-indent: 0px; text-shadow: none; text-transform: none; vis=
ibility: visible; white-space: normal; word-spacing: normal; }

.fb_reset > div { overflow: hidden; }

@keyframes fb_transform {=20
  0% { opacity: 0; transform: scale(0.95); }
  100% { opacity: 1; transform: scale(1); }
}

.fb_animate { animation: 0.3s ease 0s 1 normal forwards running fb_transfor=
m; }

.fb_dialog { background: rgba(82, 82, 82, 0.7); position: absolute; top: -1=
0000px; z-index: 10001; }

.fb_dialog_advanced { border-radius: 8px; padding: 10px; }

.fb_dialog_content { background: rgb(255, 255, 255); color: rgb(55, 55, 55)=
; }

.fb_dialog_close_icon { background: url("https://static.xx.fbcdn.net/rsrc.p=
hp/v3/yq/r/IE9JII6Z1Ys.png") 0px 0px no-repeat scroll transparent; cursor: =
pointer; display: block; height: 15px; position: absolute; right: 18px; top=
: 17px; width: 15px; }

.fb_dialog_mobile .fb_dialog_close_icon { left: 5px; right: auto; top: 5px;=
 }

.fb_dialog_padding { background-color: transparent; position: absolute; wid=
th: 1px; z-index: -1; }

.fb_dialog_close_icon:hover { background: url("https://static.xx.fbcdn.net/=
rsrc.php/v3/yq/r/IE9JII6Z1Ys.png") 0px -15px no-repeat scroll transparent; =
}

.fb_dialog_close_icon:active { background: url("https://static.xx.fbcdn.net=
/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png") 0px -30px no-repeat scroll transparent;=
 }

.fb_dialog_iframe { line-height: 0; }

.fb_dialog_content .dialog_title { background: rgb(109, 132, 180); border: =
1px solid rgb(54, 88, 153); color: rgb(255, 255, 255); font-size: 14px; fon=
t-weight: bold; margin: 0px; }

.fb_dialog_content .dialog_title > span { background: url("https://static.x=
x.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif") 5px 50% no-repeat; float: le=
ft; padding: 5px 0px 7px 26px; }

body.fb_hidden { height: 100%; left: 0px; margin: 0px; overflow: visible; p=
osition: absolute; top: -10000px; transform: none; width: 100%; }

.fb_dialog.fb_dialog_mobile.loading { background: url("https://static.xx.fb=
cdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif") 50% 50% no-repeat white; min-hei=
ght: 100%; min-width: 100%; overflow: hidden; position: absolute; top: 0px;=
 z-index: 10001; }

.fb_dialog.fb_dialog_mobile.loading.centered { background: none; height: au=
to; min-height: initial; min-width: initial; width: auto; }

.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner { wi=
dth: 100%; }

.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content { backgroun=
d: none; }

.loading.centered #fb_dialog_loader_close { clear: both; color: rgb(255, 25=
5, 255); display: block; font-size: 18px; padding-top: 20px; }

#fb-root #fb_dialog_ipad_overlay { background: rgba(0, 0, 0, 0.4); inset: 0=
px; min-height: 100%; position: absolute; width: 100%; z-index: 10000; }

#fb-root #fb_dialog_ipad_overlay.hidden { display: none; }

.fb_dialog.fb_dialog_mobile.loading iframe { visibility: hidden; }

.fb_dialog_mobile .fb_dialog_iframe { position: sticky; top: 0px; }

.fb_dialog_content .dialog_header { border-bottom: 1px solid rgb(4, 59, 135=
); border-top-color: rgb(4, 59, 135); border-right-color: rgb(4, 59, 135); =
border-left-color: rgb(4, 59, 135); box-shadow: white 0px 1px 1px -1px inse=
t; color: rgb(255, 255, 255); font: bold 14px Helvetica, sans-serif; text-o=
verflow: ellipsis; text-shadow: rgba(0, 30, 84, 0.298) 0px -1px 0px; vertic=
al-align: middle; white-space: nowrap; }

.fb_dialog_content .dialog_header table { height: 43px; width: 100%; }

.fb_dialog_content .dialog_header td.header_left { font-size: 12px; padding=
-left: 5px; vertical-align: middle; width: 60px; }

.fb_dialog_content .dialog_header td.header_right { font-size: 12px; paddin=
g-right: 5px; vertical-align: middle; width: 60px; }

.fb_dialog_content .touchable_button { background-clip: padding-box; border=
: 1px solid rgb(41, 72, 125); border-radius: 3px; display: inline-block; li=
ne-height: 18px; margin-top: 3px; max-width: 85px; padding: 4px 12px; posit=
ion: relative; }

.fb_dialog_content .dialog_header .touchable_button input { background: non=
e; border: none; color: rgb(255, 255, 255); font: bold 12px Helvetica, sans=
-serif; margin: 2px -12px; padding: 2px 6px 3px; text-shadow: rgba(0, 30, 8=
4, 0.298) 0px -1px 0px; }

.fb_dialog_content .dialog_header .header_center { color: rgb(255, 255, 255=
); font-size: 16px; font-weight: bold; line-height: 18px; text-align: cente=
r; vertical-align: middle; }

.fb_dialog_content .dialog_content { background: url("https://static.xx.fbc=
dn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif") 50% 50% no-repeat; border-width: =
0px 1px; border-right-style: solid; border-left-style: solid; border-right-=
color: rgb(74, 74, 74); border-left-color: rgb(74, 74, 74); border-image: i=
nitial; border-bottom-style: initial; border-bottom-color: initial; border-=
top-style: initial; border-top-color: initial; height: 150px; }

.fb_dialog_content .dialog_footer { background: rgb(245, 246, 247); border-=
width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(74, 7=
4, 74) rgb(74, 74, 74); border-image: initial; height: 40px; }

#fb_dialog_loader_close { float: left; }

.fb_dialog.fb_dialog_mobile .fb_dialog_close_button { text-shadow: rgba(0, =
30, 84, 0.298) 0px -1px 0px; }

.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon { visibility: hidden; }

#fb_dialog_loader_spinner { animation: 1.2s linear 0s infinite normal none =
running rotateSpinner; background-color: transparent; background-image: url=
("https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png"); backgroun=
d-position: 50% 50%; background-repeat: no-repeat; height: 24px; width: 24p=
x; }

@keyframes rotateSpinner {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.fb_iframe_widget { display: inline-block; position: relative; }

.fb_iframe_widget span { display: inline-block; position: relative; text-al=
ign: justify; }

.fb_iframe_widget iframe { position: absolute; }

.fb_iframe_widget_fluid_desktop, .fb_iframe_widget_fluid_desktop span, .fb_=
iframe_widget_fluid_desktop iframe { max-width: 100%; }

.fb_iframe_widget_fluid_desktop iframe { min-width: 220px; position: relati=
ve; }

.fb_iframe_widget_lift { z-index: 1; }

.fb_iframe_widget_fluid { display: inline; }

.fb_iframe_widget_fluid span { width: 100%; }
------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://phpdelusions.net/bower_components/bootstrap/dist/css/bootstrap.min.css

@charset "windows-1252";

html { font-family: sans-serif; text-size-adjust: 100%; }

body { margin: 0px; }

article, aside, details, figcaption, figure, footer, header, hgroup, main, =
menu, nav, section, summary { display: block; }

audio, canvas, progress, video { display: inline-block; vertical-align: bas=
eline; }

audio:not([controls]) { display: none; height: 0px; }

[hidden], template { display: none; }

a { background-color: transparent; }

a:active, a:hover { outline: 0px; }

abbr[title] { border-bottom: 1px dotted; }

b, strong { font-weight: 700; }

dfn { font-style: italic; }

h1 { margin: 0.67em 0px; font-size: 2em; }

mark { color: rgb(0, 0, 0); background: rgb(255, 255, 0); }

small { font-size: 80%; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { border: 0px; }

svg:not(:root) { overflow: hidden; }

figure { margin: 1em 40px; }

hr { height: 0px; box-sizing: content-box; }

pre { overflow: auto; }

code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

button, input, optgroup, select, textarea { margin: 0px; font: inherit; col=
or: inherit; }

button { overflow: visible; }

button, select { text-transform: none; }

button, html input[type=3D"button"], input[type=3D"reset"], input[type=3D"s=
ubmit"] { appearance: button; cursor: pointer; }

button[disabled], html input[disabled] { cursor: default; }

input { line-height: normal; }

input[type=3D"checkbox"], input[type=3D"radio"] { box-sizing: border-box; p=
adding: 0px; }

input[type=3D"number"]::-webkit-inner-spin-button, input[type=3D"number"]::=
-webkit-outer-spin-button { height: auto; }

input[type=3D"search"] { box-sizing: content-box; appearance: textfield; }

input[type=3D"search"]::-webkit-search-cancel-button, input[type=3D"search"=
]::-webkit-search-decoration { appearance: none; }

fieldset { padding: 0.35em 0.625em 0.75em; margin: 0px 2px; border: 1px sol=
id silver; }

legend { padding: 0px; border: 0px; }

textarea { overflow: auto; }

optgroup { font-weight: 700; }

table { border-spacing: 0px; border-collapse: collapse; }

td, th { padding: 0px; }

@media print {
  *, ::after, ::before { color: rgb(0, 0, 0) !important; text-shadow: none =
!important; background: 0px 0px !important; box-shadow: none !important; }
  a, a:visited { text-decoration: underline; }
  a[href]::after { content: " (" attr(href) ")"; }
  abbr[title]::after { content: " (" attr(title) ")"; }
  a[href^=3D"javascript:"]::after, a[href^=3D"#"]::after { content: ""; }
  blockquote, pre { border: 1px solid rgb(153, 153, 153); break-inside: avo=
id; }
  thead { display: table-header-group; }
  img, tr { break-inside: avoid; }
  img { max-width: 100% !important; }
  h2, h3, p { orphans: 3; widows: 3; }
  h2, h3 { break-after: avoid; }
  .navbar { display: none; }
  .btn > .caret, .dropup > .btn > .caret { border-top-color: rgb(0, 0, 0) !=
important; }
  .label { border: 1px solid rgb(0, 0, 0); }
  .table { border-collapse: collapse !important; }
  .table td, .table th { background-color: rgb(255, 255, 255) !important; }
  .table-bordered td, .table-bordered th { border: 1px solid rgb(221, 221, =
221) !important; }
}

@font-face { font-family: "Glyphicons Halflings"; src: url("../fonts/glyphi=
cons-halflings-regular.eot?#iefix") format("embedded-opentype"), url("../fo=
nts/glyphicons-halflings-regular.woff2") format("woff2"), url("../fonts/gly=
phicons-halflings-regular.woff") format("woff"), url("../fonts/glyphicons-h=
alflings-regular.ttf") format("truetype"), url("../fonts/glyphicons-halflin=
gs-regular.svg#glyphicons_halflingsregular") format("svg"); }

.glyphicon { position: relative; top: 1px; display: inline-block; font-fami=
ly: "Glyphicons Halflings"; font-style: normal; font-weight: 400; line-heig=
ht: 1; -webkit-font-smoothing: antialiased; }

.glyphicon-asterisk::before { content: "*"; }

.glyphicon-plus::before { content: "+"; }

.glyphicon-eur::before, .glyphicon-euro::before { content: "=80"; }

.glyphicon-minus::before { content: "\2212 "; }

.glyphicon-cloud::before { content: "\2601 "; }

.glyphicon-envelope::before { content: "\2709 "; }

.glyphicon-pencil::before { content: "\270f "; }

.glyphicon-glass::before { content: "\e001 "; }

.glyphicon-music::before { content: "\e002 "; }

.glyphicon-search::before { content: "\e003 "; }

.glyphicon-heart::before { content: "\e005 "; }

.glyphicon-star::before { content: "\e006 "; }

.glyphicon-star-empty::before { content: "\e007 "; }

.glyphicon-user::before { content: "\e008 "; }

.glyphicon-film::before { content: "\e009 "; }

.glyphicon-th-large::before { content: "\e010 "; }

.glyphicon-th::before { content: "\e011 "; }

.glyphicon-th-list::before { content: "\e012 "; }

.glyphicon-ok::before { content: "\e013 "; }

.glyphicon-remove::before { content: "\e014 "; }

.glyphicon-zoom-in::before { content: "\e015 "; }

.glyphicon-zoom-out::before { content: "\e016 "; }

.glyphicon-off::before { content: "\e017 "; }

.glyphicon-signal::before { content: "\e018 "; }

.glyphicon-cog::before { content: "\e019 "; }

.glyphicon-trash::before { content: "\e020 "; }

.glyphicon-home::before { content: "\e021 "; }

.glyphicon-file::before { content: "\e022 "; }

.glyphicon-time::before { content: "\e023 "; }

.glyphicon-road::before { content: "\e024 "; }

.glyphicon-download-alt::before { content: "\e025 "; }

.glyphicon-download::before { content: "\e026 "; }

.glyphicon-upload::before { content: "\e027 "; }

.glyphicon-inbox::before { content: "\e028 "; }

.glyphicon-play-circle::before { content: "\e029 "; }

.glyphicon-repeat::before { content: "\e030 "; }

.glyphicon-refresh::before { content: "\e031 "; }

.glyphicon-list-alt::before { content: "\e032 "; }

.glyphicon-lock::before { content: "\e033 "; }

.glyphicon-flag::before { content: "\e034 "; }

.glyphicon-headphones::before { content: "\e035 "; }

.glyphicon-volume-off::before { content: "\e036 "; }

.glyphicon-volume-down::before { content: "\e037 "; }

.glyphicon-volume-up::before { content: "\e038 "; }

.glyphicon-qrcode::before { content: "\e039 "; }

.glyphicon-barcode::before { content: "\e040 "; }

.glyphicon-tag::before { content: "\e041 "; }

.glyphicon-tags::before { content: "\e042 "; }

.glyphicon-book::before { content: "\e043 "; }

.glyphicon-bookmark::before { content: "\e044 "; }

.glyphicon-print::before { content: "\e045 "; }

.glyphicon-camera::before { content: "\e046 "; }

.glyphicon-font::before { content: "\e047 "; }

.glyphicon-bold::before { content: "\e048 "; }

.glyphicon-italic::before { content: "\e049 "; }

.glyphicon-text-height::before { content: "\e050 "; }

.glyphicon-text-width::before { content: "\e051 "; }

.glyphicon-align-left::before { content: "\e052 "; }

.glyphicon-align-center::before { content: "\e053 "; }

.glyphicon-align-right::before { content: "\e054 "; }

.glyphicon-align-justify::before { content: "\e055 "; }

.glyphicon-list::before { content: "\e056 "; }

.glyphicon-indent-left::before { content: "\e057 "; }

.glyphicon-indent-right::before { content: "\e058 "; }

.glyphicon-facetime-video::before { content: "\e059 "; }

.glyphicon-picture::before { content: "\e060 "; }

.glyphicon-map-marker::before { content: "\e062 "; }

.glyphicon-adjust::before { content: "\e063 "; }

.glyphicon-tint::before { content: "\e064 "; }

.glyphicon-edit::before { content: "\e065 "; }

.glyphicon-share::before { content: "\e066 "; }

.glyphicon-check::before { content: "\e067 "; }

.glyphicon-move::before { content: "\e068 "; }

.glyphicon-step-backward::before { content: "\e069 "; }

.glyphicon-fast-backward::before { content: "\e070 "; }

.glyphicon-backward::before { content: "\e071 "; }

.glyphicon-play::before { content: "\e072 "; }

.glyphicon-pause::before { content: "\e073 "; }

.glyphicon-stop::before { content: "\e074 "; }

.glyphicon-forward::before { content: "\e075 "; }

.glyphicon-fast-forward::before { content: "\e076 "; }

.glyphicon-step-forward::before { content: "\e077 "; }

.glyphicon-eject::before { content: "\e078 "; }

.glyphicon-chevron-left::before { content: "\e079 "; }

.glyphicon-chevron-right::before { content: "\e080 "; }

.glyphicon-plus-sign::before { content: "\e081 "; }

.glyphicon-minus-sign::before { content: "\e082 "; }

.glyphicon-remove-sign::before { content: "\e083 "; }

.glyphicon-ok-sign::before { content: "\e084 "; }

.glyphicon-question-sign::before { content: "\e085 "; }

.glyphicon-info-sign::before { content: "\e086 "; }

.glyphicon-screenshot::before { content: "\e087 "; }

.glyphicon-remove-circle::before { content: "\e088 "; }

.glyphicon-ok-circle::before { content: "\e089 "; }

.glyphicon-ban-circle::before { content: "\e090 "; }

.glyphicon-arrow-left::before { content: "\e091 "; }

.glyphicon-arrow-right::before { content: "\e092 "; }

.glyphicon-arrow-up::before { content: "\e093 "; }

.glyphicon-arrow-down::before { content: "\e094 "; }

.glyphicon-share-alt::before { content: "\e095 "; }

.glyphicon-resize-full::before { content: "\e096 "; }

.glyphicon-resize-small::before { content: "\e097 "; }

.glyphicon-exclamation-sign::before { content: "\e101 "; }

.glyphicon-gift::before { content: "\e102 "; }

.glyphicon-leaf::before { content: "\e103 "; }

.glyphicon-fire::before { content: "\e104 "; }

.glyphicon-eye-open::before { content: "\e105 "; }

.glyphicon-eye-close::before { content: "\e106 "; }

.glyphicon-warning-sign::before { content: "\e107 "; }

.glyphicon-plane::before { content: "\e108 "; }

.glyphicon-calendar::before { content: "\e109 "; }

.glyphicon-random::before { content: "\e110 "; }

.glyphicon-comment::before { content: "\e111 "; }

.glyphicon-magnet::before { content: "\e112 "; }

.glyphicon-chevron-up::before { content: "\e113 "; }

.glyphicon-chevron-down::before { content: "\e114 "; }

.glyphicon-retweet::before { content: "\e115 "; }

.glyphicon-shopping-cart::before { content: "\e116 "; }

.glyphicon-folder-close::before { content: "\e117 "; }

.glyphicon-folder-open::before { content: "\e118 "; }

.glyphicon-resize-vertical::before { content: "\e119 "; }

.glyphicon-resize-horizontal::before { content: "\e120 "; }

.glyphicon-hdd::before { content: "\e121 "; }

.glyphicon-bullhorn::before { content: "\e122 "; }

.glyphicon-bell::before { content: "\e123 "; }

.glyphicon-certificate::before { content: "\e124 "; }

.glyphicon-thumbs-up::before { content: "\e125 "; }

.glyphicon-thumbs-down::before { content: "\e126 "; }

.glyphicon-hand-right::before { content: "\e127 "; }

.glyphicon-hand-left::before { content: "\e128 "; }

.glyphicon-hand-up::before { content: "\e129 "; }

.glyphicon-hand-down::before { content: "\e130 "; }

.glyphicon-circle-arrow-right::before { content: "\e131 "; }

.glyphicon-circle-arrow-left::before { content: "\e132 "; }

.glyphicon-circle-arrow-up::before { content: "\e133 "; }

.glyphicon-circle-arrow-down::before { content: "\e134 "; }

.glyphicon-globe::before { content: "\e135 "; }

.glyphicon-wrench::before { content: "\e136 "; }

.glyphicon-tasks::before { content: "\e137 "; }

.glyphicon-filter::before { content: "\e138 "; }

.glyphicon-briefcase::before { content: "\e139 "; }

.glyphicon-fullscreen::before { content: "\e140 "; }

.glyphicon-dashboard::before { content: "\e141 "; }

.glyphicon-paperclip::before { content: "\e142 "; }

.glyphicon-heart-empty::before { content: "\e143 "; }

.glyphicon-link::before { content: "\e144 "; }

.glyphicon-phone::before { content: "\e145 "; }

.glyphicon-pushpin::before { content: "\e146 "; }

.glyphicon-usd::before { content: "\e148 "; }

.glyphicon-gbp::before { content: "\e149 "; }

.glyphicon-sort::before { content: "\e150 "; }

.glyphicon-sort-by-alphabet::before { content: "\e151 "; }

.glyphicon-sort-by-alphabet-alt::before { content: "\e152 "; }

.glyphicon-sort-by-order::before { content: "\e153 "; }

.glyphicon-sort-by-order-alt::before { content: "\e154 "; }

.glyphicon-sort-by-attributes::before { content: "\e155 "; }

.glyphicon-sort-by-attributes-alt::before { content: "\e156 "; }

.glyphicon-unchecked::before { content: "\e157 "; }

.glyphicon-expand::before { content: "\e158 "; }

.glyphicon-collapse-down::before { content: "\e159 "; }

.glyphicon-collapse-up::before { content: "\e160 "; }

.glyphicon-log-in::before { content: "\e161 "; }

.glyphicon-flash::before { content: "\e162 "; }

.glyphicon-log-out::before { content: "\e163 "; }

.glyphicon-new-window::before { content: "\e164 "; }

.glyphicon-record::before { content: "\e165 "; }

.glyphicon-save::before { content: "\e166 "; }

.glyphicon-open::before { content: "\e167 "; }

.glyphicon-saved::before { content: "\e168 "; }

.glyphicon-import::before { content: "\e169 "; }

.glyphicon-export::before { content: "\e170 "; }

.glyphicon-send::before { content: "\e171 "; }

.glyphicon-floppy-disk::before { content: "\e172 "; }

.glyphicon-floppy-saved::before { content: "\e173 "; }

.glyphicon-floppy-remove::before { content: "\e174 "; }

.glyphicon-floppy-save::before { content: "\e175 "; }

.glyphicon-floppy-open::before { content: "\e176 "; }

.glyphicon-credit-card::before { content: "\e177 "; }

.glyphicon-transfer::before { content: "\e178 "; }

.glyphicon-cutlery::before { content: "\e179 "; }

.glyphicon-header::before { content: "\e180 "; }

.glyphicon-compressed::before { content: "\e181 "; }

.glyphicon-earphone::before { content: "\e182 "; }

.glyphicon-phone-alt::before { content: "\e183 "; }

.glyphicon-tower::before { content: "\e184 "; }

.glyphicon-stats::before { content: "\e185 "; }

.glyphicon-sd-video::before { content: "\e186 "; }

.glyphicon-hd-video::before { content: "\e187 "; }

.glyphicon-subtitles::before { content: "\e188 "; }

.glyphicon-sound-stereo::before { content: "\e189 "; }

.glyphicon-sound-dolby::before { content: "\e190 "; }

.glyphicon-sound-5-1::before { content: "\e191 "; }

.glyphicon-sound-6-1::before { content: "\e192 "; }

.glyphicon-sound-7-1::before { content: "\e193 "; }

.glyphicon-copyright-mark::before { content: "\e194 "; }

.glyphicon-registration-mark::before { content: "\e195 "; }

.glyphicon-cloud-download::before { content: "\e197 "; }

.glyphicon-cloud-upload::before { content: "\e198 "; }

.glyphicon-tree-conifer::before { content: "\e199 "; }

.glyphicon-tree-deciduous::before { content: "\e200 "; }

.glyphicon-cd::before { content: "\e201 "; }

.glyphicon-save-file::before { content: "\e202 "; }

.glyphicon-open-file::before { content: "\e203 "; }

.glyphicon-level-up::before { content: "\e204 "; }

.glyphicon-copy::before { content: "\e205 "; }

.glyphicon-paste::before { content: "\e206 "; }

.glyphicon-alert::before { content: "\e209 "; }

.glyphicon-equalizer::before { content: "\e210 "; }

.glyphicon-king::before { content: "\e211 "; }

.glyphicon-queen::before { content: "\e212 "; }

.glyphicon-pawn::before { content: "\e213 "; }

.glyphicon-bishop::before { content: "\e214 "; }

.glyphicon-knight::before { content: "\e215 "; }

.glyphicon-baby-formula::before { content: "\e216 "; }

.glyphicon-tent::before { content: "\26fa "; }

.glyphicon-blackboard::before { content: "\e218 "; }

.glyphicon-bed::before { content: "\e219 "; }

.glyphicon-apple::before { content: "\f8ff "; }

.glyphicon-erase::before { content: "\e221 "; }

.glyphicon-hourglass::before { content: "\231b "; }

.glyphicon-lamp::before { content: "\e223 "; }

.glyphicon-duplicate::before { content: "\e224 "; }

.glyphicon-piggy-bank::before { content: "\e225 "; }

.glyphicon-scissors::before { content: "\e226 "; }

.glyphicon-bitcoin::before { content: "\e227 "; }

.glyphicon-btc::before { content: "\e227 "; }

.glyphicon-xbt::before { content: "\e227 "; }

.glyphicon-yen::before { content: "=A5"; }

.glyphicon-jpy::before { content: "=A5"; }

.glyphicon-ruble::before { content: "\20bd "; }

.glyphicon-rub::before { content: "\20bd "; }

.glyphicon-scale::before { content: "\e230 "; }

.glyphicon-ice-lolly::before { content: "\e231 "; }

.glyphicon-ice-lolly-tasted::before { content: "\e232 "; }

.glyphicon-education::before { content: "\e233 "; }

.glyphicon-option-horizontal::before { content: "\e234 "; }

.glyphicon-option-vertical::before { content: "\e235 "; }

.glyphicon-menu-hamburger::before { content: "\e236 "; }

.glyphicon-modal-window::before { content: "\e237 "; }

.glyphicon-oil::before { content: "\e238 "; }

.glyphicon-grain::before { content: "\e239 "; }

.glyphicon-sunglasses::before { content: "\e240 "; }

.glyphicon-text-size::before { content: "\e241 "; }

.glyphicon-text-color::before { content: "\e242 "; }

.glyphicon-text-background::before { content: "\e243 "; }

.glyphicon-object-align-top::before { content: "\e244 "; }

.glyphicon-object-align-bottom::before { content: "\e245 "; }

.glyphicon-object-align-horizontal::before { content: "\e246 "; }

.glyphicon-object-align-left::before { content: "\e247 "; }

.glyphicon-object-align-vertical::before { content: "\e248 "; }

.glyphicon-object-align-right::before { content: "\e249 "; }

.glyphicon-triangle-right::before { content: "\e250 "; }

.glyphicon-triangle-left::before { content: "\e251 "; }

.glyphicon-triangle-bottom::before { content: "\e252 "; }

.glyphicon-triangle-top::before { content: "\e253 "; }

.glyphicon-console::before { content: "\e254 "; }

.glyphicon-superscript::before { content: "\e255 "; }

.glyphicon-subscript::before { content: "\e256 "; }

.glyphicon-menu-left::before { content: "\e257 "; }

.glyphicon-menu-right::before { content: "\e258 "; }

.glyphicon-menu-down::before { content: "\e259 "; }

.glyphicon-menu-up::before { content: "\e260 "; }

* { box-sizing: border-box; }

::after, ::before { box-sizing: border-box; }

html { font-size: 10px; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }

body { font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; font-si=
ze: 14px; line-height: 1.42857; color: rgb(51, 51, 51); background-color: r=
gb(255, 255, 255); }

button, input, select, textarea { font-family: inherit; font-size: inherit;=
 line-height: inherit; }

a { color: rgb(51, 122, 183); text-decoration: none; }

a:focus, a:hover { color: rgb(35, 82, 124); text-decoration: underline; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px;=
 }

figure { margin: 0px; }

img { vertical-align: middle; }

.carousel-inner > .item > a > img, .carousel-inner > .item > img, .img-resp=
onsive, .thumbnail a > img, .thumbnail > img { display: block; max-width: 1=
00%; height: auto; }

.img-rounded { border-radius: 6px; }

.img-thumbnail { display: inline-block; max-width: 100%; height: auto; padd=
ing: 4px; line-height: 1.42857; background-color: rgb(255, 255, 255); borde=
r: 1px solid rgb(221, 221, 221); border-radius: 4px; transition: all 0.2s e=
ase-in-out 0s; }

.img-circle { border-radius: 50%; }

hr { margin-top: 20px; margin-bottom: 20px; border-width: 1px 0px 0px; bord=
er-right-style: initial; border-bottom-style: initial; border-left-style: i=
nitial; border-right-color: initial; border-bottom-color: initial; border-l=
eft-color: initial; border-image: initial; border-top-style: solid; border-=
top-color: rgb(238, 238, 238); }

.sr-only { position: absolute; width: 1px; height: 1px; padding: 0px; margi=
n: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); border: 0px; }

.sr-only-focusable:active, .sr-only-focusable:focus { position: static; wid=
th: auto; height: auto; margin: 0px; overflow: visible; clip: auto; }

[role=3D"button"] { cursor: pointer; }

.h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6 { font-family: inherit=
; font-weight: 500; line-height: 1.1; color: inherit; }

.h1 .small, .h1 small, .h2 .small, .h2 small, .h3 .small, .h3 small, .h4 .s=
mall, .h4 small, .h5 .small, .h5 small, .h6 .small, .h6 small, h1 .small, h=
1 small, h2 .small, h2 small, h3 .small, h3 small, h4 .small, h4 small, h5 =
.small, h5 small, h6 .small, h6 small { font-weight: 400; line-height: 1; c=
olor: rgb(119, 119, 119); }

.h1, .h2, .h3, h1, h2, h3 { margin-top: 20px; margin-bottom: 10px; }

.h1 .small, .h1 small, .h2 .small, .h2 small, .h3 .small, .h3 small, h1 .sm=
all, h1 small, h2 .small, h2 small, h3 .small, h3 small { font-size: 65%; }

.h4, .h5, .h6, h4, h5, h6 { margin-top: 10px; margin-bottom: 10px; }

.h4 .small, .h4 small, .h5 .small, .h5 small, .h6 .small, .h6 small, h4 .sm=
all, h4 small, h5 .small, h5 small, h6 .small, h6 small { font-size: 75%; }

.h1, h1 { font-size: 36px; }

.h2, h2 { font-size: 30px; }

.h3, h3 { font-size: 24px; }

.h4, h4 { font-size: 18px; }

.h5, h5 { font-size: 14px; }

.h6, h6 { font-size: 12px; }

p { margin: 0px 0px 10px; }

.lead { margin-bottom: 20px; font-size: 16px; font-weight: 300; line-height=
: 1.4; }

@media (min-width: 768px) {
  .lead { font-size: 21px; }
}

.small, small { font-size: 85%; }

.mark, mark { padding: 0.2em; background-color: rgb(252, 248, 227); }

.text-left { text-align: left; }

.text-right { text-align: right; }

.text-center { text-align: center; }

.text-justify { text-align: justify; }

.text-nowrap { white-space: nowrap; }

.text-lowercase { text-transform: lowercase; }

.text-uppercase { text-transform: uppercase; }

.text-capitalize { text-transform: capitalize; }

.text-muted { color: rgb(119, 119, 119); }

.text-primary { color: rgb(51, 122, 183); }

a.text-primary:focus, a.text-primary:hover { color: rgb(40, 96, 144); }

.text-success { color: rgb(60, 118, 61); }

a.text-success:focus, a.text-success:hover { color: rgb(43, 84, 44); }

.text-info { color: rgb(49, 112, 143); }

a.text-info:focus, a.text-info:hover { color: rgb(36, 82, 105); }

.text-warning { color: rgb(138, 109, 59); }

a.text-warning:focus, a.text-warning:hover { color: rgb(102, 81, 44); }

.text-danger { color: rgb(169, 68, 66); }

a.text-danger:focus, a.text-danger:hover { color: rgb(132, 53, 52); }

.bg-primary { color: rgb(255, 255, 255); background-color: rgb(51, 122, 183=
); }

a.bg-primary:focus, a.bg-primary:hover { background-color: rgb(40, 96, 144)=
; }

.bg-success { background-color: rgb(223, 240, 216); }

a.bg-success:focus, a.bg-success:hover { background-color: rgb(193, 226, 17=
9); }

.bg-info { background-color: rgb(217, 237, 247); }

a.bg-info:focus, a.bg-info:hover { background-color: rgb(175, 217, 238); }

.bg-warning { background-color: rgb(252, 248, 227); }

a.bg-warning:focus, a.bg-warning:hover { background-color: rgb(247, 236, 18=
1); }

.bg-danger { background-color: rgb(242, 222, 222); }

a.bg-danger:focus, a.bg-danger:hover { background-color: rgb(228, 185, 185)=
; }

.page-header { padding-bottom: 9px; margin: 40px 0px 20px; border-bottom: 1=
px solid rgb(238, 238, 238); }

ol, ul { margin-top: 0px; margin-bottom: 10px; }

ol ol, ol ul, ul ol, ul ul { margin-bottom: 0px; }

.list-unstyled { padding-left: 0px; list-style: none; }

.list-inline { padding-left: 0px; margin-left: -5px; list-style: none; }

.list-inline > li { display: inline-block; padding-right: 5px; padding-left=
: 5px; }

dl { margin-top: 0px; margin-bottom: 20px; }

dd, dt { line-height: 1.42857; }

dt { font-weight: 700; }

dd { margin-left: 0px; }

@media (min-width: 768px) {
  .dl-horizontal dt { float: left; width: 160px; overflow: hidden; clear: l=
eft; text-align: right; text-overflow: ellipsis; white-space: nowrap; }
  .dl-horizontal dd { margin-left: 180px; }
}

abbr[data-original-title], abbr[title] { cursor: help; border-bottom: 1px d=
otted rgb(119, 119, 119); }

.initialism { font-size: 90%; text-transform: uppercase; }

blockquote { padding: 10px 20px; margin: 0px 0px 20px; font-size: 17.5px; b=
order-left: 5px solid rgb(238, 238, 238); }

blockquote ol:last-child, blockquote p:last-child, blockquote ul:last-child=
 { margin-bottom: 0px; }

blockquote .small, blockquote footer, blockquote small { display: block; fo=
nt-size: 80%; line-height: 1.42857; color: rgb(119, 119, 119); }

blockquote .small::before, blockquote footer::before, blockquote small::bef=
ore { content: "=97=A0"; }

.blockquote-reverse, blockquote.pull-right { padding-right: 15px; padding-l=
eft: 0px; text-align: right; border-right: 5px solid rgb(238, 238, 238); bo=
rder-left: 0px; }

.blockquote-reverse .small::before, .blockquote-reverse footer::before, .bl=
ockquote-reverse small::before, blockquote.pull-right .small::before, block=
quote.pull-right footer::before, blockquote.pull-right small::before { cont=
ent: ""; }

.blockquote-reverse .small::after, .blockquote-reverse footer::after, .bloc=
kquote-reverse small::after, blockquote.pull-right .small::after, blockquot=
e.pull-right footer::after, blockquote.pull-right small::after { content: "=
=A0=97"; }

address { margin-bottom: 20px; font-style: normal; line-height: 1.42857; }

code, kbd, pre, samp { font-family: Menlo, Monaco, Consolas, "Courier New",=
 monospace; }

code { padding: 2px 4px; font-size: 90%; color: rgb(199, 37, 78); backgroun=
d-color: rgb(249, 242, 244); border-radius: 4px; }

kbd { padding: 2px 4px; font-size: 90%; color: rgb(255, 255, 255); backgrou=
nd-color: rgb(51, 51, 51); border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.=
25) 0px -1px 0px inset; }

kbd kbd { padding: 0px; font-size: 100%; font-weight: 700; box-shadow: none=
; }

pre { display: block; padding: 9.5px; margin: 0px 0px 10px; font-size: 13px=
; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; over=
flow-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px so=
lid rgb(204, 204, 204); border-radius: 4px; }

pre code { padding: 0px; font-size: inherit; color: inherit; white-space: p=
re-wrap; background-color: transparent; border-radius: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

.container { padding-right: 15px; padding-left: 15px; margin-right: auto; m=
argin-left: auto; }

@media (min-width: 768px) {
  .container { width: 750px; }
}

@media (min-width: 992px) {
  .container { width: 970px; }
}

@media (min-width: 1200px) {
  .container { width: 1170px; }
}

.container-fluid { padding-right: 15px; padding-left: 15px; margin-right: a=
uto; margin-left: auto; }

.row { margin-right: -15px; margin-left: -15px; }

.col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-l=
g-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col=
-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5,=
 .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm=
-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .co=
l-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12=
, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs=
-8, .col-xs-9 { position: relative; min-height: 1px; padding-right: 15px; p=
adding-left: 15px; }

.col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-x=
s-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 { float: left; }

.col-xs-12 { width: 100%; }

.col-xs-11 { width: 91.6667%; }

.col-xs-10 { width: 83.3333%; }

.col-xs-9 { width: 75%; }

.col-xs-8 { width: 66.6667%; }

.col-xs-7 { width: 58.3333%; }

.col-xs-6 { width: 50%; }

.col-xs-5 { width: 41.6667%; }

.col-xs-4 { width: 33.3333%; }

.col-xs-3 { width: 25%; }

.col-xs-2 { width: 16.6667%; }

.col-xs-1 { width: 8.33333%; }

.col-xs-pull-12 { right: 100%; }

.col-xs-pull-11 { right: 91.6667%; }

.col-xs-pull-10 { right: 83.3333%; }

.col-xs-pull-9 { right: 75%; }

.col-xs-pull-8 { right: 66.6667%; }

.col-xs-pull-7 { right: 58.3333%; }

.col-xs-pull-6 { right: 50%; }

.col-xs-pull-5 { right: 41.6667%; }

.col-xs-pull-4 { right: 33.3333%; }

.col-xs-pull-3 { right: 25%; }

.col-xs-pull-2 { right: 16.6667%; }

.col-xs-pull-1 { right: 8.33333%; }

.col-xs-pull-0 { right: auto; }

.col-xs-push-12 { left: 100%; }

.col-xs-push-11 { left: 91.6667%; }

.col-xs-push-10 { left: 83.3333%; }

.col-xs-push-9 { left: 75%; }

.col-xs-push-8 { left: 66.6667%; }

.col-xs-push-7 { left: 58.3333%; }

.col-xs-push-6 { left: 50%; }

.col-xs-push-5 { left: 41.6667%; }

.col-xs-push-4 { left: 33.3333%; }

.col-xs-push-3 { left: 25%; }

.col-xs-push-2 { left: 16.6667%; }

.col-xs-push-1 { left: 8.33333%; }

.col-xs-push-0 { left: auto; }

.col-xs-offset-12 { margin-left: 100%; }

.col-xs-offset-11 { margin-left: 91.6667%; }

.col-xs-offset-10 { margin-left: 83.3333%; }

.col-xs-offset-9 { margin-left: 75%; }

.col-xs-offset-8 { margin-left: 66.6667%; }

.col-xs-offset-7 { margin-left: 58.3333%; }

.col-xs-offset-6 { margin-left: 50%; }

.col-xs-offset-5 { margin-left: 41.6667%; }

.col-xs-offset-4 { margin-left: 33.3333%; }

.col-xs-offset-3 { margin-left: 25%; }

.col-xs-offset-2 { margin-left: 16.6667%; }

.col-xs-offset-1 { margin-left: 8.33333%; }

.col-xs-offset-0 { margin-left: 0px; }

@media (min-width: 768px) {
  .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col=
-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9 { float: left;=
 }
  .col-sm-12 { width: 100%; }
  .col-sm-11 { width: 91.6667%; }
  .col-sm-10 { width: 83.3333%; }
  .col-sm-9 { width: 75%; }
  .col-sm-8 { width: 66.6667%; }
  .col-sm-7 { width: 58.3333%; }
  .col-sm-6 { width: 50%; }
  .col-sm-5 { width: 41.6667%; }
  .col-sm-4 { width: 33.3333%; }
  .col-sm-3 { width: 25%; }
  .col-sm-2 { width: 16.6667%; }
  .col-sm-1 { width: 8.33333%; }
  .col-sm-pull-12 { right: 100%; }
  .col-sm-pull-11 { right: 91.6667%; }
  .col-sm-pull-10 { right: 83.3333%; }
  .col-sm-pull-9 { right: 75%; }
  .col-sm-pull-8 { right: 66.6667%; }
  .col-sm-pull-7 { right: 58.3333%; }
  .col-sm-pull-6 { right: 50%; }
  .col-sm-pull-5 { right: 41.6667%; }
  .col-sm-pull-4 { right: 33.3333%; }
  .col-sm-pull-3 { right: 25%; }
  .col-sm-pull-2 { right: 16.6667%; }
  .col-sm-pull-1 { right: 8.33333%; }
  .col-sm-pull-0 { right: auto; }
  .col-sm-push-12 { left: 100%; }
  .col-sm-push-11 { left: 91.6667%; }
  .col-sm-push-10 { left: 83.3333%; }
  .col-sm-push-9 { left: 75%; }
  .col-sm-push-8 { left: 66.6667%; }
  .col-sm-push-7 { left: 58.3333%; }
  .col-sm-push-6 { left: 50%; }
  .col-sm-push-5 { left: 41.6667%; }
  .col-sm-push-4 { left: 33.3333%; }
  .col-sm-push-3 { left: 25%; }
  .col-sm-push-2 { left: 16.6667%; }
  .col-sm-push-1 { left: 8.33333%; }
  .col-sm-push-0 { left: auto; }
  .col-sm-offset-12 { margin-left: 100%; }
  .col-sm-offset-11 { margin-left: 91.6667%; }
  .col-sm-offset-10 { margin-left: 83.3333%; }
  .col-sm-offset-9 { margin-left: 75%; }
  .col-sm-offset-8 { margin-left: 66.6667%; }
  .col-sm-offset-7 { margin-left: 58.3333%; }
  .col-sm-offset-6 { margin-left: 50%; }
  .col-sm-offset-5 { margin-left: 41.6667%; }
  .col-sm-offset-4 { margin-left: 33.3333%; }
  .col-sm-offset-3 { margin-left: 25%; }
  .col-sm-offset-2 { margin-left: 16.6667%; }
  .col-sm-offset-1 { margin-left: 8.33333%; }
  .col-sm-offset-0 { margin-left: 0px; }
}

@media (min-width: 992px) {
  .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col=
-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9 { float: left;=
 }
  .col-md-12 { width: 100%; }
  .col-md-11 { width: 91.6667%; }
  .col-md-10 { width: 83.3333%; }
  .col-md-9 { width: 75%; }
  .col-md-8 { width: 66.6667%; }
  .col-md-7 { width: 58.3333%; }
  .col-md-6 { width: 50%; }
  .col-md-5 { width: 41.6667%; }
  .col-md-4 { width: 33.3333%; }
  .col-md-3 { width: 25%; }
  .col-md-2 { width: 16.6667%; }
  .col-md-1 { width: 8.33333%; }
  .col-md-pull-12 { right: 100%; }
  .col-md-pull-11 { right: 91.6667%; }
  .col-md-pull-10 { right: 83.3333%; }
  .col-md-pull-9 { right: 75%; }
  .col-md-pull-8 { right: 66.6667%; }
  .col-md-pull-7 { right: 58.3333%; }
  .col-md-pull-6 { right: 50%; }
  .col-md-pull-5 { right: 41.6667%; }
  .col-md-pull-4 { right: 33.3333%; }
  .col-md-pull-3 { right: 25%; }
  .col-md-pull-2 { right: 16.6667%; }
  .col-md-pull-1 { right: 8.33333%; }
  .col-md-pull-0 { right: auto; }
  .col-md-push-12 { left: 100%; }
  .col-md-push-11 { left: 91.6667%; }
  .col-md-push-10 { left: 83.3333%; }
  .col-md-push-9 { left: 75%; }
  .col-md-push-8 { left: 66.6667%; }
  .col-md-push-7 { left: 58.3333%; }
  .col-md-push-6 { left: 50%; }
  .col-md-push-5 { left: 41.6667%; }
  .col-md-push-4 { left: 33.3333%; }
  .col-md-push-3 { left: 25%; }
  .col-md-push-2 { left: 16.6667%; }
  .col-md-push-1 { left: 8.33333%; }
  .col-md-push-0 { left: auto; }
  .col-md-offset-12 { margin-left: 100%; }
  .col-md-offset-11 { margin-left: 91.6667%; }
  .col-md-offset-10 { margin-left: 83.3333%; }
  .col-md-offset-9 { margin-left: 75%; }
  .col-md-offset-8 { margin-left: 66.6667%; }
  .col-md-offset-7 { margin-left: 58.3333%; }
  .col-md-offset-6 { margin-left: 50%; }
  .col-md-offset-5 { margin-left: 41.6667%; }
  .col-md-offset-4 { margin-left: 33.3333%; }
  .col-md-offset-3 { margin-left: 25%; }
  .col-md-offset-2 { margin-left: 16.6667%; }
  .col-md-offset-1 { margin-left: 8.33333%; }
  .col-md-offset-0 { margin-left: 0px; }
}

@media (min-width: 1200px) {
  .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col=
-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9 { float: left;=
 }
  .col-lg-12 { width: 100%; }
  .col-lg-11 { width: 91.6667%; }
  .col-lg-10 { width: 83.3333%; }
  .col-lg-9 { width: 75%; }
  .col-lg-8 { width: 66.6667%; }
  .col-lg-7 { width: 58.3333%; }
  .col-lg-6 { width: 50%; }
  .col-lg-5 { width: 41.6667%; }
  .col-lg-4 { width: 33.3333%; }
  .col-lg-3 { width: 25%; }
  .col-lg-2 { width: 16.6667%; }
  .col-lg-1 { width: 8.33333%; }
  .col-lg-pull-12 { right: 100%; }
  .col-lg-pull-11 { right: 91.6667%; }
  .col-lg-pull-10 { right: 83.3333%; }
  .col-lg-pull-9 { right: 75%; }
  .col-lg-pull-8 { right: 66.6667%; }
  .col-lg-pull-7 { right: 58.3333%; }
  .col-lg-pull-6 { right: 50%; }
  .col-lg-pull-5 { right: 41.6667%; }
  .col-lg-pull-4 { right: 33.3333%; }
  .col-lg-pull-3 { right: 25%; }
  .col-lg-pull-2 { right: 16.6667%; }
  .col-lg-pull-1 { right: 8.33333%; }
  .col-lg-pull-0 { right: auto; }
  .col-lg-push-12 { left: 100%; }
  .col-lg-push-11 { left: 91.6667%; }
  .col-lg-push-10 { left: 83.3333%; }
  .col-lg-push-9 { left: 75%; }
  .col-lg-push-8 { left: 66.6667%; }
  .col-lg-push-7 { left: 58.3333%; }
  .col-lg-push-6 { left: 50%; }
  .col-lg-push-5 { left: 41.6667%; }
  .col-lg-push-4 { left: 33.3333%; }
  .col-lg-push-3 { left: 25%; }
  .col-lg-push-2 { left: 16.6667%; }
  .col-lg-push-1 { left: 8.33333%; }
  .col-lg-push-0 { left: auto; }
  .col-lg-offset-12 { margin-left: 100%; }
  .col-lg-offset-11 { margin-left: 91.6667%; }
  .col-lg-offset-10 { margin-left: 83.3333%; }
  .col-lg-offset-9 { margin-left: 75%; }
  .col-lg-offset-8 { margin-left: 66.6667%; }
  .col-lg-offset-7 { margin-left: 58.3333%; }
  .col-lg-offset-6 { margin-left: 50%; }
  .col-lg-offset-5 { margin-left: 41.6667%; }
  .col-lg-offset-4 { margin-left: 33.3333%; }
  .col-lg-offset-3 { margin-left: 25%; }
  .col-lg-offset-2 { margin-left: 16.6667%; }
  .col-lg-offset-1 { margin-left: 8.33333%; }
  .col-lg-offset-0 { margin-left: 0px; }
}

table { background-color: transparent; }

caption { padding-top: 8px; padding-bottom: 8px; color: rgb(119, 119, 119);=
 text-align: left; }

th { text-align: left; }

.table { width: 100%; max-width: 100%; margin-bottom: 20px; }

.table > tbody > tr > td, .table > tbody > tr > th, .table > tfoot > tr > t=
d, .table > tfoot > tr > th, .table > thead > tr > td, .table > thead > tr =
> th { padding: 8px; line-height: 1.42857; vertical-align: top; border-top:=
 1px solid rgb(221, 221, 221); }

.table > thead > tr > th { vertical-align: bottom; border-bottom: 2px solid=
 rgb(221, 221, 221); }

.table > caption + thead > tr:first-child > td, .table > caption + thead > =
tr:first-child > th, .table > colgroup + thead > tr:first-child > td, .tabl=
e > colgroup + thead > tr:first-child > th, .table > thead:first-child > tr=
:first-child > td, .table > thead:first-child > tr:first-child > th { borde=
r-top: 0px; }

.table > tbody + tbody { border-top: 2px solid rgb(221, 221, 221); }

.table .table { background-color: rgb(255, 255, 255); }

.table-condensed > tbody > tr > td, .table-condensed > tbody > tr > th, .ta=
ble-condensed > tfoot > tr > td, .table-condensed > tfoot > tr > th, .table=
-condensed > thead > tr > td, .table-condensed > thead > tr > th { padding:=
 5px; }

.table-bordered { border: 1px solid rgb(221, 221, 221); }

.table-bordered > tbody > tr > td, .table-bordered > tbody > tr > th, .tabl=
e-bordered > tfoot > tr > td, .table-bordered > tfoot > tr > th, .table-bor=
dered > thead > tr > td, .table-bordered > thead > tr > th { border: 1px so=
lid rgb(221, 221, 221); }

.table-bordered > thead > tr > td, .table-bordered > thead > tr > th { bord=
er-bottom-width: 2px; }

.table-striped > tbody > tr:nth-of-type(2n+1) { background-color: rgb(249, =
249, 249); }

.table-hover > tbody > tr:hover { background-color: rgb(245, 245, 245); }

table col[class*=3D"col-"] { position: static; display: table-column; float=
: none; }

table td[class*=3D"col-"], table th[class*=3D"col-"] { position: static; di=
splay: table-cell; float: none; }

.table > tbody > tr.active > td, .table > tbody > tr.active > th, .table > =
tbody > tr > td.active, .table > tbody > tr > th.active, .table > tfoot > t=
r.active > td, .table > tfoot > tr.active > th, .table > tfoot > tr > td.ac=
tive, .table > tfoot > tr > th.active, .table > thead > tr.active > td, .ta=
ble > thead > tr.active > th, .table > thead > tr > td.active, .table > the=
ad > tr > th.active { background-color: rgb(245, 245, 245); }

.table-hover > tbody > tr.active:hover > td, .table-hover > tbody > tr.acti=
ve:hover > th, .table-hover > tbody > tr:hover > .active, .table-hover > tb=
ody > tr > td.active:hover, .table-hover > tbody > tr > th.active:hover { b=
ackground-color: rgb(232, 232, 232); }

.table > tbody > tr.success > td, .table > tbody > tr.success > th, .table =
> tbody > tr > td.success, .table > tbody > tr > th.success, .table > tfoot=
 > tr.success > td, .table > tfoot > tr.success > th, .table > tfoot > tr >=
 td.success, .table > tfoot > tr > th.success, .table > thead > tr.success =
> td, .table > thead > tr.success > th, .table > thead > tr > td.success, .=
table > thead > tr > th.success { background-color: rgb(223, 240, 216); }

.table-hover > tbody > tr.success:hover > td, .table-hover > tbody > tr.suc=
cess:hover > th, .table-hover > tbody > tr:hover > .success, .table-hover >=
 tbody > tr > td.success:hover, .table-hover > tbody > tr > th.success:hove=
r { background-color: rgb(208, 233, 198); }

.table > tbody > tr.info > td, .table > tbody > tr.info > th, .table > tbod=
y > tr > td.info, .table > tbody > tr > th.info, .table > tfoot > tr.info >=
 td, .table > tfoot > tr.info > th, .table > tfoot > tr > td.info, .table >=
 tfoot > tr > th.info, .table > thead > tr.info > td, .table > thead > tr.i=
nfo > th, .table > thead > tr > td.info, .table > thead > tr > th.info { ba=
ckground-color: rgb(217, 237, 247); }

.table-hover > tbody > tr.info:hover > td, .table-hover > tbody > tr.info:h=
over > th, .table-hover > tbody > tr:hover > .info, .table-hover > tbody > =
tr > td.info:hover, .table-hover > tbody > tr > th.info:hover { background-=
color: rgb(196, 227, 243); }

.table > tbody > tr.warning > td, .table > tbody > tr.warning > th, .table =
> tbody > tr > td.warning, .table > tbody > tr > th.warning, .table > tfoot=
 > tr.warning > td, .table > tfoot > tr.warning > th, .table > tfoot > tr >=
 td.warning, .table > tfoot > tr > th.warning, .table > thead > tr.warning =
> td, .table > thead > tr.warning > th, .table > thead > tr > td.warning, .=
table > thead > tr > th.warning { background-color: rgb(252, 248, 227); }

.table-hover > tbody > tr.warning:hover > td, .table-hover > tbody > tr.war=
ning:hover > th, .table-hover > tbody > tr:hover > .warning, .table-hover >=
 tbody > tr > td.warning:hover, .table-hover > tbody > tr > th.warning:hove=
r { background-color: rgb(250, 242, 204); }

.table > tbody > tr.danger > td, .table > tbody > tr.danger > th, .table > =
tbody > tr > td.danger, .table > tbody > tr > th.danger, .table > tfoot > t=
r.danger > td, .table > tfoot > tr.danger > th, .table > tfoot > tr > td.da=
nger, .table > tfoot > tr > th.danger, .table > thead > tr.danger > td, .ta=
ble > thead > tr.danger > th, .table > thead > tr > td.danger, .table > the=
ad > tr > th.danger { background-color: rgb(242, 222, 222); }

.table-hover > tbody > tr.danger:hover > td, .table-hover > tbody > tr.dang=
er:hover > th, .table-hover > tbody > tr:hover > .danger, .table-hover > tb=
ody > tr > td.danger:hover, .table-hover > tbody > tr > th.danger:hover { b=
ackground-color: rgb(235, 204, 204); }

.table-responsive { min-height: 0.01%; overflow-x: auto; }

@media screen and (max-width: 767px) {
  .table-responsive { width: 100%; margin-bottom: 15px; overflow-y: hidden;=
 border: 1px solid rgb(221, 221, 221); }
  .table-responsive > .table { margin-bottom: 0px; }
  .table-responsive > .table > tbody > tr > td, .table-responsive > .table =
> tbody > tr > th, .table-responsive > .table > tfoot > tr > td, .table-res=
ponsive > .table > tfoot > tr > th, .table-responsive > .table > thead > tr=
 > td, .table-responsive > .table > thead > tr > th { white-space: nowrap; =
}
  .table-responsive > .table-bordered { border: 0px; }
  .table-responsive > .table-bordered > tbody > tr > td:first-child, .table=
-responsive > .table-bordered > tbody > tr > th:first-child, .table-respons=
ive > .table-bordered > tfoot > tr > td:first-child, .table-responsive > .t=
able-bordered > tfoot > tr > th:first-child, .table-responsive > .table-bor=
dered > thead > tr > td:first-child, .table-responsive > .table-bordered > =
thead > tr > th:first-child { border-left: 0px; }
  .table-responsive > .table-bordered > tbody > tr > td:last-child, .table-=
responsive > .table-bordered > tbody > tr > th:last-child, .table-responsiv=
e > .table-bordered > tfoot > tr > td:last-child, .table-responsive > .tabl=
e-bordered > tfoot > tr > th:last-child, .table-responsive > .table-bordere=
d > thead > tr > td:last-child, .table-responsive > .table-bordered > thead=
 > tr > th:last-child { border-right: 0px; }
  .table-responsive > .table-bordered > tbody > tr:last-child > td, .table-=
responsive > .table-bordered > tbody > tr:last-child > th, .table-responsiv=
e > .table-bordered > tfoot > tr:last-child > td, .table-responsive > .tabl=
e-bordered > tfoot > tr:last-child > th { border-bottom: 0px; }
}

fieldset { min-width: 0px; padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; padding: 0px; margin-bottom: 20px; fo=
nt-size: 21px; line-height: inherit; color: rgb(51, 51, 51); border-width: =
0px 0px 1px; border-top-style: initial; border-right-style: initial; border=
-left-style: initial; border-top-color: initial; border-right-color: initia=
l; border-left-color: initial; border-image: initial; border-bottom-style: =
solid; border-bottom-color: rgb(229, 229, 229); }

label { display: inline-block; max-width: 100%; margin-bottom: 5px; font-we=
ight: 700; }

input[type=3D"search"] { box-sizing: border-box; }

input[type=3D"checkbox"], input[type=3D"radio"] { margin: 4px 0px 0px; line=
-height: normal; }

input[type=3D"file"] { display: block; }

input[type=3D"range"] { display: block; width: 100%; }

select[multiple], select[size] { height: auto; }

input[type=3D"file"]:focus, input[type=3D"checkbox"]:focus, input[type=3D"r=
adio"]:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: =
-2px; }

output { display: block; padding-top: 7px; font-size: 14px; line-height: 1.=
42857; color: rgb(85, 85, 85); }

.form-control { display: block; width: 100%; height: 34px; padding: 6px 12p=
x; font-size: 14px; line-height: 1.42857; color: rgb(85, 85, 85); backgroun=
d-color: rgb(255, 255, 255); background-image: none; border: 1px solid rgb(=
204, 204, 204); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.075) 0px 1p=
x 1px inset; transition: border-color 0.15s ease-in-out 0s, box-shadow 0.15=
s ease-in-out 0s; }

.form-control:focus { border-color: rgb(102, 175, 233); outline: 0px; box-s=
hadow: rgba(0, 0, 0, 0.075) 0px 1px 1px inset, rgba(102, 175, 233, 0.6) 0px=
 0px 8px; }

.form-control::-webkit-input-placeholder { color: rgb(153, 153, 153); }

.form-control[disabled], .form-control[readonly], fieldset[disabled] .form-=
control { background-color: rgb(238, 238, 238); opacity: 1; }

.form-control[disabled], fieldset[disabled] .form-control { cursor: not-all=
owed; }

textarea.form-control { height: auto; }

input[type=3D"search"] { appearance: none; }

@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type=3D"date"].form-control, input[type=3D"time"].form-control, inp=
ut[type=3D"datetime-local"].form-control, input[type=3D"month"].form-contro=
l { line-height: 34px; }
  .input-group-sm input[type=3D"date"], .input-group-sm input[type=3D"time"=
], .input-group-sm input[type=3D"datetime-local"], .input-group-sm input[ty=
pe=3D"month"], input[type=3D"date"].input-sm, input[type=3D"time"].input-sm=
, input[type=3D"datetime-local"].input-sm, input[type=3D"month"].input-sm {=
 line-height: 30px; }
  .input-group-lg input[type=3D"date"], .input-group-lg input[type=3D"time"=
], .input-group-lg input[type=3D"datetime-local"], .input-group-lg input[ty=
pe=3D"month"], input[type=3D"date"].input-lg, input[type=3D"time"].input-lg=
, input[type=3D"datetime-local"].input-lg, input[type=3D"month"].input-lg {=
 line-height: 46px; }
}

.form-group { margin-bottom: 15px; }

.checkbox, .radio { position: relative; display: block; margin-top: 10px; m=
argin-bottom: 10px; }

.checkbox label, .radio label { min-height: 20px; padding-left: 20px; margi=
n-bottom: 0px; font-weight: 400; cursor: pointer; }

.checkbox input[type=3D"checkbox"], .checkbox-inline input[type=3D"checkbox=
"], .radio input[type=3D"radio"], .radio-inline input[type=3D"radio"] { pos=
ition: absolute; margin-left: -20px; }

.checkbox + .checkbox, .radio + .radio { margin-top: -5px; }

.checkbox-inline, .radio-inline { position: relative; display: inline-block=
; padding-left: 20px; margin-bottom: 0px; font-weight: 400; vertical-align:=
 middle; cursor: pointer; }

.checkbox-inline + .checkbox-inline, .radio-inline + .radio-inline { margin=
-top: 0px; margin-left: 10px; }

fieldset[disabled] input[type=3D"checkbox"], fieldset[disabled] input[type=
=3D"radio"], input[type=3D"checkbox"].disabled, input[type=3D"checkbox"][di=
sabled], input[type=3D"radio"].disabled, input[type=3D"radio"][disabled] { =
cursor: not-allowed; }

.checkbox-inline.disabled, .radio-inline.disabled, fieldset[disabled] .chec=
kbox-inline, fieldset[disabled] .radio-inline { cursor: not-allowed; }

.checkbox.disabled label, .radio.disabled label, fieldset[disabled] .checkb=
ox label, fieldset[disabled] .radio label { cursor: not-allowed; }

.form-control-static { min-height: 34px; padding-top: 7px; padding-bottom: =
7px; margin-bottom: 0px; }

.form-control-static.input-lg, .form-control-static.input-sm { padding-righ=
t: 0px; padding-left: 0px; }

.input-sm { height: 30px; padding: 5px 10px; font-size: 12px; line-height: =
1.5; border-radius: 3px; }

select.input-sm { height: 30px; line-height: 30px; }

select[multiple].input-sm, textarea.input-sm { height: auto; }

.form-group-sm .form-control { height: 30px; padding: 5px 10px; font-size: =
12px; line-height: 1.5; border-radius: 3px; }

.form-group-sm select.form-control { height: 30px; line-height: 30px; }

.form-group-sm select[multiple].form-control, .form-group-sm textarea.form-=
control { height: auto; }

.form-group-sm .form-control-static { height: 30px; min-height: 32px; paddi=
ng: 6px 10px; font-size: 12px; line-height: 1.5; }

.input-lg { height: 46px; padding: 10px 16px; font-size: 18px; line-height:=
 1.33333; border-radius: 6px; }

select.input-lg { height: 46px; line-height: 46px; }

select[multiple].input-lg, textarea.input-lg { height: auto; }

.form-group-lg .form-control { height: 46px; padding: 10px 16px; font-size:=
 18px; line-height: 1.33333; border-radius: 6px; }

.form-group-lg select.form-control { height: 46px; line-height: 46px; }

.form-group-lg select[multiple].form-control, .form-group-lg textarea.form-=
control { height: auto; }

.form-group-lg .form-control-static { height: 46px; min-height: 38px; paddi=
ng: 11px 16px; font-size: 18px; line-height: 1.33333; }

.has-feedback { position: relative; }

.has-feedback .form-control { padding-right: 42.5px; }

.form-control-feedback { position: absolute; top: 0px; right: 0px; z-index:=
 2; display: block; width: 34px; height: 34px; line-height: 34px; text-alig=
n: center; pointer-events: none; }

.form-group-lg .form-control + .form-control-feedback, .input-group-lg + .f=
orm-control-feedback, .input-lg + .form-control-feedback { width: 46px; hei=
ght: 46px; line-height: 46px; }

.form-group-sm .form-control + .form-control-feedback, .input-group-sm + .f=
orm-control-feedback, .input-sm + .form-control-feedback { width: 30px; hei=
ght: 30px; line-height: 30px; }

.has-success .checkbox, .has-success .checkbox-inline, .has-success .contro=
l-label, .has-success .help-block, .has-success .radio, .has-success .radio=
-inline, .has-success.checkbox label, .has-success.checkbox-inline label, .=
has-success.radio label, .has-success.radio-inline label { color: rgb(60, 1=
18, 61); }

.has-success .form-control { border-color: rgb(60, 118, 61); box-shadow: rg=
ba(0, 0, 0, 0.075) 0px 1px 1px inset; }

.has-success .form-control:focus { border-color: rgb(43, 84, 44); box-shado=
w: rgba(0, 0, 0, 0.075) 0px 1px 1px inset, rgb(103, 177, 104) 0px 0px 6px; =
}

.has-success .input-group-addon { color: rgb(60, 118, 61); background-color=
: rgb(223, 240, 216); border-color: rgb(60, 118, 61); }

.has-success .form-control-feedback { color: rgb(60, 118, 61); }

.has-warning .checkbox, .has-warning .checkbox-inline, .has-warning .contro=
l-label, .has-warning .help-block, .has-warning .radio, .has-warning .radio=
-inline, .has-warning.checkbox label, .has-warning.checkbox-inline label, .=
has-warning.radio label, .has-warning.radio-inline label { color: rgb(138, =
109, 59); }

.has-warning .form-control { border-color: rgb(138, 109, 59); box-shadow: r=
gba(0, 0, 0, 0.075) 0px 1px 1px inset; }

.has-warning .form-control:focus { border-color: rgb(102, 81, 44); box-shad=
ow: rgba(0, 0, 0, 0.075) 0px 1px 1px inset, rgb(192, 161, 107) 0px 0px 6px;=
 }

.has-warning .input-group-addon { color: rgb(138, 109, 59); background-colo=
r: rgb(252, 248, 227); border-color: rgb(138, 109, 59); }

.has-warning .form-control-feedback { color: rgb(138, 109, 59); }

.has-error .checkbox, .has-error .checkbox-inline, .has-error .control-labe=
l, .has-error .help-block, .has-error .radio, .has-error .radio-inline, .ha=
s-error.checkbox label, .has-error.checkbox-inline label, .has-error.radio =
label, .has-error.radio-inline label { color: rgb(169, 68, 66); }

.has-error .form-control { border-color: rgb(169, 68, 66); box-shadow: rgba=
(0, 0, 0, 0.075) 0px 1px 1px inset; }

.has-error .form-control:focus { border-color: rgb(132, 53, 52); box-shadow=
: rgba(0, 0, 0, 0.075) 0px 1px 1px inset, rgb(206, 132, 131) 0px 0px 6px; }

.has-error .input-group-addon { color: rgb(169, 68, 66); background-color: =
rgb(242, 222, 222); border-color: rgb(169, 68, 66); }

.has-error .form-control-feedback { color: rgb(169, 68, 66); }

.has-feedback label ~ .form-control-feedback { top: 25px; }

.has-feedback label.sr-only ~ .form-control-feedback { top: 0px; }

.help-block { display: block; margin-top: 5px; margin-bottom: 10px; color: =
rgb(115, 115, 115); }

@media (min-width: 768px) {
  .form-inline .form-group { display: inline-block; margin-bottom: 0px; ver=
tical-align: middle; }
  .form-inline .form-control { display: inline-block; width: auto; vertical=
-align: middle; }
  .form-inline .form-control-static { display: inline-block; }
  .form-inline .input-group { display: inline-table; vertical-align: middle=
; }
  .form-inline .input-group .form-control, .form-inline .input-group .input=
-group-addon, .form-inline .input-group .input-group-btn { width: auto; }
  .form-inline .input-group > .form-control { width: 100%; }
  .form-inline .control-label { margin-bottom: 0px; vertical-align: middle;=
 }
  .form-inline .checkbox, .form-inline .radio { display: inline-block; marg=
in-top: 0px; margin-bottom: 0px; vertical-align: middle; }
  .form-inline .checkbox label, .form-inline .radio label { padding-left: 0=
px; }
  .form-inline .checkbox input[type=3D"checkbox"], .form-inline .radio inpu=
t[type=3D"radio"] { position: relative; margin-left: 0px; }
  .form-inline .has-feedback .form-control-feedback { top: 0px; }
}

.form-horizontal .checkbox, .form-horizontal .checkbox-inline, .form-horizo=
ntal .radio, .form-horizontal .radio-inline { padding-top: 7px; margin-top:=
 0px; margin-bottom: 0px; }

.form-horizontal .checkbox, .form-horizontal .radio { min-height: 27px; }

.form-horizontal .form-group { margin-right: -15px; margin-left: -15px; }

@media (min-width: 768px) {
  .form-horizontal .control-label { padding-top: 7px; margin-bottom: 0px; t=
ext-align: right; }
}

.form-horizontal .has-feedback .form-control-feedback { right: 15px; }

@media (min-width: 768px) {
  .form-horizontal .form-group-lg .control-label { padding-top: 14.33px; fo=
nt-size: 18px; }
}

@media (min-width: 768px) {
  .form-horizontal .form-group-sm .control-label { padding-top: 6px; font-s=
ize: 12px; }
}

.btn { display: inline-block; padding: 6px 12px; margin-bottom: 0px; font-s=
ize: 14px; font-weight: 400; line-height: 1.42857; text-align: center; whit=
e-space: nowrap; vertical-align: middle; touch-action: manipulation; cursor=
: pointer; user-select: none; background-image: none; border: 1px solid tra=
nsparent; border-radius: 4px; }

.btn.active.focus, .btn.active:focus, .btn.focus, .btn:active.focus, .btn:a=
ctive:focus, .btn:focus { outline: -webkit-focus-ring-color auto 5px; outli=
ne-offset: -2px; }

.btn.focus, .btn:focus, .btn:hover { color: rgb(51, 51, 51); text-decoratio=
n: none; }

.btn.active, .btn:active { background-image: none; outline: 0px; box-shadow=
: rgba(0, 0, 0, 0.125) 0px 3px 5px inset; }

.btn.disabled, .btn[disabled], fieldset[disabled] .btn { cursor: not-allowe=
d; box-shadow: none; opacity: 0.65; }

a.btn.disabled, fieldset[disabled] a.btn { pointer-events: none; }

.btn-default { color: rgb(51, 51, 51); background-color: rgb(255, 255, 255)=
; border-color: rgb(204, 204, 204); }

.btn-default.focus, .btn-default:focus { color: rgb(51, 51, 51); background=
-color: rgb(230, 230, 230); border-color: rgb(140, 140, 140); }

.btn-default:hover { color: rgb(51, 51, 51); background-color: rgb(230, 230=
, 230); border-color: rgb(173, 173, 173); }

.btn-default.active, .btn-default:active, .open > .dropdown-toggle.btn-defa=
ult { color: rgb(51, 51, 51); background-color: rgb(230, 230, 230); border-=
color: rgb(173, 173, 173); }

.btn-default.active.focus, .btn-default.active:focus, .btn-default.active:h=
over, .btn-default:active.focus, .btn-default:active:focus, .btn-default:ac=
tive:hover, .open > .dropdown-toggle.btn-default.focus, .open > .dropdown-t=
oggle.btn-default:focus, .open > .dropdown-toggle.btn-default:hover { color=
: rgb(51, 51, 51); background-color: rgb(212, 212, 212); border-color: rgb(=
140, 140, 140); }

.btn-default.active, .btn-default:active, .open > .dropdown-toggle.btn-defa=
ult { background-image: none; }

.btn-default.disabled, .btn-default.disabled.active, .btn-default.disabled.=
focus, .btn-default.disabled:active, .btn-default.disabled:focus, .btn-defa=
ult.disabled:hover, .btn-default[disabled], .btn-default[disabled].active, =
.btn-default[disabled].focus, .btn-default[disabled]:active, .btn-default[d=
isabled]:focus, .btn-default[disabled]:hover, fieldset[disabled] .btn-defau=
lt, fieldset[disabled] .btn-default.active, fieldset[disabled] .btn-default=
.focus, fieldset[disabled] .btn-default:active, fieldset[disabled] .btn-def=
ault:focus, fieldset[disabled] .btn-default:hover { background-color: rgb(2=
55, 255, 255); border-color: rgb(204, 204, 204); }

.btn-default .badge { color: rgb(255, 255, 255); background-color: rgb(51, =
51, 51); }

.btn-primary { color: rgb(255, 255, 255); background-color: rgb(51, 122, 18=
3); border-color: rgb(46, 109, 164); }

.btn-primary.focus, .btn-primary:focus { color: rgb(255, 255, 255); backgro=
und-color: rgb(40, 96, 144); border-color: rgb(18, 43, 64); }

.btn-primary:hover { color: rgb(255, 255, 255); background-color: rgb(40, 9=
6, 144); border-color: rgb(32, 77, 116); }

.btn-primary.active, .btn-primary:active, .open > .dropdown-toggle.btn-prim=
ary { color: rgb(255, 255, 255); background-color: rgb(40, 96, 144); border=
-color: rgb(32, 77, 116); }

.btn-primary.active.focus, .btn-primary.active:focus, .btn-primary.active:h=
over, .btn-primary:active.focus, .btn-primary:active:focus, .btn-primary:ac=
tive:hover, .open > .dropdown-toggle.btn-primary.focus, .open > .dropdown-t=
oggle.btn-primary:focus, .open > .dropdown-toggle.btn-primary:hover { color=
: rgb(255, 255, 255); background-color: rgb(32, 77, 116); border-color: rgb=
(18, 43, 64); }

.btn-primary.active, .btn-primary:active, .open > .dropdown-toggle.btn-prim=
ary { background-image: none; }

.btn-primary.disabled, .btn-primary.disabled.active, .btn-primary.disabled.=
focus, .btn-primary.disabled:active, .btn-primary.disabled:focus, .btn-prim=
ary.disabled:hover, .btn-primary[disabled], .btn-primary[disabled].active, =
.btn-primary[disabled].focus, .btn-primary[disabled]:active, .btn-primary[d=
isabled]:focus, .btn-primary[disabled]:hover, fieldset[disabled] .btn-prima=
ry, fieldset[disabled] .btn-primary.active, fieldset[disabled] .btn-primary=
.focus, fieldset[disabled] .btn-primary:active, fieldset[disabled] .btn-pri=
mary:focus, fieldset[disabled] .btn-primary:hover { background-color: rgb(5=
1, 122, 183); border-color: rgb(46, 109, 164); }

.btn-primary .badge { color: rgb(51, 122, 183); background-color: rgb(255, =
255, 255); }

.btn-success { color: rgb(255, 255, 255); background-color: rgb(92, 184, 92=
); border-color: rgb(76, 174, 76); }

.btn-success.focus, .btn-success:focus { color: rgb(255, 255, 255); backgro=
und-color: rgb(68, 157, 68); border-color: rgb(37, 86, 37); }

.btn-success:hover { color: rgb(255, 255, 255); background-color: rgb(68, 1=
57, 68); border-color: rgb(57, 132, 57); }

.btn-success.active, .btn-success:active, .open > .dropdown-toggle.btn-succ=
ess { color: rgb(255, 255, 255); background-color: rgb(68, 157, 68); border=
-color: rgb(57, 132, 57); }

.btn-success.active.focus, .btn-success.active:focus, .btn-success.active:h=
over, .btn-success:active.focus, .btn-success:active:focus, .btn-success:ac=
tive:hover, .open > .dropdown-toggle.btn-success.focus, .open > .dropdown-t=
oggle.btn-success:focus, .open > .dropdown-toggle.btn-success:hover { color=
: rgb(255, 255, 255); background-color: rgb(57, 132, 57); border-color: rgb=
(37, 86, 37); }

.btn-success.active, .btn-success:active, .open > .dropdown-toggle.btn-succ=
ess { background-image: none; }

.btn-success.disabled, .btn-success.disabled.active, .btn-success.disabled.=
focus, .btn-success.disabled:active, .btn-success.disabled:focus, .btn-succ=
ess.disabled:hover, .btn-success[disabled], .btn-success[disabled].active, =
.btn-success[disabled].focus, .btn-success[disabled]:active, .btn-success[d=
isabled]:focus, .btn-success[disabled]:hover, fieldset[disabled] .btn-succe=
ss, fieldset[disabled] .btn-success.active, fieldset[disabled] .btn-success=
.focus, fieldset[disabled] .btn-success:active, fieldset[disabled] .btn-suc=
cess:focus, fieldset[disabled] .btn-success:hover { background-color: rgb(9=
2, 184, 92); border-color: rgb(76, 174, 76); }

.btn-success .badge { color: rgb(92, 184, 92); background-color: rgb(255, 2=
55, 255); }

.btn-info { color: rgb(255, 255, 255); background-color: rgb(91, 192, 222);=
 border-color: rgb(70, 184, 218); }

.btn-info.focus, .btn-info:focus { color: rgb(255, 255, 255); background-co=
lor: rgb(49, 176, 213); border-color: rgb(27, 109, 133); }

.btn-info:hover { color: rgb(255, 255, 255); background-color: rgb(49, 176,=
 213); border-color: rgb(38, 154, 188); }

.btn-info.active, .btn-info:active, .open > .dropdown-toggle.btn-info { col=
or: rgb(255, 255, 255); background-color: rgb(49, 176, 213); border-color: =
rgb(38, 154, 188); }

.btn-info.active.focus, .btn-info.active:focus, .btn-info.active:hover, .bt=
n-info:active.focus, .btn-info:active:focus, .btn-info:active:hover, .open =
> .dropdown-toggle.btn-info.focus, .open > .dropdown-toggle.btn-info:focus,=
 .open > .dropdown-toggle.btn-info:hover { color: rgb(255, 255, 255); backg=
round-color: rgb(38, 154, 188); border-color: rgb(27, 109, 133); }

.btn-info.active, .btn-info:active, .open > .dropdown-toggle.btn-info { bac=
kground-image: none; }

.btn-info.disabled, .btn-info.disabled.active, .btn-info.disabled.focus, .b=
tn-info.disabled:active, .btn-info.disabled:focus, .btn-info.disabled:hover=
, .btn-info[disabled], .btn-info[disabled].active, .btn-info[disabled].focu=
s, .btn-info[disabled]:active, .btn-info[disabled]:focus, .btn-info[disable=
d]:hover, fieldset[disabled] .btn-info, fieldset[disabled] .btn-info.active=
, fieldset[disabled] .btn-info.focus, fieldset[disabled] .btn-info:active, =
fieldset[disabled] .btn-info:focus, fieldset[disabled] .btn-info:hover { ba=
ckground-color: rgb(91, 192, 222); border-color: rgb(70, 184, 218); }

.btn-info .badge { color: rgb(91, 192, 222); background-color: rgb(255, 255=
, 255); }

.btn-warning { color: rgb(255, 255, 255); background-color: rgb(240, 173, 7=
8); border-color: rgb(238, 162, 54); }

.btn-warning.focus, .btn-warning:focus { color: rgb(255, 255, 255); backgro=
und-color: rgb(236, 151, 31); border-color: rgb(152, 95, 13); }

.btn-warning:hover { color: rgb(255, 255, 255); background-color: rgb(236, =
151, 31); border-color: rgb(213, 133, 18); }

.btn-warning.active, .btn-warning:active, .open > .dropdown-toggle.btn-warn=
ing { color: rgb(255, 255, 255); background-color: rgb(236, 151, 31); borde=
r-color: rgb(213, 133, 18); }

.btn-warning.active.focus, .btn-warning.active:focus, .btn-warning.active:h=
over, .btn-warning:active.focus, .btn-warning:active:focus, .btn-warning:ac=
tive:hover, .open > .dropdown-toggle.btn-warning.focus, .open > .dropdown-t=
oggle.btn-warning:focus, .open > .dropdown-toggle.btn-warning:hover { color=
: rgb(255, 255, 255); background-color: rgb(213, 133, 18); border-color: rg=
b(152, 95, 13); }

.btn-warning.active, .btn-warning:active, .open > .dropdown-toggle.btn-warn=
ing { background-image: none; }

.btn-warning.disabled, .btn-warning.disabled.active, .btn-warning.disabled.=
focus, .btn-warning.disabled:active, .btn-warning.disabled:focus, .btn-warn=
ing.disabled:hover, .btn-warning[disabled], .btn-warning[disabled].active, =
.btn-warning[disabled].focus, .btn-warning[disabled]:active, .btn-warning[d=
isabled]:focus, .btn-warning[disabled]:hover, fieldset[disabled] .btn-warni=
ng, fieldset[disabled] .btn-warning.active, fieldset[disabled] .btn-warning=
.focus, fieldset[disabled] .btn-warning:active, fieldset[disabled] .btn-war=
ning:focus, fieldset[disabled] .btn-warning:hover { background-color: rgb(2=
40, 173, 78); border-color: rgb(238, 162, 54); }

.btn-warning .badge { color: rgb(240, 173, 78); background-color: rgb(255, =
255, 255); }

.btn-danger { color: rgb(255, 255, 255); background-color: rgb(217, 83, 79)=
; border-color: rgb(212, 63, 58); }

.btn-danger.focus, .btn-danger:focus { color: rgb(255, 255, 255); backgroun=
d-color: rgb(201, 48, 44); border-color: rgb(118, 28, 25); }

.btn-danger:hover { color: rgb(255, 255, 255); background-color: rgb(201, 4=
8, 44); border-color: rgb(172, 41, 37); }

.btn-danger.active, .btn-danger:active, .open > .dropdown-toggle.btn-danger=
 { color: rgb(255, 255, 255); background-color: rgb(201, 48, 44); border-co=
lor: rgb(172, 41, 37); }

.btn-danger.active.focus, .btn-danger.active:focus, .btn-danger.active:hove=
r, .btn-danger:active.focus, .btn-danger:active:focus, .btn-danger:active:h=
over, .open > .dropdown-toggle.btn-danger.focus, .open > .dropdown-toggle.b=
tn-danger:focus, .open > .dropdown-toggle.btn-danger:hover { color: rgb(255=
, 255, 255); background-color: rgb(172, 41, 37); border-color: rgb(118, 28,=
 25); }

.btn-danger.active, .btn-danger:active, .open > .dropdown-toggle.btn-danger=
 { background-image: none; }

.btn-danger.disabled, .btn-danger.disabled.active, .btn-danger.disabled.foc=
us, .btn-danger.disabled:active, .btn-danger.disabled:focus, .btn-danger.di=
sabled:hover, .btn-danger[disabled], .btn-danger[disabled].active, .btn-dan=
ger[disabled].focus, .btn-danger[disabled]:active, .btn-danger[disabled]:fo=
cus, .btn-danger[disabled]:hover, fieldset[disabled] .btn-danger, fieldset[=
disabled] .btn-danger.active, fieldset[disabled] .btn-danger.focus, fieldse=
t[disabled] .btn-danger:active, fieldset[disabled] .btn-danger:focus, field=
set[disabled] .btn-danger:hover { background-color: rgb(217, 83, 79); borde=
r-color: rgb(212, 63, 58); }

.btn-danger .badge { color: rgb(217, 83, 79); background-color: rgb(255, 25=
5, 255); }

.btn-link { font-weight: 400; color: rgb(51, 122, 183); border-radius: 0px;=
 }

.btn-link, .btn-link.active, .btn-link:active, .btn-link[disabled], fieldse=
t[disabled] .btn-link { background-color: transparent; box-shadow: none; }

.btn-link, .btn-link:active, .btn-link:focus, .btn-link:hover { border-colo=
r: transparent; }

.btn-link:focus, .btn-link:hover { color: rgb(35, 82, 124); text-decoration=
: underline; background-color: transparent; }

.btn-link[disabled]:focus, .btn-link[disabled]:hover, fieldset[disabled] .b=
tn-link:focus, fieldset[disabled] .btn-link:hover { color: rgb(119, 119, 11=
9); text-decoration: none; }

.btn-group-lg > .btn, .btn-lg { padding: 10px 16px; font-size: 18px; line-h=
eight: 1.33333; border-radius: 6px; }

.btn-group-sm > .btn, .btn-sm { padding: 5px 10px; font-size: 12px; line-he=
ight: 1.5; border-radius: 3px; }

.btn-group-xs > .btn, .btn-xs { padding: 1px 5px; font-size: 12px; line-hei=
ght: 1.5; border-radius: 3px; }

.btn-block { display: block; width: 100%; }

.btn-block + .btn-block { margin-top: 5px; }

input[type=3D"button"].btn-block, input[type=3D"reset"].btn-block, input[ty=
pe=3D"submit"].btn-block { width: 100%; }

.fade { opacity: 0; transition: opacity 0.15s linear 0s; }

.fade.in { opacity: 1; }

.collapse { display: none; }

.collapse.in { display: block; }

tr.collapse.in { display: table-row; }

tbody.collapse.in { display: table-row-group; }

.collapsing { position: relative; height: 0px; overflow: hidden; transition=
-timing-function: ease; transition-duration: 0.35s; transition-property: he=
ight, visibility; }

.caret { display: inline-block; width: 0px; height: 0px; margin-left: 2px; =
vertical-align: middle; border-top: 4px dashed; border-right: 4px solid tra=
nsparent; border-left: 4px solid transparent; }

.dropdown, .dropup { position: relative; }

.dropdown-toggle:focus { outline: 0px; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; d=
isplay: none; float: left; min-width: 160px; padding: 5px 0px; margin: 2px =
0px 0px; font-size: 14px; text-align: left; list-style: none; background-co=
lor: rgb(255, 255, 255); background-clip: padding-box; border: 1px solid rg=
ba(0, 0, 0, 0.15); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.176) 0px=
 6px 12px; }

.dropdown-menu.pull-right { right: 0px; left: auto; }

.dropdown-menu .divider { height: 1px; margin: 9px 0px; overflow: hidden; b=
ackground-color: rgb(229, 229, 229); }

.dropdown-menu > li > a { display: block; padding: 3px 20px; clear: both; f=
ont-weight: 400; line-height: 1.42857; color: rgb(51, 51, 51); white-space:=
 nowrap; }

.dropdown-menu > li > a:focus, .dropdown-menu > li > a:hover { color: rgb(3=
8, 38, 38); text-decoration: none; background-color: rgb(245, 245, 245); }

.dropdown-menu > .active > a, .dropdown-menu > .active > a:focus, .dropdown=
-menu > .active > a:hover { color: rgb(255, 255, 255); text-decoration: non=
e; background-color: rgb(51, 122, 183); outline: 0px; }

.dropdown-menu > .disabled > a, .dropdown-menu > .disabled > a:focus, .drop=
down-menu > .disabled > a:hover { color: rgb(119, 119, 119); }

.dropdown-menu > .disabled > a:focus, .dropdown-menu > .disabled > a:hover =
{ text-decoration: none; cursor: not-allowed; background-color: transparent=
; background-image: none; }

.open > .dropdown-menu { display: block; }

.open > a { outline: 0px; }

.dropdown-menu-right { right: 0px; left: auto; }

.dropdown-menu-left { right: auto; left: 0px; }

.dropdown-header { display: block; padding: 3px 20px; font-size: 12px; line=
-height: 1.42857; color: rgb(119, 119, 119); white-space: nowrap; }

.dropdown-backdrop { position: fixed; inset: 0px; z-index: 990; }

.pull-right > .dropdown-menu { right: 0px; left: auto; }

.dropup .caret, .navbar-fixed-bottom .dropdown .caret { content: ""; border=
-top: 0px; border-bottom: 4px dashed; }

.dropup .dropdown-menu, .navbar-fixed-bottom .dropdown .dropdown-menu { top=
: auto; bottom: 100%; margin-bottom: 2px; }

@media (min-width: 768px) {
  .navbar-right .dropdown-menu { right: 0px; left: auto; }
  .navbar-right .dropdown-menu-left { right: auto; left: 0px; }
}

.btn-group, .btn-group-vertical { position: relative; display: inline-block=
; vertical-align: middle; }

.btn-group-vertical > .btn, .btn-group > .btn { position: relative; float: =
left; }

.btn-group-vertical > .btn.active, .btn-group-vertical > .btn:active, .btn-=
group-vertical > .btn:focus, .btn-group-vertical > .btn:hover, .btn-group >=
 .btn.active, .btn-group > .btn:active, .btn-group > .btn:focus, .btn-group=
 > .btn:hover { z-index: 2; }

.btn-group .btn + .btn, .btn-group .btn + .btn-group, .btn-group .btn-group=
 + .btn, .btn-group .btn-group + .btn-group { margin-left: -1px; }

.btn-toolbar { margin-left: -5px; }

.btn-toolbar .btn, .btn-toolbar .btn-group, .btn-toolbar .input-group { flo=
at: left; }

.btn-toolbar > .btn, .btn-toolbar > .btn-group, .btn-toolbar > .input-group=
 { margin-left: 5px; }

.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) =
{ border-radius: 0px; }

.btn-group > .btn:first-child { margin-left: 0px; }

.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) { bord=
er-top-right-radius: 0px; border-bottom-right-radius: 0px; }

.btn-group > .btn:last-child:not(:first-child), .btn-group > .dropdown-togg=
le:not(:first-child) { border-top-left-radius: 0px; border-bottom-left-radi=
us: 0px; }

.btn-group > .btn-group { float: left; }

.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn { border-=
radius: 0px; }

.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child, .bt=
n-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle { bord=
er-top-right-radius: 0px; border-bottom-right-radius: 0px; }

.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child { b=
order-top-left-radius: 0px; border-bottom-left-radius: 0px; }

.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle { outl=
ine: 0px; }

.btn-group > .btn + .dropdown-toggle { padding-right: 8px; padding-left: 8p=
x; }

.btn-group > .btn-lg + .dropdown-toggle { padding-right: 12px; padding-left=
: 12px; }

.btn-group.open .dropdown-toggle { box-shadow: rgba(0, 0, 0, 0.125) 0px 3px=
 5px inset; }

.btn-group.open .dropdown-toggle.btn-link { box-shadow: none; }

.btn .caret { margin-left: 0px; }

.btn-lg .caret { border-width: 5px 5px 0px; }

.dropup .btn-lg .caret { border-width: 0px 5px 5px; }

.btn-group-vertical > .btn, .btn-group-vertical > .btn-group, .btn-group-ve=
rtical > .btn-group > .btn { display: block; float: none; width: 100%; max-=
width: 100%; }

.btn-group-vertical > .btn-group > .btn { float: none; }

.btn-group-vertical > .btn + .btn, .btn-group-vertical > .btn + .btn-group,=
 .btn-group-vertical > .btn-group + .btn, .btn-group-vertical > .btn-group =
+ .btn-group { margin-top: -1px; margin-left: 0px; }

.btn-group-vertical > .btn:not(:first-child):not(:last-child) { border-radi=
us: 0px; }

.btn-group-vertical > .btn:first-child:not(:last-child) { border-top-right-=
radius: 4px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0p=
x; }

.btn-group-vertical > .btn:last-child:not(:first-child) { border-top-left-r=
adius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 4px; }

.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn =
{ border-radius: 0px; }

.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-c=
hild, .btn-group-vertical > .btn-group:first-child:not(:last-child) > .drop=
down-toggle { border-bottom-right-radius: 0px; border-bottom-left-radius: 0=
px; }

.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-=
child { border-top-left-radius: 0px; border-top-right-radius: 0px; }

.btn-group-justified { display: table; width: 100%; table-layout: fixed; bo=
rder-collapse: separate; }

.btn-group-justified > .btn, .btn-group-justified > .btn-group { display: t=
able-cell; float: none; width: 1%; }

.btn-group-justified > .btn-group .btn { width: 100%; }

.btn-group-justified > .btn-group .dropdown-menu { left: auto; }

[data-toggle=3D"buttons"] > .btn input[type=3D"checkbox"], [data-toggle=3D"=
buttons"] > .btn input[type=3D"radio"], [data-toggle=3D"buttons"] > .btn-gr=
oup > .btn input[type=3D"checkbox"], [data-toggle=3D"buttons"] > .btn-group=
 > .btn input[type=3D"radio"] { position: absolute; clip: rect(0px, 0px, 0p=
x, 0px); pointer-events: none; }

.input-group { position: relative; display: table; border-collapse: separat=
e; }

.input-group[class*=3D"col-"] { float: none; padding-right: 0px; padding-le=
ft: 0px; }

.input-group .form-control { position: relative; z-index: 2; float: left; w=
idth: 100%; margin-bottom: 0px; }

.input-group-lg > .form-control, .input-group-lg > .input-group-addon, .inp=
ut-group-lg > .input-group-btn > .btn { height: 46px; padding: 10px 16px; f=
ont-size: 18px; line-height: 1.33333; border-radius: 6px; }

select.input-group-lg > .form-control, select.input-group-lg > .input-group=
-addon, select.input-group-lg > .input-group-btn > .btn { height: 46px; lin=
e-height: 46px; }

select[multiple].input-group-lg > .form-control, select[multiple].input-gro=
up-lg > .input-group-addon, select[multiple].input-group-lg > .input-group-=
btn > .btn, textarea.input-group-lg > .form-control, textarea.input-group-l=
g > .input-group-addon, textarea.input-group-lg > .input-group-btn > .btn {=
 height: auto; }

.input-group-sm > .form-control, .input-group-sm > .input-group-addon, .inp=
ut-group-sm > .input-group-btn > .btn { height: 30px; padding: 5px 10px; fo=
nt-size: 12px; line-height: 1.5; border-radius: 3px; }

select.input-group-sm > .form-control, select.input-group-sm > .input-group=
-addon, select.input-group-sm > .input-group-btn > .btn { height: 30px; lin=
e-height: 30px; }

select[multiple].input-group-sm > .form-control, select[multiple].input-gro=
up-sm > .input-group-addon, select[multiple].input-group-sm > .input-group-=
btn > .btn, textarea.input-group-sm > .form-control, textarea.input-group-s=
m > .input-group-addon, textarea.input-group-sm > .input-group-btn > .btn {=
 height: auto; }

.input-group .form-control, .input-group-addon, .input-group-btn { display:=
 table-cell; }

.input-group .form-control:not(:first-child):not(:last-child), .input-group=
-addon:not(:first-child):not(:last-child), .input-group-btn:not(:first-chil=
d):not(:last-child) { border-radius: 0px; }

.input-group-addon, .input-group-btn { width: 1%; white-space: nowrap; vert=
ical-align: middle; }

.input-group-addon { padding: 6px 12px; font-size: 14px; font-weight: 400; =
line-height: 1; color: rgb(85, 85, 85); text-align: center; background-colo=
r: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); border-radius:=
 4px; }

.input-group-addon.input-sm { padding: 5px 10px; font-size: 12px; border-ra=
dius: 3px; }

.input-group-addon.input-lg { padding: 10px 16px; font-size: 18px; border-r=
adius: 6px; }

.input-group-addon input[type=3D"checkbox"], .input-group-addon input[type=
=3D"radio"] { margin-top: 0px; }

.input-group .form-control:first-child, .input-group-addon:first-child, .in=
put-group-btn:first-child > .btn, .input-group-btn:first-child > .btn-group=
 > .btn, .input-group-btn:first-child > .dropdown-toggle, .input-group-btn:=
last-child > .btn-group:not(:last-child) > .btn, .input-group-btn:last-chil=
d > .btn:not(:last-child):not(.dropdown-toggle) { border-top-right-radius: =
0px; border-bottom-right-radius: 0px; }

.input-group-addon:first-child { border-right: 0px; }

.input-group .form-control:last-child, .input-group-addon:last-child, .inpu=
t-group-btn:first-child > .btn-group:not(:first-child) > .btn, .input-group=
-btn:first-child > .btn:not(:first-child), .input-group-btn:last-child > .b=
tn, .input-group-btn:last-child > .btn-group > .btn, .input-group-btn:last-=
child > .dropdown-toggle { border-top-left-radius: 0px; border-bottom-left-=
radius: 0px; }

.input-group-addon:last-child { border-left: 0px; }

.input-group-btn { position: relative; font-size: 0px; white-space: nowrap;=
 }

.input-group-btn > .btn { position: relative; }

.input-group-btn > .btn + .btn { margin-left: -1px; }

.input-group-btn > .btn:active, .input-group-btn > .btn:focus, .input-group=
-btn > .btn:hover { z-index: 2; }

.input-group-btn:first-child > .btn, .input-group-btn:first-child > .btn-gr=
oup { margin-right: -1px; }

.input-group-btn:last-child > .btn, .input-group-btn:last-child > .btn-grou=
p { z-index: 2; margin-left: -1px; }

.nav { padding-left: 0px; margin-bottom: 0px; list-style: none; }

.nav > li { position: relative; display: block; }

.nav > li > a { position: relative; display: block; padding: 10px 15px; }

.nav > li > a:focus, .nav > li > a:hover { text-decoration: none; backgroun=
d-color: rgb(238, 238, 238); }

.nav > li.disabled > a { color: rgb(119, 119, 119); }

.nav > li.disabled > a:focus, .nav > li.disabled > a:hover { color: rgb(119=
, 119, 119); text-decoration: none; cursor: not-allowed; background-color: =
transparent; }

.nav .open > a, .nav .open > a:focus, .nav .open > a:hover { background-col=
or: rgb(238, 238, 238); border-color: rgb(51, 122, 183); }

.nav .nav-divider { height: 1px; margin: 9px 0px; overflow: hidden; backgro=
und-color: rgb(229, 229, 229); }

.nav > li > a > img { max-width: none; }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs > li { float: left; margin-bottom: -1px; }

.nav-tabs > li > a { margin-right: 2px; line-height: 1.42857; border: 1px s=
olid transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 2=
38) rgb(221, 221, 221); }

.nav-tabs > li.active > a, .nav-tabs > li.active > a:focus, .nav-tabs > li.=
active > a:hover { color: rgb(85, 85, 85); cursor: default; background-colo=
r: rgb(255, 255, 255); border-width: 1px; border-style: solid; border-color=
: rgb(221, 221, 221) rgb(221, 221, 221) transparent; border-image: initial;=
 }

.nav-tabs.nav-justified { width: 100%; border-bottom: 0px; }

.nav-tabs.nav-justified > li { float: none; }

.nav-tabs.nav-justified > li > a { margin-bottom: 5px; text-align: center; =
}

.nav-tabs.nav-justified > .dropdown .dropdown-menu { top: auto; left: auto;=
 }

@media (min-width: 768px) {
  .nav-tabs.nav-justified > li { display: table-cell; width: 1%; }
  .nav-tabs.nav-justified > li > a { margin-bottom: 0px; }
}

.nav-tabs.nav-justified > li > a { margin-right: 0px; border-radius: 4px; }

.nav-tabs.nav-justified > .active > a, .nav-tabs.nav-justified > .active > =
a:focus, .nav-tabs.nav-justified > .active > a:hover { border: 1px solid rg=
b(221, 221, 221); }

@media (min-width: 768px) {
  .nav-tabs.nav-justified > li > a { border-bottom: 1px solid rgb(221, 221,=
 221); border-radius: 4px 4px 0px 0px; }
  .nav-tabs.nav-justified > .active > a, .nav-tabs.nav-justified > .active =
> a:focus, .nav-tabs.nav-justified > .active > a:hover { border-bottom-colo=
r: rgb(255, 255, 255); }
}

.nav-pills > li { float: left; }

.nav-pills > li > a { border-radius: 4px; }

.nav-pills > li + li { margin-left: 2px; }

.nav-pills > li.active > a, .nav-pills > li.active > a:focus, .nav-pills > =
li.active > a:hover { color: rgb(255, 255, 255); background-color: rgb(51, =
122, 183); }

.nav-stacked > li { float: none; }

.nav-stacked > li + li { margin-top: 2px; margin-left: 0px; }

.nav-justified { width: 100%; }

.nav-justified > li { float: none; }

.nav-justified > li > a { margin-bottom: 5px; text-align: center; }

.nav-justified > .dropdown .dropdown-menu { top: auto; left: auto; }

@media (min-width: 768px) {
  .nav-justified > li { display: table-cell; width: 1%; }
  .nav-justified > li > a { margin-bottom: 0px; }
}

.nav-tabs-justified { border-bottom: 0px; }

.nav-tabs-justified > li > a { margin-right: 0px; border-radius: 4px; }

.nav-tabs-justified > .active > a, .nav-tabs-justified > .active > a:focus,=
 .nav-tabs-justified > .active > a:hover { border: 1px solid rgb(221, 221, =
221); }

@media (min-width: 768px) {
  .nav-tabs-justified > li > a { border-bottom: 1px solid rgb(221, 221, 221=
); border-radius: 4px 4px 0px 0px; }
  .nav-tabs-justified > .active > a, .nav-tabs-justified > .active > a:focu=
s, .nav-tabs-justified > .active > a:hover { border-bottom-color: rgb(255, =
255, 255); }
}

.tab-content > .tab-pane { display: none; }

.tab-content > .active { display: block; }

.nav-tabs .dropdown-menu { margin-top: -1px; border-top-left-radius: 0px; b=
order-top-right-radius: 0px; }

.navbar { position: relative; min-height: 50px; margin-bottom: 20px; border=
: 1px solid transparent; }

@media (min-width: 768px) {
  .navbar { border-radius: 4px; }
}

@media (min-width: 768px) {
  .navbar-header { float: left; }
}

.navbar-collapse { padding-right: 15px; padding-left: 15px; overflow-x: vis=
ible; border-top: 1px solid transparent; box-shadow: rgba(255, 255, 255, 0.=
1) 0px 1px 0px inset; }

.navbar-collapse.in { overflow-y: auto; }

@media (min-width: 768px) {
  .navbar-collapse { width: auto; border-top: 0px; box-shadow: none; }
  .navbar-collapse.collapse { padding-bottom: 0px; display: block !importan=
t; height: auto !important; overflow: visible !important; }
  .navbar-collapse.in { overflow-y: visible; }
  .navbar-fixed-bottom .navbar-collapse, .navbar-fixed-top .navbar-collapse=
, .navbar-static-top .navbar-collapse { padding-right: 0px; padding-left: 0=
px; }
}

.navbar-fixed-bottom .navbar-collapse, .navbar-fixed-top .navbar-collapse {=
 max-height: 340px; }

@media (max-device-width: 480px) and (orientation: landscape) {
  .navbar-fixed-bottom .navbar-collapse, .navbar-fixed-top .navbar-collapse=
 { max-height: 200px; }
}

.container-fluid > .navbar-collapse, .container-fluid > .navbar-header, .co=
ntainer > .navbar-collapse, .container > .navbar-header { margin-right: -15=
px; margin-left: -15px; }

@media (min-width: 768px) {
  .container-fluid > .navbar-collapse, .container-fluid > .navbar-header, .=
container > .navbar-collapse, .container > .navbar-header { margin-right: 0=
px; margin-left: 0px; }
}

.navbar-static-top { z-index: 1000; border-width: 0px 0px 1px; }

@media (min-width: 768px) {
  .navbar-static-top { border-radius: 0px; }
}

.navbar-fixed-bottom, .navbar-fixed-top { position: fixed; right: 0px; left=
: 0px; z-index: 1030; }

@media (min-width: 768px) {
  .navbar-fixed-bottom, .navbar-fixed-top { border-radius: 0px; }
}

.navbar-fixed-top { top: 0px; border-width: 0px 0px 1px; }

.navbar-fixed-bottom { bottom: 0px; margin-bottom: 0px; border-width: 1px 0=
px 0px; }

.navbar-brand { float: left; height: 50px; padding: 15px; font-size: 18px; =
line-height: 20px; }

.navbar-brand:focus, .navbar-brand:hover { text-decoration: none; }

.navbar-brand > img { display: block; }

@media (min-width: 768px) {
  .navbar > .container .navbar-brand, .navbar > .container-fluid .navbar-br=
and { margin-left: -15px; }
}

.navbar-toggle { position: relative; float: right; padding: 9px 10px; margi=
n-top: 8px; margin-right: 15px; margin-bottom: 8px; background-color: trans=
parent; background-image: none; border: 1px solid transparent; border-radiu=
s: 4px; }

.navbar-toggle:focus { outline: 0px; }

.navbar-toggle .icon-bar { display: block; width: 22px; height: 2px; border=
-radius: 1px; }

.navbar-toggle .icon-bar + .icon-bar { margin-top: 4px; }

@media (min-width: 768px) {
  .navbar-toggle { display: none; }
}

.navbar-nav { margin: 7.5px -15px; }

.navbar-nav > li > a { padding-top: 10px; padding-bottom: 10px; line-height=
: 20px; }

@media (max-width: 767px) {
  .navbar-nav .open .dropdown-menu { position: static; float: none; width: =
auto; margin-top: 0px; background-color: transparent; border: 0px; box-shad=
ow: none; }
  .navbar-nav .open .dropdown-menu .dropdown-header, .navbar-nav .open .dro=
pdown-menu > li > a { padding: 5px 15px 5px 25px; }
  .navbar-nav .open .dropdown-menu > li > a { line-height: 20px; }
  .navbar-nav .open .dropdown-menu > li > a:focus, .navbar-nav .open .dropd=
own-menu > li > a:hover { background-image: none; }
}

@media (min-width: 768px) {
  .navbar-nav { float: left; margin: 0px; }
  .navbar-nav > li { float: left; }
  .navbar-nav > li > a { padding-top: 15px; padding-bottom: 15px; }
}

.navbar-form { padding: 10px 15px; margin: 8px -15px; border-top: 1px solid=
 transparent; border-bottom: 1px solid transparent; box-shadow: rgba(255, 2=
55, 255, 0.1) 0px 1px 0px inset, rgba(255, 255, 255, 0.1) 0px 1px 0px; }

@media (min-width: 768px) {
  .navbar-form .form-group { display: inline-block; margin-bottom: 0px; ver=
tical-align: middle; }
  .navbar-form .form-control { display: inline-block; width: auto; vertical=
-align: middle; }
  .navbar-form .form-control-static { display: inline-block; }
  .navbar-form .input-group { display: inline-table; vertical-align: middle=
; }
  .navbar-form .input-group .form-control, .navbar-form .input-group .input=
-group-addon, .navbar-form .input-group .input-group-btn { width: auto; }
  .navbar-form .input-group > .form-control { width: 100%; }
  .navbar-form .control-label { margin-bottom: 0px; vertical-align: middle;=
 }
  .navbar-form .checkbox, .navbar-form .radio { display: inline-block; marg=
in-top: 0px; margin-bottom: 0px; vertical-align: middle; }
  .navbar-form .checkbox label, .navbar-form .radio label { padding-left: 0=
px; }
  .navbar-form .checkbox input[type=3D"checkbox"], .navbar-form .radio inpu=
t[type=3D"radio"] { position: relative; margin-left: 0px; }
  .navbar-form .has-feedback .form-control-feedback { top: 0px; }
}

@media (max-width: 767px) {
  .navbar-form .form-group { margin-bottom: 5px; }
  .navbar-form .form-group:last-child { margin-bottom: 0px; }
}

@media (min-width: 768px) {
  .navbar-form { width: auto; padding-top: 0px; padding-bottom: 0px; margin=
-right: 0px; margin-left: 0px; border: 0px; box-shadow: none; }
}

.navbar-nav > li > .dropdown-menu { margin-top: 0px; border-top-left-radius=
: 0px; border-top-right-radius: 0px; }

.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu { margin-bottom: 0px=
; border-radius: 4px 4px 0px 0px; }

.navbar-btn { margin-top: 8px; margin-bottom: 8px; }

.navbar-btn.btn-sm { margin-top: 10px; margin-bottom: 10px; }

.navbar-btn.btn-xs { margin-top: 14px; margin-bottom: 14px; }

.navbar-text { margin-top: 15px; margin-bottom: 15px; }

@media (min-width: 768px) {
  .navbar-text { float: left; margin-right: 15px; margin-left: 15px; }
}

@media (min-width: 768px) {
  .navbar-left { float: left !important; }
  .navbar-right { margin-right: -15px; float: right !important; }
  .navbar-right ~ .navbar-right { margin-right: 0px; }
}

.navbar-default { background-color: rgb(248, 248, 248); border-color: rgb(2=
31, 231, 231); }

.navbar-default .navbar-brand { color: rgb(119, 119, 119); }

.navbar-default .navbar-brand:focus, .navbar-default .navbar-brand:hover { =
color: rgb(94, 94, 94); background-color: transparent; }

.navbar-default .navbar-text { color: rgb(119, 119, 119); }

.navbar-default .navbar-nav > li > a { color: rgb(119, 119, 119); }

.navbar-default .navbar-nav > li > a:focus, .navbar-default .navbar-nav > l=
i > a:hover { color: rgb(51, 51, 51); background-color: transparent; }

.navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .a=
ctive > a:focus, .navbar-default .navbar-nav > .active > a:hover { color: r=
gb(85, 85, 85); background-color: rgb(231, 231, 231); }

.navbar-default .navbar-nav > .disabled > a, .navbar-default .navbar-nav > =
.disabled > a:focus, .navbar-default .navbar-nav > .disabled > a:hover { co=
lor: rgb(204, 204, 204); background-color: transparent; }

.navbar-default .navbar-toggle { border-color: rgb(221, 221, 221); }

.navbar-default .navbar-toggle:focus, .navbar-default .navbar-toggle:hover =
{ background-color: rgb(221, 221, 221); }

.navbar-default .navbar-toggle .icon-bar { background-color: rgb(136, 136, =
136); }

.navbar-default .navbar-collapse, .navbar-default .navbar-form { border-col=
or: rgb(231, 231, 231); }

.navbar-default .navbar-nav > .open > a, .navbar-default .navbar-nav > .ope=
n > a:focus, .navbar-default .navbar-nav > .open > a:hover { color: rgb(85,=
 85, 85); background-color: rgb(231, 231, 231); }

@media (max-width: 767px) {
  .navbar-default .navbar-nav .open .dropdown-menu > li > a { color: rgb(11=
9, 119, 119); }
  .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus, .navbar-=
default .navbar-nav .open .dropdown-menu > li > a:hover { color: rgb(51, 51=
, 51); background-color: transparent; }
  .navbar-default .navbar-nav .open .dropdown-menu > .active > a, .navbar-d=
efault .navbar-nav .open .dropdown-menu > .active > a:focus, .navbar-defaul=
t .navbar-nav .open .dropdown-menu > .active > a:hover { color: rgb(85, 85,=
 85); background-color: rgb(231, 231, 231); }
  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a, .navbar=
-default .navbar-nav .open .dropdown-menu > .disabled > a:focus, .navbar-de=
fault .navbar-nav .open .dropdown-menu > .disabled > a:hover { color: rgb(2=
04, 204, 204); background-color: transparent; }
}

.navbar-default .navbar-link { color: rgb(119, 119, 119); }

.navbar-default .navbar-link:hover { color: rgb(51, 51, 51); }

.navbar-default .btn-link { color: rgb(119, 119, 119); }

.navbar-default .btn-link:focus, .navbar-default .btn-link:hover { color: r=
gb(51, 51, 51); }

.navbar-default .btn-link[disabled]:focus, .navbar-default .btn-link[disabl=
ed]:hover, fieldset[disabled] .navbar-default .btn-link:focus, fieldset[dis=
abled] .navbar-default .btn-link:hover { color: rgb(204, 204, 204); }

.navbar-inverse { background-color: rgb(34, 34, 34); border-color: rgb(8, 8=
, 8); }

.navbar-inverse .navbar-brand { color: rgb(157, 157, 157); }

.navbar-inverse .navbar-brand:focus, .navbar-inverse .navbar-brand:hover { =
color: rgb(255, 255, 255); background-color: transparent; }

.navbar-inverse .navbar-text { color: rgb(157, 157, 157); }

.navbar-inverse .navbar-nav > li > a { color: rgb(157, 157, 157); }

.navbar-inverse .navbar-nav > li > a:focus, .navbar-inverse .navbar-nav > l=
i > a:hover { color: rgb(255, 255, 255); background-color: transparent; }

.navbar-inverse .navbar-nav > .active > a, .navbar-inverse .navbar-nav > .a=
ctive > a:focus, .navbar-inverse .navbar-nav > .active > a:hover { color: r=
gb(255, 255, 255); background-color: rgb(8, 8, 8); }

.navbar-inverse .navbar-nav > .disabled > a, .navbar-inverse .navbar-nav > =
.disabled > a:focus, .navbar-inverse .navbar-nav > .disabled > a:hover { co=
lor: rgb(68, 68, 68); background-color: transparent; }

.navbar-inverse .navbar-toggle { border-color: rgb(51, 51, 51); }

.navbar-inverse .navbar-toggle:focus, .navbar-inverse .navbar-toggle:hover =
{ background-color: rgb(51, 51, 51); }

.navbar-inverse .navbar-toggle .icon-bar { background-color: rgb(255, 255, =
255); }

.navbar-inverse .navbar-collapse, .navbar-inverse .navbar-form { border-col=
or: rgb(16, 16, 16); }

.navbar-inverse .navbar-nav > .open > a, .navbar-inverse .navbar-nav > .ope=
n > a:focus, .navbar-inverse .navbar-nav > .open > a:hover { color: rgb(255=
, 255, 255); background-color: rgb(8, 8, 8); }

@media (max-width: 767px) {
  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header { bor=
der-color: rgb(8, 8, 8); }
  .navbar-inverse .navbar-nav .open .dropdown-menu .divider { background-co=
lor: rgb(8, 8, 8); }
  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a { color: rgb(15=
7, 157, 157); }
  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus, .navbar-=
inverse .navbar-nav .open .dropdown-menu > li > a:hover { color: rgb(255, 2=
55, 255); background-color: transparent; }
  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a, .navbar-i=
nverse .navbar-nav .open .dropdown-menu > .active > a:focus, .navbar-invers=
e .navbar-nav .open .dropdown-menu > .active > a:hover { color: rgb(255, 25=
5, 255); background-color: rgb(8, 8, 8); }
  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a, .navbar=
-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus, .navbar-in=
verse .navbar-nav .open .dropdown-menu > .disabled > a:hover { color: rgb(6=
8, 68, 68); background-color: transparent; }
}

.navbar-inverse .navbar-link { color: rgb(157, 157, 157); }

.navbar-inverse .navbar-link:hover { color: rgb(255, 255, 255); }

.navbar-inverse .btn-link { color: rgb(157, 157, 157); }

.navbar-inverse .btn-link:focus, .navbar-inverse .btn-link:hover { color: r=
gb(255, 255, 255); }

.navbar-inverse .btn-link[disabled]:focus, .navbar-inverse .btn-link[disabl=
ed]:hover, fieldset[disabled] .navbar-inverse .btn-link:focus, fieldset[dis=
abled] .navbar-inverse .btn-link:hover { color: rgb(68, 68, 68); }

.breadcrumb { padding: 8px 15px; margin-bottom: 20px; list-style: none; bac=
kground-color: rgb(245, 245, 245); border-radius: 4px; }

.breadcrumb > li { display: inline-block; }

.breadcrumb > li + li::before { padding: 0px 5px; color: rgb(204, 204, 204)=
; content: "/=A0"; }

.breadcrumb > .active { color: rgb(119, 119, 119); }

.pagination { display: inline-block; padding-left: 0px; margin: 20px 0px; b=
order-radius: 4px; }

.pagination > li { display: inline; }

.pagination > li > a, .pagination > li > span { position: relative; float: =
left; padding: 6px 12px; margin-left: -1px; line-height: 1.42857; color: rg=
b(51, 122, 183); text-decoration: none; background-color: rgb(255, 255, 255=
); border: 1px solid rgb(221, 221, 221); }

.pagination > li:first-child > a, .pagination > li:first-child > span { mar=
gin-left: 0px; border-top-left-radius: 4px; border-bottom-left-radius: 4px;=
 }

.pagination > li:last-child > a, .pagination > li:last-child > span { borde=
r-top-right-radius: 4px; border-bottom-right-radius: 4px; }

.pagination > li > a:focus, .pagination > li > a:hover, .pagination > li > =
span:focus, .pagination > li > span:hover { z-index: 3; color: rgb(35, 82, =
124); background-color: rgb(238, 238, 238); border-color: rgb(221, 221, 221=
); }

.pagination > .active > a, .pagination > .active > a:focus, .pagination > .=
active > a:hover, .pagination > .active > span, .pagination > .active > spa=
n:focus, .pagination > .active > span:hover { z-index: 2; color: rgb(255, 2=
55, 255); cursor: default; background-color: rgb(51, 122, 183); border-colo=
r: rgb(51, 122, 183); }

.pagination > .disabled > a, .pagination > .disabled > a:focus, .pagination=
 > .disabled > a:hover, .pagination > .disabled > span, .pagination > .disa=
bled > span:focus, .pagination > .disabled > span:hover { color: rgb(119, 1=
19, 119); cursor: not-allowed; background-color: rgb(255, 255, 255); border=
-color: rgb(221, 221, 221); }

.pagination-lg > li > a, .pagination-lg > li > span { padding: 10px 16px; f=
ont-size: 18px; line-height: 1.33333; }

.pagination-lg > li:first-child > a, .pagination-lg > li:first-child > span=
 { border-top-left-radius: 6px; border-bottom-left-radius: 6px; }

.pagination-lg > li:last-child > a, .pagination-lg > li:last-child > span {=
 border-top-right-radius: 6px; border-bottom-right-radius: 6px; }

.pagination-sm > li > a, .pagination-sm > li > span { padding: 5px 10px; fo=
nt-size: 12px; line-height: 1.5; }

.pagination-sm > li:first-child > a, .pagination-sm > li:first-child > span=
 { border-top-left-radius: 3px; border-bottom-left-radius: 3px; }

.pagination-sm > li:last-child > a, .pagination-sm > li:last-child > span {=
 border-top-right-radius: 3px; border-bottom-right-radius: 3px; }

.pager { padding-left: 0px; margin: 20px 0px; text-align: center; list-styl=
e: none; }

.pager li { display: inline; }

.pager li > a, .pager li > span { display: inline-block; padding: 5px 14px;=
 background-color: rgb(255, 255, 255); border: 1px solid rgb(221, 221, 221)=
; border-radius: 15px; }

.pager li > a:focus, .pager li > a:hover { text-decoration: none; backgroun=
d-color: rgb(238, 238, 238); }

.pager .next > a, .pager .next > span { float: right; }

.pager .previous > a, .pager .previous > span { float: left; }

.pager .disabled > a, .pager .disabled > a:focus, .pager .disabled > a:hove=
r, .pager .disabled > span { color: rgb(119, 119, 119); cursor: not-allowed=
; background-color: rgb(255, 255, 255); }

.label { display: inline; padding: 0.2em 0.6em 0.3em; font-size: 75%; font-=
weight: 700; line-height: 1; color: rgb(255, 255, 255); text-align: center;=
 white-space: nowrap; vertical-align: baseline; border-radius: 0.25em; }

a.label:focus, a.label:hover { color: rgb(255, 255, 255); text-decoration: =
none; cursor: pointer; }

.label:empty { display: none; }

.btn .label { position: relative; top: -1px; }

.label-default { background-color: rgb(119, 119, 119); }

.label-default[href]:focus, .label-default[href]:hover { background-color: =
rgb(94, 94, 94); }

.label-primary { background-color: rgb(51, 122, 183); }

.label-primary[href]:focus, .label-primary[href]:hover { background-color: =
rgb(40, 96, 144); }

.label-success { background-color: rgb(92, 184, 92); }

.label-success[href]:focus, .label-success[href]:hover { background-color: =
rgb(68, 157, 68); }

.label-info { background-color: rgb(91, 192, 222); }

.label-info[href]:focus, .label-info[href]:hover { background-color: rgb(49=
, 176, 213); }

.label-warning { background-color: rgb(240, 173, 78); }

.label-warning[href]:focus, .label-warning[href]:hover { background-color: =
rgb(236, 151, 31); }

.label-danger { background-color: rgb(217, 83, 79); }

.label-danger[href]:focus, .label-danger[href]:hover { background-color: rg=
b(201, 48, 44); }

.badge { display: inline-block; min-width: 10px; padding: 3px 7px; font-siz=
e: 12px; font-weight: 700; line-height: 1; color: rgb(255, 255, 255); text-=
align: center; white-space: nowrap; vertical-align: middle; background-colo=
r: rgb(119, 119, 119); border-radius: 10px; }

.badge:empty { display: none; }

.btn .badge { position: relative; top: -1px; }

.btn-group-xs > .btn .badge, .btn-xs .badge { top: 0px; padding: 1px 5px; }

a.badge:focus, a.badge:hover { color: rgb(255, 255, 255); text-decoration: =
none; cursor: pointer; }

.list-group-item.active > .badge, .nav-pills > .active > a > .badge { color=
: rgb(51, 122, 183); background-color: rgb(255, 255, 255); }

.list-group-item > .badge { float: right; }

.list-group-item > .badge + .badge { margin-right: 5px; }

.nav-pills > li > a > .badge { margin-left: 3px; }

.jumbotron { padding-top: 30px; padding-bottom: 30px; margin-bottom: 30px; =
color: inherit; background-color: rgb(238, 238, 238); }

.jumbotron .h1, .jumbotron h1 { color: inherit; }

.jumbotron p { margin-bottom: 15px; font-size: 21px; font-weight: 200; }

.jumbotron > hr { border-top-color: rgb(213, 213, 213); }

.container .jumbotron, .container-fluid .jumbotron { border-radius: 6px; }

.jumbotron .container { max-width: 100%; }

@media screen and (min-width: 768px) {
  .jumbotron { padding-top: 48px; padding-bottom: 48px; }
  .container .jumbotron, .container-fluid .jumbotron { padding-right: 60px;=
 padding-left: 60px; }
  .jumbotron .h1, .jumbotron h1 { font-size: 63px; }
}

.thumbnail { display: block; padding: 4px; margin-bottom: 20px; line-height=
: 1.42857; background-color: rgb(255, 255, 255); border: 1px solid rgb(221,=
 221, 221); border-radius: 4px; transition: border 0.2s ease-in-out 0s; }

.thumbnail a > img, .thumbnail > img { margin-right: auto; margin-left: aut=
o; }

a.thumbnail.active, a.thumbnail:focus, a.thumbnail:hover { border-color: rg=
b(51, 122, 183); }

.thumbnail .caption { padding: 9px; color: rgb(51, 51, 51); }

.alert { padding: 15px; margin-bottom: 20px; border: 1px solid transparent;=
 border-radius: 4px; }

.alert h4 { margin-top: 0px; color: inherit; }

.alert .alert-link { font-weight: 700; }

.alert > p, .alert > ul { margin-bottom: 0px; }

.alert > p + p { margin-top: 5px; }

.alert-dismissable, .alert-dismissible { padding-right: 35px; }

.alert-dismissable .close, .alert-dismissible .close { position: relative; =
top: -2px; right: -21px; color: inherit; }

.alert-success { color: rgb(60, 118, 61); background-color: rgb(223, 240, 2=
16); border-color: rgb(214, 233, 198); }

.alert-success hr { border-top-color: rgb(201, 226, 179); }

.alert-success .alert-link { color: rgb(43, 84, 44); }

.alert-info { color: rgb(49, 112, 143); background-color: rgb(217, 237, 247=
); border-color: rgb(188, 232, 241); }

.alert-info hr { border-top-color: rgb(166, 225, 236); }

.alert-info .alert-link { color: rgb(36, 82, 105); }

.alert-warning { color: rgb(138, 109, 59); background-color: rgb(252, 248, =
227); border-color: rgb(250, 235, 204); }

.alert-warning hr { border-top-color: rgb(247, 225, 181); }

.alert-warning .alert-link { color: rgb(102, 81, 44); }

.alert-danger { color: rgb(169, 68, 66); background-color: rgb(242, 222, 22=
2); border-color: rgb(235, 204, 209); }

.alert-danger hr { border-top-color: rgb(228, 185, 192); }

.alert-danger .alert-link { color: rgb(132, 53, 52); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 40px 0px; }
  100% { background-position: 0px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 40px 0px; }
  100% { background-position: 0px 0px; }
}

.progress { height: 20px; margin-bottom: 20px; overflow: hidden; background=
-color: rgb(245, 245, 245); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0=
.1) 0px 1px 2px inset; }

.progress-bar { float: left; width: 0px; height: 100%; font-size: 12px; lin=
e-height: 20px; color: rgb(255, 255, 255); text-align: center; background-c=
olor: rgb(51, 122, 183); box-shadow: rgba(0, 0, 0, 0.15) 0px -1px 0px inset=
; transition: width 0.6s ease 0s; }

.progress-bar-striped, .progress-striped .progress-bar { background-image: =
linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, tran=
sparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, =
transparent 75%, transparent); background-size: 40px 40px; }

.progress-bar.active, .progress.active .progress-bar { animation: 2s linear=
 0s infinite normal none running progress-bar-stripes; }

.progress-bar-success { background-color: rgb(92, 184, 92); }

.progress-striped .progress-bar-success { background-image: linear-gradient=
(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rg=
ba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%=
, transparent); }

.progress-bar-info { background-color: rgb(91, 192, 222); }

.progress-striped .progress-bar-info { background-image: linear-gradient(45=
deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(=
255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, t=
ransparent); }

.progress-bar-warning { background-color: rgb(240, 173, 78); }

.progress-striped .progress-bar-warning { background-image: linear-gradient=
(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rg=
ba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%=
, transparent); }

.progress-bar-danger { background-color: rgb(217, 83, 79); }

.progress-striped .progress-bar-danger { background-image: linear-gradient(=
45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgb=
a(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%,=
 transparent); }

.media { margin-top: 15px; }

.media:first-child { margin-top: 0px; }

.media, .media-body { overflow: hidden; zoom: 1; }

.media-body { width: 10000px; }

.media-object { display: block; }

.media-object.img-thumbnail { max-width: none; }

.media-right, .media > .pull-right { padding-left: 10px; }

.media-left, .media > .pull-left { padding-right: 10px; }

.media-body, .media-left, .media-right { display: table-cell; vertical-alig=
n: top; }

.media-middle { vertical-align: middle; }

.media-bottom { vertical-align: bottom; }

.media-heading { margin-top: 0px; margin-bottom: 5px; }

.media-list { padding-left: 0px; list-style: none; }

.list-group { padding-left: 0px; margin-bottom: 20px; }

.list-group-item { position: relative; display: block; padding: 10px 15px; =
margin-bottom: -1px; background-color: rgb(255, 255, 255); border: 1px soli=
d rgb(221, 221, 221); }

.list-group-item:first-child { border-top-left-radius: 4px; border-top-righ=
t-radius: 4px; }

.list-group-item:last-child { margin-bottom: 0px; border-bottom-right-radiu=
s: 4px; border-bottom-left-radius: 4px; }

a.list-group-item, button.list-group-item { color: rgb(85, 85, 85); }

a.list-group-item .list-group-item-heading, button.list-group-item .list-gr=
oup-item-heading { color: rgb(51, 51, 51); }

a.list-group-item:focus, a.list-group-item:hover, button.list-group-item:fo=
cus, button.list-group-item:hover { color: rgb(85, 85, 85); text-decoration=
: none; background-color: rgb(245, 245, 245); }

button.list-group-item { width: 100%; text-align: left; }

.list-group-item.disabled, .list-group-item.disabled:focus, .list-group-ite=
m.disabled:hover { color: rgb(119, 119, 119); cursor: not-allowed; backgrou=
nd-color: rgb(238, 238, 238); }

.list-group-item.disabled .list-group-item-heading, .list-group-item.disabl=
ed:focus .list-group-item-heading, .list-group-item.disabled:hover .list-gr=
oup-item-heading { color: inherit; }

.list-group-item.disabled .list-group-item-text, .list-group-item.disabled:=
focus .list-group-item-text, .list-group-item.disabled:hover .list-group-it=
em-text { color: rgb(119, 119, 119); }

.list-group-item.active, .list-group-item.active:focus, .list-group-item.ac=
tive:hover { z-index: 2; color: rgb(255, 255, 255); background-color: rgb(5=
1, 122, 183); border-color: rgb(51, 122, 183); }

.list-group-item.active .list-group-item-heading, .list-group-item.active .=
list-group-item-heading > .small, .list-group-item.active .list-group-item-=
heading > small, .list-group-item.active:focus .list-group-item-heading, .l=
ist-group-item.active:focus .list-group-item-heading > .small, .list-group-=
item.active:focus .list-group-item-heading > small, .list-group-item.active=
:hover .list-group-item-heading, .list-group-item.active:hover .list-group-=
item-heading > .small, .list-group-item.active:hover .list-group-item-headi=
ng > small { color: inherit; }

.list-group-item.active .list-group-item-text, .list-group-item.active:focu=
s .list-group-item-text, .list-group-item.active:hover .list-group-item-tex=
t { color: rgb(199, 221, 239); }

.list-group-item-success { color: rgb(60, 118, 61); background-color: rgb(2=
23, 240, 216); }

a.list-group-item-success, button.list-group-item-success { color: rgb(60, =
118, 61); }

a.list-group-item-success .list-group-item-heading, button.list-group-item-=
success .list-group-item-heading { color: inherit; }

a.list-group-item-success:focus, a.list-group-item-success:hover, button.li=
st-group-item-success:focus, button.list-group-item-success:hover { color: =
rgb(60, 118, 61); background-color: rgb(208, 233, 198); }

a.list-group-item-success.active, a.list-group-item-success.active:focus, a=
.list-group-item-success.active:hover, button.list-group-item-success.activ=
e, button.list-group-item-success.active:focus, button.list-group-item-succ=
ess.active:hover { color: rgb(255, 255, 255); background-color: rgb(60, 118=
, 61); border-color: rgb(60, 118, 61); }

.list-group-item-info { color: rgb(49, 112, 143); background-color: rgb(217=
, 237, 247); }

a.list-group-item-info, button.list-group-item-info { color: rgb(49, 112, 1=
43); }

a.list-group-item-info .list-group-item-heading, button.list-group-item-inf=
o .list-group-item-heading { color: inherit; }

a.list-group-item-info:focus, a.list-group-item-info:hover, button.list-gro=
up-item-info:focus, button.list-group-item-info:hover { color: rgb(49, 112,=
 143); background-color: rgb(196, 227, 243); }

a.list-group-item-info.active, a.list-group-item-info.active:focus, a.list-=
group-item-info.active:hover, button.list-group-item-info.active, button.li=
st-group-item-info.active:focus, button.list-group-item-info.active:hover {=
 color: rgb(255, 255, 255); background-color: rgb(49, 112, 143); border-col=
or: rgb(49, 112, 143); }

.list-group-item-warning { color: rgb(138, 109, 59); background-color: rgb(=
252, 248, 227); }

a.list-group-item-warning, button.list-group-item-warning { color: rgb(138,=
 109, 59); }

a.list-group-item-warning .list-group-item-heading, button.list-group-item-=
warning .list-group-item-heading { color: inherit; }

a.list-group-item-warning:focus, a.list-group-item-warning:hover, button.li=
st-group-item-warning:focus, button.list-group-item-warning:hover { color: =
rgb(138, 109, 59); background-color: rgb(250, 242, 204); }

a.list-group-item-warning.active, a.list-group-item-warning.active:focus, a=
.list-group-item-warning.active:hover, button.list-group-item-warning.activ=
e, button.list-group-item-warning.active:focus, button.list-group-item-warn=
ing.active:hover { color: rgb(255, 255, 255); background-color: rgb(138, 10=
9, 59); border-color: rgb(138, 109, 59); }

.list-group-item-danger { color: rgb(169, 68, 66); background-color: rgb(24=
2, 222, 222); }

a.list-group-item-danger, button.list-group-item-danger { color: rgb(169, 6=
8, 66); }

a.list-group-item-danger .list-group-item-heading, button.list-group-item-d=
anger .list-group-item-heading { color: inherit; }

a.list-group-item-danger:focus, a.list-group-item-danger:hover, button.list=
-group-item-danger:focus, button.list-group-item-danger:hover { color: rgb(=
169, 68, 66); background-color: rgb(235, 204, 204); }

a.list-group-item-danger.active, a.list-group-item-danger.active:focus, a.l=
ist-group-item-danger.active:hover, button.list-group-item-danger.active, b=
utton.list-group-item-danger.active:focus, button.list-group-item-danger.ac=
tive:hover { color: rgb(255, 255, 255); background-color: rgb(169, 68, 66);=
 border-color: rgb(169, 68, 66); }

.list-group-item-heading { margin-top: 0px; margin-bottom: 5px; }

.list-group-item-text { margin-bottom: 0px; line-height: 1.3; }

.panel { margin-bottom: 20px; background-color: rgb(255, 255, 255); border:=
 1px solid transparent; border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.05)=
 0px 1px 1px; }

.panel-body { padding: 15px; }

.panel-heading { padding: 10px 15px; border-bottom: 1px solid transparent; =
border-top-left-radius: 3px; border-top-right-radius: 3px; }

.panel-heading > .dropdown .dropdown-toggle { color: inherit; }

.panel-title { margin-top: 0px; margin-bottom: 0px; font-size: 16px; color:=
 inherit; }

.panel-title > .small, .panel-title > .small > a, .panel-title > a, .panel-=
title > small, .panel-title > small > a { color: inherit; }

.panel-footer { padding: 10px 15px; background-color: rgb(245, 245, 245); b=
order-top: 1px solid rgb(221, 221, 221); border-bottom-right-radius: 3px; b=
order-bottom-left-radius: 3px; }

.panel > .list-group, .panel > .panel-collapse > .list-group { margin-botto=
m: 0px; }

.panel > .list-group .list-group-item, .panel > .panel-collapse > .list-gro=
up .list-group-item { border-width: 1px 0px; border-radius: 0px; }

.panel > .list-group:first-child .list-group-item:first-child, .panel > .pa=
nel-collapse > .list-group:first-child .list-group-item:first-child { borde=
r-top: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; }

.panel > .list-group:last-child .list-group-item:last-child, .panel > .pane=
l-collapse > .list-group:last-child .list-group-item:last-child { border-bo=
ttom: 0px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;=
 }

.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:fi=
rst-child { border-top-left-radius: 0px; border-top-right-radius: 0px; }

.panel-heading + .list-group .list-group-item:first-child { border-top-widt=
h: 0px; }

.list-group + .panel-footer { border-top-width: 0px; }

.panel > .panel-collapse > .table, .panel > .table, .panel > .table-respons=
ive > .table { margin-bottom: 0px; }

.panel > .panel-collapse > .table caption, .panel > .table caption, .panel =
> .table-responsive > .table caption { padding-right: 15px; padding-left: 1=
5px; }

.panel > .table-responsive:first-child > .table:first-child, .panel > .tabl=
e:first-child { border-top-left-radius: 3px; border-top-right-radius: 3px; =
}

.panel > .table-responsive:first-child > .table:first-child > tbody:first-c=
hild > tr:first-child, .panel > .table-responsive:first-child > .table:firs=
t-child > thead:first-child > tr:first-child, .panel > .table:first-child >=
 tbody:first-child > tr:first-child, .panel > .table:first-child > thead:fi=
rst-child > tr:first-child { border-top-left-radius: 3px; border-top-right-=
radius: 3px; }

.panel > .table-responsive:first-child > .table:first-child > tbody:first-c=
hild > tr:first-child td:first-child, .panel > .table-responsive:first-chil=
d > .table:first-child > tbody:first-child > tr:first-child th:first-child,=
 .panel > .table-responsive:first-child > .table:first-child > thead:first-=
child > tr:first-child td:first-child, .panel > .table-responsive:first-chi=
ld > .table:first-child > thead:first-child > tr:first-child th:first-child=
, .panel > .table:first-child > tbody:first-child > tr:first-child td:first=
-child, .panel > .table:first-child > tbody:first-child > tr:first-child th=
:first-child, .panel > .table:first-child > thead:first-child > tr:first-ch=
ild td:first-child, .panel > .table:first-child > thead:first-child > tr:fi=
rst-child th:first-child { border-top-left-radius: 3px; }

.panel > .table-responsive:first-child > .table:first-child > tbody:first-c=
hild > tr:first-child td:last-child, .panel > .table-responsive:first-child=
 > .table:first-child > tbody:first-child > tr:first-child th:last-child, .=
panel > .table-responsive:first-child > .table:first-child > thead:first-ch=
ild > tr:first-child td:last-child, .panel > .table-responsive:first-child =
> .table:first-child > thead:first-child > tr:first-child th:last-child, .p=
anel > .table:first-child > tbody:first-child > tr:first-child td:last-chil=
d, .panel > .table:first-child > tbody:first-child > tr:first-child th:last=
-child, .panel > .table:first-child > thead:first-child > tr:first-child td=
:last-child, .panel > .table:first-child > thead:first-child > tr:first-chi=
ld th:last-child { border-top-right-radius: 3px; }

.panel > .table-responsive:last-child > .table:last-child, .panel > .table:=
last-child { border-bottom-right-radius: 3px; border-bottom-left-radius: 3p=
x; }

.panel > .table-responsive:last-child > .table:last-child > tbody:last-chil=
d > tr:last-child, .panel > .table-responsive:last-child > .table:last-chil=
d > tfoot:last-child > tr:last-child, .panel > .table:last-child > tbody:la=
st-child > tr:last-child, .panel > .table:last-child > tfoot:last-child > t=
r:last-child { border-bottom-right-radius: 3px; border-bottom-left-radius: =
3px; }

.panel > .table-responsive:last-child > .table:last-child > tbody:last-chil=
d > tr:last-child td:first-child, .panel > .table-responsive:last-child > .=
table:last-child > tbody:last-child > tr:last-child th:first-child, .panel =
> .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:=
last-child td:first-child, .panel > .table-responsive:last-child > .table:l=
ast-child > tfoot:last-child > tr:last-child th:first-child, .panel > .tabl=
e:last-child > tbody:last-child > tr:last-child td:first-child, .panel > .t=
able:last-child > tbody:last-child > tr:last-child th:first-child, .panel >=
 .table:last-child > tfoot:last-child > tr:last-child td:first-child, .pane=
l > .table:last-child > tfoot:last-child > tr:last-child th:first-child { b=
order-bottom-left-radius: 3px; }

.panel > .table-responsive:last-child > .table:last-child > tbody:last-chil=
d > tr:last-child td:last-child, .panel > .table-responsive:last-child > .t=
able:last-child > tbody:last-child > tr:last-child th:last-child, .panel > =
.table-responsive:last-child > .table:last-child > tfoot:last-child > tr:la=
st-child td:last-child, .panel > .table-responsive:last-child > .table:last=
-child > tfoot:last-child > tr:last-child th:last-child, .panel > .table:la=
st-child > tbody:last-child > tr:last-child td:last-child, .panel > .table:=
last-child > tbody:last-child > tr:last-child th:last-child, .panel > .tabl=
e:last-child > tfoot:last-child > tr:last-child td:last-child, .panel > .ta=
ble:last-child > tfoot:last-child > tr:last-child th:last-child { border-bo=
ttom-right-radius: 3px; }

.panel > .panel-body + .table, .panel > .panel-body + .table-responsive, .p=
anel > .table + .panel-body, .panel > .table-responsive + .panel-body { bor=
der-top: 1px solid rgb(221, 221, 221); }

.panel > .table > tbody:first-child > tr:first-child td, .panel > .table > =
tbody:first-child > tr:first-child th { border-top: 0px; }

.panel > .table-bordered, .panel > .table-responsive > .table-bordered { bo=
rder: 0px; }

.panel > .table-bordered > tbody > tr > td:first-child, .panel > .table-bor=
dered > tbody > tr > th:first-child, .panel > .table-bordered > tfoot > tr =
> td:first-child, .panel > .table-bordered > tfoot > tr > th:first-child, .=
panel > .table-bordered > thead > tr > td:first-child, .panel > .table-bord=
ered > thead > tr > th:first-child, .panel > .table-responsive > .table-bor=
dered > tbody > tr > td:first-child, .panel > .table-responsive > .table-bo=
rdered > tbody > tr > th:first-child, .panel > .table-responsive > .table-b=
ordered > tfoot > tr > td:first-child, .panel > .table-responsive > .table-=
bordered > tfoot > tr > th:first-child, .panel > .table-responsive > .table=
-bordered > thead > tr > td:first-child, .panel > .table-responsive > .tabl=
e-bordered > thead > tr > th:first-child { border-left: 0px; }

.panel > .table-bordered > tbody > tr > td:last-child, .panel > .table-bord=
ered > tbody > tr > th:last-child, .panel > .table-bordered > tfoot > tr > =
td:last-child, .panel > .table-bordered > tfoot > tr > th:last-child, .pane=
l > .table-bordered > thead > tr > td:last-child, .panel > .table-bordered =
> thead > tr > th:last-child, .panel > .table-responsive > .table-bordered =
> tbody > tr > td:last-child, .panel > .table-responsive > .table-bordered =
> tbody > tr > th:last-child, .panel > .table-responsive > .table-bordered =
> tfoot > tr > td:last-child, .panel > .table-responsive > .table-bordered =
> tfoot > tr > th:last-child, .panel > .table-responsive > .table-bordered =
> thead > tr > td:last-child, .panel > .table-responsive > .table-bordered =
> thead > tr > th:last-child { border-right: 0px; }

.panel > .table-bordered > tbody > tr:first-child > td, .panel > .table-bor=
dered > tbody > tr:first-child > th, .panel > .table-bordered > thead > tr:=
first-child > td, .panel > .table-bordered > thead > tr:first-child > th, .=
panel > .table-responsive > .table-bordered > tbody > tr:first-child > td, =
.panel > .table-responsive > .table-bordered > tbody > tr:first-child > th,=
 .panel > .table-responsive > .table-bordered > thead > tr:first-child > td=
, .panel > .table-responsive > .table-bordered > thead > tr:first-child > t=
h { border-bottom: 0px; }

.panel > .table-bordered > tbody > tr:last-child > td, .panel > .table-bord=
ered > tbody > tr:last-child > th, .panel > .table-bordered > tfoot > tr:la=
st-child > td, .panel > .table-bordered > tfoot > tr:last-child > th, .pane=
l > .table-responsive > .table-bordered > tbody > tr:last-child > td, .pane=
l > .table-responsive > .table-bordered > tbody > tr:last-child > th, .pane=
l > .table-responsive > .table-bordered > tfoot > tr:last-child > td, .pane=
l > .table-responsive > .table-bordered > tfoot > tr:last-child > th { bord=
er-bottom: 0px; }

.panel > .table-responsive { margin-bottom: 0px; border: 0px; }

.panel-group { margin-bottom: 20px; }

.panel-group .panel { margin-bottom: 0px; border-radius: 4px; }

.panel-group .panel + .panel { margin-top: 5px; }

.panel-group .panel-heading { border-bottom: 0px; }

.panel-group .panel-heading + .panel-collapse > .list-group, .panel-group .=
panel-heading + .panel-collapse > .panel-body { border-top: 1px solid rgb(2=
21, 221, 221); }

.panel-group .panel-footer { border-top: 0px; }

.panel-group .panel-footer + .panel-collapse .panel-body { border-bottom: 1=
px solid rgb(221, 221, 221); }

.panel-default { border-color: rgb(221, 221, 221); }

.panel-default > .panel-heading { color: rgb(51, 51, 51); background-color:=
 rgb(245, 245, 245); border-color: rgb(221, 221, 221); }

.panel-default > .panel-heading + .panel-collapse > .panel-body { border-to=
p-color: rgb(221, 221, 221); }

.panel-default > .panel-heading .badge { color: rgb(245, 245, 245); backgro=
und-color: rgb(51, 51, 51); }

.panel-default > .panel-footer + .panel-collapse > .panel-body { border-bot=
tom-color: rgb(221, 221, 221); }

.panel-primary { border-color: rgb(51, 122, 183); }

.panel-primary > .panel-heading { color: rgb(255, 255, 255); background-col=
or: rgb(51, 122, 183); border-color: rgb(51, 122, 183); }

.panel-primary > .panel-heading + .panel-collapse > .panel-body { border-to=
p-color: rgb(51, 122, 183); }

.panel-primary > .panel-heading .badge { color: rgb(51, 122, 183); backgrou=
nd-color: rgb(255, 255, 255); }

.panel-primary > .panel-footer + .panel-collapse > .panel-body { border-bot=
tom-color: rgb(51, 122, 183); }

.panel-success { border-color: rgb(214, 233, 198); }

.panel-success > .panel-heading { color: rgb(60, 118, 61); background-color=
: rgb(223, 240, 216); border-color: rgb(214, 233, 198); }

.panel-success > .panel-heading + .panel-collapse > .panel-body { border-to=
p-color: rgb(214, 233, 198); }

.panel-success > .panel-heading .badge { color: rgb(223, 240, 216); backgro=
und-color: rgb(60, 118, 61); }

.panel-success > .panel-footer + .panel-collapse > .panel-body { border-bot=
tom-color: rgb(214, 233, 198); }

.panel-info { border-color: rgb(188, 232, 241); }

.panel-info > .panel-heading { color: rgb(49, 112, 143); background-color: =
rgb(217, 237, 247); border-color: rgb(188, 232, 241); }

.panel-info > .panel-heading + .panel-collapse > .panel-body { border-top-c=
olor: rgb(188, 232, 241); }

.panel-info > .panel-heading .badge { color: rgb(217, 237, 247); background=
-color: rgb(49, 112, 143); }

.panel-info > .panel-footer + .panel-collapse > .panel-body { border-bottom=
-color: rgb(188, 232, 241); }

.panel-warning { border-color: rgb(250, 235, 204); }

.panel-warning > .panel-heading { color: rgb(138, 109, 59); background-colo=
r: rgb(252, 248, 227); border-color: rgb(250, 235, 204); }

.panel-warning > .panel-heading + .panel-collapse > .panel-body { border-to=
p-color: rgb(250, 235, 204); }

.panel-warning > .panel-heading .badge { color: rgb(252, 248, 227); backgro=
und-color: rgb(138, 109, 59); }

.panel-warning > .panel-footer + .panel-collapse > .panel-body { border-bot=
tom-color: rgb(250, 235, 204); }

.panel-danger { border-color: rgb(235, 204, 209); }

.panel-danger > .panel-heading { color: rgb(169, 68, 66); background-color:=
 rgb(242, 222, 222); border-color: rgb(235, 204, 209); }

.panel-danger > .panel-heading + .panel-collapse > .panel-body { border-top=
-color: rgb(235, 204, 209); }

.panel-danger > .panel-heading .badge { color: rgb(242, 222, 222); backgrou=
nd-color: rgb(169, 68, 66); }

.panel-danger > .panel-footer + .panel-collapse > .panel-body { border-bott=
om-color: rgb(235, 204, 209); }

.embed-responsive { position: relative; display: block; height: 0px; paddin=
g: 0px; overflow: hidden; }

.embed-responsive .embed-responsive-item, .embed-responsive embed, .embed-r=
esponsive iframe, .embed-responsive object, .embed-responsive video { posit=
ion: absolute; top: 0px; bottom: 0px; left: 0px; width: 100%; height: 100%;=
 border: 0px; }

.embed-responsive-16by9 { padding-bottom: 56.25%; }

.embed-responsive-4by3 { padding-bottom: 75%; }

.well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-co=
lor: rgb(245, 245, 245); border: 1px solid rgb(227, 227, 227); border-radiu=
s: 4px; box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 1px inset; }

.well blockquote { border-color: rgba(0, 0, 0, 0.15); }

.well-lg { padding: 24px; border-radius: 6px; }

.well-sm { padding: 9px; border-radius: 3px; }

.close { float: right; font-size: 21px; font-weight: 700; line-height: 1; c=
olor: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacity: 0=
.2; }

.close:focus, .close:hover { color: rgb(0, 0, 0); text-decoration: none; cu=
rsor: pointer; opacity: 0.5; }

button.close { appearance: none; padding: 0px; cursor: pointer; background:=
 0px 0px; border: 0px; }

.modal-open { overflow: hidden; }

.modal { position: fixed; inset: 0px; z-index: 1050; display: none; overflo=
w: hidden; outline: 0px; }

.modal.fade .modal-dialog { transition: transform 0.3s ease-out 0s; transfo=
rm: translate(0px, -25%); }

.modal.in .modal-dialog { transform: translate(0px, 0px); }

.modal-open .modal { overflow: hidden auto; }

.modal-dialog { position: relative; width: auto; margin: 10px; }

.modal-content { position: relative; background-color: rgb(255, 255, 255); =
background-clip: padding-box; border: 1px solid rgba(0, 0, 0, 0.2); border-=
radius: 6px; outline: 0px; box-shadow: rgba(0, 0, 0, 0.5) 0px 3px 9px; }

.modal-backdrop { position: fixed; inset: 0px; z-index: 1040; background-co=
lor: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop.in { opacity: 0.5; }

.modal-header { min-height: 16.43px; padding: 15px; border-bottom: 1px soli=
d rgb(229, 229, 229); }

.modal-header .close { margin-top: -2px; }

.modal-title { margin: 0px; line-height: 1.42857; }

.modal-body { position: relative; padding: 15px; }

.modal-footer { padding: 15px; text-align: right; border-top: 1px solid rgb=
(229, 229, 229); }

.modal-footer .btn + .btn { margin-bottom: 0px; margin-left: 5px; }

.modal-footer .btn-group .btn + .btn { margin-left: -1px; }

.modal-footer .btn-block + .btn-block { margin-left: 0px; }

.modal-scrollbar-measure { position: absolute; top: -9999px; width: 50px; h=
eight: 50px; overflow: scroll; }

@media (min-width: 768px) {
  .modal-dialog { width: 600px; margin: 30px auto; }
  .modal-content { box-shadow: rgba(0, 0, 0, 0.5) 0px 5px 15px; }
  .modal-sm { width: 300px; }
}

@media (min-width: 992px) {
  .modal-lg { width: 900px; }
}

.tooltip { position: absolute; z-index: 1070; display: block; font-family: =
"Helvetica Neue", Helvetica, Arial, sans-serif; font-size: 12px; font-style=
: normal; font-weight: 400; line-height: 1.42857; text-align: start; text-d=
ecoration: none; text-shadow: none; text-transform: none; letter-spacing: n=
ormal; word-break: normal; word-spacing: normal; overflow-wrap: normal; whi=
te-space: normal; opacity: 0; line-break: auto; }

.tooltip.in { opacity: 0.9; }

.tooltip.top { padding: 5px 0px; margin-top: -3px; }

.tooltip.right { padding: 0px 5px; margin-left: 3px; }

.tooltip.bottom { padding: 5px 0px; margin-top: 3px; }

.tooltip.left { padding: 0px 5px; margin-left: -3px; }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; background-color: rgb(0, 0, 0); border-radius: 4px=
; }

.tooltip-arrow { position: absolute; width: 0px; height: 0px; border-color:=
 transparent; border-style: solid; }

.tooltip.top .tooltip-arrow { bottom: 0px; left: 50%; margin-left: -5px; bo=
rder-width: 5px 5px 0px; border-top-color: rgb(0, 0, 0); }

.tooltip.top-left .tooltip-arrow { right: 5px; bottom: 0px; margin-bottom: =
-5px; border-width: 5px 5px 0px; border-top-color: rgb(0, 0, 0); }

.tooltip.top-right .tooltip-arrow { bottom: 0px; left: 5px; margin-bottom: =
-5px; border-width: 5px 5px 0px; border-top-color: rgb(0, 0, 0); }

.tooltip.right .tooltip-arrow { top: 50%; left: 0px; margin-top: -5px; bord=
er-width: 5px 5px 5px 0px; border-right-color: rgb(0, 0, 0); }

.tooltip.left .tooltip-arrow { top: 50%; right: 0px; margin-top: -5px; bord=
er-width: 5px 0px 5px 5px; border-left-color: rgb(0, 0, 0); }

.tooltip.bottom .tooltip-arrow { top: 0px; left: 50%; margin-left: -5px; bo=
rder-width: 0px 5px 5px; border-bottom-color: rgb(0, 0, 0); }

.tooltip.bottom-left .tooltip-arrow { top: 0px; right: 5px; margin-top: -5p=
x; border-width: 0px 5px 5px; border-bottom-color: rgb(0, 0, 0); }

.tooltip.bottom-right .tooltip-arrow { top: 0px; left: 5px; margin-top: -5p=
x; border-width: 0px 5px 5px; border-bottom-color: rgb(0, 0, 0); }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1060; display:=
 none; max-width: 276px; padding: 1px; font-family: "Helvetica Neue", Helve=
tica, Arial, sans-serif; font-size: 14px; font-style: normal; font-weight: =
400; line-height: 1.42857; text-align: start; text-decoration: none; text-s=
hadow: none; text-transform: none; letter-spacing: normal; word-break: norm=
al; word-spacing: normal; overflow-wrap: normal; white-space: normal; backg=
round-color: rgb(255, 255, 255); background-clip: padding-box; border: 1px =
solid rgba(0, 0, 0, 0.2); border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2=
) 0px 5px 10px; line-break: auto; }

.popover.top { margin-top: -10px; }

.popover.right { margin-left: 10px; }

.popover.bottom { margin-top: 10px; }

.popover.left { margin-left: -10px; }

.popover-title { padding: 8px 14px; margin: 0px; font-size: 14px; backgroun=
d-color: rgb(247, 247, 247); border-bottom: 1px solid rgb(235, 235, 235); b=
order-radius: 5px 5px 0px 0px; }

.popover-content { padding: 9px 14px; }

.popover > .arrow, .popover > .arrow::after { position: absolute; display: =
block; width: 0px; height: 0px; border-color: transparent; border-style: so=
lid; }

.popover > .arrow { border-width: 11px; }

.popover > .arrow::after { content: ""; border-width: 10px; }

.popover.top > .arrow { bottom: -11px; left: 50%; margin-left: -11px; borde=
r-top-color: rgba(0, 0, 0, 0.25); border-bottom-width: 0px; }

.popover.top > .arrow::after { bottom: 1px; margin-left: -10px; content: " =
"; border-top-color: rgb(255, 255, 255); border-bottom-width: 0px; }

.popover.right > .arrow { top: 50%; left: -11px; margin-top: -11px; border-=
right-color: rgba(0, 0, 0, 0.25); border-left-width: 0px; }

.popover.right > .arrow::after { bottom: -10px; left: 1px; content: " "; bo=
rder-right-color: rgb(255, 255, 255); border-left-width: 0px; }

.popover.bottom > .arrow { top: -11px; left: 50%; margin-left: -11px; borde=
r-top-width: 0px; border-bottom-color: rgba(0, 0, 0, 0.25); }

.popover.bottom > .arrow::after { top: 1px; margin-left: -10px; content: " =
"; border-top-width: 0px; border-bottom-color: rgb(255, 255, 255); }

.popover.left > .arrow { top: 50%; right: -11px; margin-top: -11px; border-=
right-width: 0px; border-left-color: rgba(0, 0, 0, 0.25); }

.popover.left > .arrow::after { right: 1px; bottom: -10px; content: " "; bo=
rder-right-width: 0px; border-left-color: rgb(255, 255, 255); }

.carousel { position: relative; }

.carousel-inner { position: relative; width: 100%; overflow: hidden; }

.carousel-inner > .item { position: relative; display: none; transition: le=
ft 0.6s ease-in-out 0s; }

.carousel-inner > .item > a > img, .carousel-inner > .item > img { line-hei=
ght: 1; }

@media not all, (-webkit-transform-3d) {
  .carousel-inner > .item { transition: transform 0.6s ease-in-out 0s; back=
face-visibility: hidden; perspective: 1000px; }
  .carousel-inner > .item.active.right, .carousel-inner > .item.next { left=
: 0px; transform: translate3d(100%, 0px, 0px); }
  .carousel-inner > .item.active.left, .carousel-inner > .item.prev { left:=
 0px; transform: translate3d(-100%, 0px, 0px); }
  .carousel-inner > .item.active, .carousel-inner > .item.next.left, .carou=
sel-inner > .item.prev.right { left: 0px; transform: translate3d(0px, 0px, =
0px); }
}

.carousel-inner > .active, .carousel-inner > .next, .carousel-inner > .prev=
 { display: block; }

.carousel-inner > .active { left: 0px; }

.carousel-inner > .next, .carousel-inner > .prev { position: absolute; top:=
 0px; width: 100%; }

.carousel-inner > .next { left: 100%; }

.carousel-inner > .prev { left: -100%; }

.carousel-inner > .next.left, .carousel-inner > .prev.right { left: 0px; }

.carousel-inner > .active.left { left: -100%; }

.carousel-inner > .active.right { left: 100%; }

.carousel-control { position: absolute; top: 0px; bottom: 0px; left: 0px; w=
idth: 15%; font-size: 20px; color: rgb(255, 255, 255); text-align: center; =
text-shadow: rgba(0, 0, 0, 0.6) 0px 1px 2px; opacity: 0.5; }

.carousel-control.left { background-image: linear-gradient(to right, rgba(0=
, 0, 0, 0.5) 0px, rgba(0, 0, 0, 0) 100%); background-repeat: repeat-x; }

.carousel-control.right { right: 0px; left: auto; background-image: linear-=
gradient(to right, rgba(0, 0, 0, 0) 0px, rgba(0, 0, 0, 0.5) 100%); backgrou=
nd-repeat: repeat-x; }

.carousel-control:focus, .carousel-control:hover { color: rgb(255, 255, 255=
); text-decoration: none; outline: 0px; opacity: 0.9; }

.carousel-control .glyphicon-chevron-left, .carousel-control .glyphicon-che=
vron-right, .carousel-control .icon-next, .carousel-control .icon-prev { po=
sition: absolute; top: 50%; z-index: 5; display: inline-block; margin-top: =
-10px; }

.carousel-control .glyphicon-chevron-left, .carousel-control .icon-prev { l=
eft: 50%; margin-left: -10px; }

.carousel-control .glyphicon-chevron-right, .carousel-control .icon-next { =
right: 50%; margin-right: -10px; }

.carousel-control .icon-next, .carousel-control .icon-prev { width: 20px; h=
eight: 20px; font-family: serif; line-height: 1; }

.carousel-control .icon-prev::before { content: "=8B"; }

.carousel-control .icon-next::before { content: "=9B"; }

.carousel-indicators { position: absolute; bottom: 10px; left: 50%; z-index=
: 15; width: 60%; padding-left: 0px; margin-left: -30%; text-align: center;=
 list-style: none; }

.carousel-indicators li { display: inline-block; width: 10px; height: 10px;=
 margin: 1px; text-indent: -999px; cursor: pointer; background-color: rgba(=
0, 0, 0, 0); border: 1px solid rgb(255, 255, 255); border-radius: 10px; }

.carousel-indicators .active { width: 12px; height: 12px; margin: 0px; back=
ground-color: rgb(255, 255, 255); }

.carousel-caption { position: absolute; right: 15%; bottom: 20px; left: 15%=
; z-index: 10; padding-top: 20px; padding-bottom: 20px; color: rgb(255, 255=
, 255); text-align: center; text-shadow: rgba(0, 0, 0, 0.6) 0px 1px 2px; }

.carousel-caption .btn { text-shadow: none; }

@media screen and (min-width: 768px) {
  .carousel-control .glyphicon-chevron-left, .carousel-control .glyphicon-c=
hevron-right, .carousel-control .icon-next, .carousel-control .icon-prev { =
width: 30px; height: 30px; margin-top: -15px; font-size: 30px; }
  .carousel-control .glyphicon-chevron-left, .carousel-control .icon-prev {=
 margin-left: -15px; }
  .carousel-control .glyphicon-chevron-right, .carousel-control .icon-next =
{ margin-right: -15px; }
  .carousel-caption { right: 20%; left: 20%; padding-bottom: 30px; }
  .carousel-indicators { bottom: 20px; }
}

.btn-group-vertical > .btn-group::after, .btn-group-vertical > .btn-group::=
before, .btn-toolbar::after, .btn-toolbar::before, .clearfix::after, .clear=
fix::before, .container-fluid::after, .container-fluid::before, .container:=
:after, .container::before, .dl-horizontal dd::after, .dl-horizontal dd::be=
fore, .form-horizontal .form-group::after, .form-horizontal .form-group::be=
fore, .modal-footer::after, .modal-footer::before, .nav::after, .nav::befor=
e, .navbar-collapse::after, .navbar-collapse::before, .navbar-header::after=
, .navbar-header::before, .navbar::after, .navbar::before, .pager::after, .=
pager::before, .panel-body::after, .panel-body::before, .row::after, .row::=
before { display: table; content: " "; }

.btn-group-vertical > .btn-group::after, .btn-toolbar::after, .clearfix::af=
ter, .container-fluid::after, .container::after, .dl-horizontal dd::after, =
.form-horizontal .form-group::after, .modal-footer::after, .nav::after, .na=
vbar-collapse::after, .navbar-header::after, .navbar::after, .pager::after,=
 .panel-body::after, .row::after { clear: both; }

.center-block { display: block; margin-right: auto; margin-left: auto; }

.pull-right { float: right !important; }

.pull-left { float: left !important; }

.hide { display: none !important; }

.show { display: block !important; }

.invisible { visibility: hidden; }

.text-hide { font: 0px / 0 a; color: transparent; text-shadow: none; backgr=
ound-color: transparent; border: 0px; }

.hidden { display: none !important; }

.affix { position: fixed; }

.visible-lg, .visible-md, .visible-sm, .visible-xs { display: none !importa=
nt; }

.visible-lg-block, .visible-lg-inline, .visible-lg-inline-block, .visible-m=
d-block, .visible-md-inline, .visible-md-inline-block, .visible-sm-block, .=
visible-sm-inline, .visible-sm-inline-block, .visible-xs-block, .visible-xs=
-inline, .visible-xs-inline-block { display: none !important; }

@media (max-width: 767px) {
  .visible-xs { display: block !important; }
  table.visible-xs { display: table !important; }
  tr.visible-xs { display: table-row !important; }
  td.visible-xs, th.visible-xs { display: table-cell !important; }
}

@media (max-width: 767px) {
  .visible-xs-block { display: block !important; }
}

@media (max-width: 767px) {
  .visible-xs-inline { display: inline !important; }
}

@media (max-width: 767px) {
  .visible-xs-inline-block { display: inline-block !important; }
}

@media (max-width: 991px) and (min-width: 768px) {
  .visible-sm { display: block !important; }
  table.visible-sm { display: table !important; }
  tr.visible-sm { display: table-row !important; }
  td.visible-sm, th.visible-sm { display: table-cell !important; }
}

@media (max-width: 991px) and (min-width: 768px) {
  .visible-sm-block { display: block !important; }
}

@media (max-width: 991px) and (min-width: 768px) {
  .visible-sm-inline { display: inline !important; }
}

@media (max-width: 991px) and (min-width: 768px) {
  .visible-sm-inline-block { display: inline-block !important; }
}

@media (max-width: 1199px) and (min-width: 992px) {
  .visible-md { display: block !important; }
  table.visible-md { display: table !important; }
  tr.visible-md { display: table-row !important; }
  td.visible-md, th.visible-md { display: table-cell !important; }
}

@media (max-width: 1199px) and (min-width: 992px) {
  .visible-md-block { display: block !important; }
}

@media (max-width: 1199px) and (min-width: 992px) {
  .visible-md-inline { display: inline !important; }
}

@media (max-width: 1199px) and (min-width: 992px) {
  .visible-md-inline-block { display: inline-block !important; }
}

@media (min-width: 1200px) {
  .visible-lg { display: block !important; }
  table.visible-lg { display: table !important; }
  tr.visible-lg { display: table-row !important; }
  td.visible-lg, th.visible-lg { display: table-cell !important; }
}

@media (min-width: 1200px) {
  .visible-lg-block { display: block !important; }
}

@media (min-width: 1200px) {
  .visible-lg-inline { display: inline !important; }
}

@media (min-width: 1200px) {
  .visible-lg-inline-block { display: inline-block !important; }
}

@media (max-width: 767px) {
  .hidden-xs { display: none !important; }
}

@media (max-width: 991px) and (min-width: 768px) {
  .hidden-sm { display: none !important; }
}

@media (max-width: 1199px) and (min-width: 992px) {
  .hidden-md { display: none !important; }
}

@media (min-width: 1200px) {
  .hidden-lg { display: none !important; }
}

.visible-print { display: none !important; }

@media print {
  .visible-print { display: block !important; }
  table.visible-print { display: table !important; }
  tr.visible-print { display: table-row !important; }
  td.visible-print, th.visible-print { display: table-cell !important; }
}

.visible-print-block { display: none !important; }

@media print {
  .visible-print-block { display: block !important; }
}

.visible-print-inline { display: none !important; }

@media print {
  .visible-print-inline { display: inline !important; }
}

.visible-print-inline-block { display: none !important; }

@media print {
  .visible-print-inline-block { display: inline-block !important; }
}

@media print {
  .hidden-print { display: none !important; }
}
------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://phpdelusions.net/css/phpdelusions.css

@charset "windows-1252";

.p0, .p-0 { padding: 0px; }

.p8, .p-1 { padding: 8px; }

.p16, .p-2 { padding: 16px; }

.p24, .p-3 { padding: 24px; }

.p32, .p-4 { padding: 32px; }

.p40, .p-5 { padding: 40px; }

.p48, .p-6 { padding: 48px; }

.p56, .p-7 { padding: 56px; }

.p64, .p-8 { padding: 64px; }

.p72, .p-9 { padding: 72px; }

.p80, .p-10 { padding: 80px; }

.p88, .p-11 { padding: 88px; }

.p96, .p-12 { padding: 96px; }

.p104, .p-13 { padding: 104px; }

.p112, .p-14 { padding: 112px; }

.p120, .p-15 { padding: 120px; }

.ph0, .ph-0 { padding-left: 0px; padding-right: 0px; }

.ph8, .ph-1 { padding-left: 8px; padding-right: 8px; }

.ph16, .ph-2 { padding-left: 16px; padding-right: 16px; }

.ph24, .ph-3 { padding-left: 24px; padding-right: 24px; }

.ph32, .ph-4 { padding-left: 32px; padding-right: 32px; }

.ph40, .ph-5 { padding-left: 40px; padding-right: 40px; }

.ph48, .ph-6 { padding-left: 48px; padding-right: 48px; }

.ph56, .ph-7 { padding-left: 56px; padding-right: 56px; }

.ph64, .ph-8 { padding-left: 64px; padding-right: 64px; }

.ph72, .ph-9 { padding-left: 72px; padding-right: 72px; }

.ph80, .ph-10 { padding-left: 80px; padding-right: 80px; }

.ph88, .ph-11 { padding-left: 88px; padding-right: 88px; }

.ph96, .ph-12 { padding-left: 96px; padding-right: 96px; }

.ph104, .ph-13 { padding-left: 104px; padding-right: 104px; }

.ph112, .ph-14 { padding-left: 112px; padding-right: 112px; }

.ph120, .ph-15 { padding-left: 120px; padding-right: 120px; }

.pv0, .pv-0 { padding-top: 0px; padding-bottom: 0px; }

.pv8, .pv-1 { padding-top: 8px; padding-bottom: 8px; }

.pv16, .pv-2 { padding-top: 16px; padding-bottom: 16px; }

.pv24, .pv-3 { padding-top: 24px; padding-bottom: 24px; }

.pv32, .pv-4 { padding-top: 32px; padding-bottom: 32px; }

.pv40, .pv-5 { padding-top: 40px; padding-bottom: 40px; }

.pv48, .pv-6 { padding-top: 48px; padding-bottom: 48px; }

.pv56, .pv-7 { padding-top: 56px; padding-bottom: 56px; }

.pv64, .pv-8 { padding-top: 64px; padding-bottom: 64px; }

.pv72, .pv-9 { padding-top: 72px; padding-bottom: 72px; }

.pv80, .pv-10 { padding-top: 80px; padding-bottom: 80px; }

.pv88, .pv-11 { padding-top: 88px; padding-bottom: 88px; }

.pv96, .pv-12 { padding-top: 96px; padding-bottom: 96px; }

.pv104, .pv-13 { padding-top: 104px; padding-bottom: 104px; }

.pv112, .pv-14 { padding-top: 112px; padding-bottom: 112px; }

.pv120, .pv-15 { padding-top: 120px; padding-bottom: 120px; }

.pt0, .pt-0 { padding-top: 0px; }

.pt8, .pt-1 { padding-top: 8px; }

.pt16, .pt-2 { padding-top: 16px; }

.pt24, .pt-3 { padding-top: 24px; }

.pt32, .pt-4 { padding-top: 32px; }

.pt40, .pt-5 { padding-top: 40px; }

.pt48, .pt-6 { padding-top: 48px; }

.pt56, .pt-7 { padding-top: 56px; }

.pt64, .pt-8 { padding-top: 64px; }

.pt72, .pt-9 { padding-top: 72px; }

.pt80, .pt-10 { padding-top: 80px; }

.pt88, .pt-11 { padding-top: 88px; }

.pt96, .pt-12 { padding-top: 96px; }

.pt104, .pt-13 { padding-top: 104px; }

.pt112, .pt-14 { padding-top: 112px; }

.pt120, .pt-15 { padding-top: 120px; }

.pr0, .pr-0 { padding-right: 0px; }

.pr8, .pr-1 { padding-right: 8px; }

.pr16, .pr-2 { padding-right: 16px; }

.pr24, .pr-3 { padding-right: 24px; }

.pr32, .pr-4 { padding-right: 32px; }

.pr40, .pr-5 { padding-right: 40px; }

.pr48, .pr-6 { padding-right: 48px; }

.pr56, .pr-7 { padding-right: 56px; }

.pr64, .pr-8 { padding-right: 64px; }

.pr72, .pr-9 { padding-right: 72px; }

.pr80, .pr-10 { padding-right: 80px; }

.pr88, .pr-11 { padding-right: 88px; }

.pr96, .pr-12 { padding-right: 96px; }

.pr104, .pr-13 { padding-right: 104px; }

.pr112, .pr-14 { padding-right: 112px; }

.pr120, .pr-15 { padding-right: 120px; }

.pb0, .pb-0 { padding-bottom: 0px; }

.pb8, .pb-1 { padding-bottom: 8px; }

.pb16, .pb-2 { padding-bottom: 16px; }

.pb24, .pb-3 { padding-bottom: 24px; }

.pb32, .pb-4 { padding-bottom: 32px; }

.pb40, .pb-5 { padding-bottom: 40px; }

.pb48, .pb-6 { padding-bottom: 48px; }

.pb56, .pb-7 { padding-bottom: 56px; }

.pb64, .pb-8 { padding-bottom: 64px; }

.pb72, .pb-9 { padding-bottom: 72px; }

.pb80, .pb-10 { padding-bottom: 80px; }

.pb88, .pb-11 { padding-bottom: 88px; }

.pb96, .pb-12 { padding-bottom: 96px; }

.pb104, .pb-13 { padding-bottom: 104px; }

.pb112, .pb-14 { padding-bottom: 112px; }

.pb120, .pb-15 { padding-bottom: 120px; }

.pl0, .pl-0 { padding-left: 0px; }

.pl8, .pl-1 { padding-left: 8px; }

.pl16, .pl-2 { padding-left: 16px; }

.pl24, .pl-3 { padding-left: 24px; }

.pl32, .pl-4 { padding-left: 32px; }

.pl40, .pl-5 { padding-left: 40px; }

.pl48, .pl-6 { padding-left: 48px; }

.pl56, .pl-7 { padding-left: 56px; }

.pl64, .pl-8 { padding-left: 64px; }

.pl72, .pl-9 { padding-left: 72px; }

.pl80, .pl-10 { padding-left: 80px; }

.pl88, .pl-11 { padding-left: 88px; }

.pl96, .pl-12 { padding-left: 96px; }

.pl104, .pl-13 { padding-left: 104px; }

.pl112, .pl-14 { padding-left: 112px; }

.pl120, .pl-15 { padding-left: 120px; }

.p0, .p-0 { padding: 0px; }

.p8, .p-1 { padding: 8px; }

.p16, .p-2 { padding: 16px; }

.p24, .p-3 { padding: 24px; }

.p32, .p-4 { padding: 32px; }

.p40, .p-5 { padding: 40px; }

.p48, .p-6 { padding: 48px; }

.p56, .p-7 { padding: 56px; }

.p64, .p-8 { padding: 64px; }

.p72, .p-9 { padding: 72px; }

.p80, .p-10 { padding: 80px; }

.p88, .p-11 { padding: 88px; }

.p96, .p-12 { padding: 96px; }

.p104, .p-13 { padding: 104px; }

.p112, .p-14 { padding: 112px; }

.p120, .p-15 { padding: 120px; }

.ph0, .ph-0 { padding-left: 0px; padding-right: 0px; }

.ph8, .ph-1 { padding-left: 8px; padding-right: 8px; }

.ph16, .ph-2 { padding-left: 16px; padding-right: 16px; }

.ph24, .ph-3 { padding-left: 24px; padding-right: 24px; }

.ph32, .ph-4 { padding-left: 32px; padding-right: 32px; }

.ph40, .ph-5 { padding-left: 40px; padding-right: 40px; }

.ph48, .ph-6 { padding-left: 48px; padding-right: 48px; }

.ph56, .ph-7 { padding-left: 56px; padding-right: 56px; }

.ph64, .ph-8 { padding-left: 64px; padding-right: 64px; }

.ph72, .ph-9 { padding-left: 72px; padding-right: 72px; }

.ph80, .ph-10 { padding-left: 80px; padding-right: 80px; }

.ph88, .ph-11 { padding-left: 88px; padding-right: 88px; }

.ph96, .ph-12 { padding-left: 96px; padding-right: 96px; }

.ph104, .ph-13 { padding-left: 104px; padding-right: 104px; }

.ph112, .ph-14 { padding-left: 112px; padding-right: 112px; }

.ph120, .ph-15 { padding-left: 120px; padding-right: 120px; }

.pv0, .pv-0 { padding-top: 0px; padding-bottom: 0px; }

.pv8, .pv-1 { padding-top: 8px; padding-bottom: 8px; }

.pv16, .pv-2 { padding-top: 16px; padding-bottom: 16px; }

.pv24, .pv-3 { padding-top: 24px; padding-bottom: 24px; }

.pv32, .pv-4 { padding-top: 32px; padding-bottom: 32px; }

.pv40, .pv-5 { padding-top: 40px; padding-bottom: 40px; }

.pv48, .pv-6 { padding-top: 48px; padding-bottom: 48px; }

.pv56, .pv-7 { padding-top: 56px; padding-bottom: 56px; }

.pv64, .pv-8 { padding-top: 64px; padding-bottom: 64px; }

.pv72, .pv-9 { padding-top: 72px; padding-bottom: 72px; }

.pv80, .pv-10 { padding-top: 80px; padding-bottom: 80px; }

.pv88, .pv-11 { padding-top: 88px; padding-bottom: 88px; }

.pv96, .pv-12 { padding-top: 96px; padding-bottom: 96px; }

.pv104, .pv-13 { padding-top: 104px; padding-bottom: 104px; }

.pv112, .pv-14 { padding-top: 112px; padding-bottom: 112px; }

.pv120, .pv-15 { padding-top: 120px; padding-bottom: 120px; }

.pt0, .pt-0 { padding-top: 0px; }

.pt8, .pt-1 { padding-top: 8px; }

.pt16, .pt-2 { padding-top: 16px; }

.pt24, .pt-3 { padding-top: 24px; }

.pt32, .pt-4 { padding-top: 32px; }

.pt40, .pt-5 { padding-top: 40px; }

.pt48, .pt-6 { padding-top: 48px; }

.pt56, .pt-7 { padding-top: 56px; }

.pt64, .pt-8 { padding-top: 64px; }

.pt72, .pt-9 { padding-top: 72px; }

.pt80, .pt-10 { padding-top: 80px; }

.pt88, .pt-11 { padding-top: 88px; }

.pt96, .pt-12 { padding-top: 96px; }

.pt104, .pt-13 { padding-top: 104px; }

.pt112, .pt-14 { padding-top: 112px; }

.pt120, .pt-15 { padding-top: 120px; }

.pr0, .pr-0 { padding-right: 0px; }

.pr8, .pr-1 { padding-right: 8px; }

.pr16, .pr-2 { padding-right: 16px; }

.pr24, .pr-3 { padding-right: 24px; }

.pr32, .pr-4 { padding-right: 32px; }

.pr40, .pr-5 { padding-right: 40px; }

.pr48, .pr-6 { padding-right: 48px; }

.pr56, .pr-7 { padding-right: 56px; }

.pr64, .pr-8 { padding-right: 64px; }

.pr72, .pr-9 { padding-right: 72px; }

.pr80, .pr-10 { padding-right: 80px; }

.pr88, .pr-11 { padding-right: 88px; }

.pr96, .pr-12 { padding-right: 96px; }

.pr104, .pr-13 { padding-right: 104px; }

.pr112, .pr-14 { padding-right: 112px; }

.pr120, .pr-15 { padding-right: 120px; }

.pb0, .pb-0 { padding-bottom: 0px; }

.pb8, .pb-1 { padding-bottom: 8px; }

.pb16, .pb-2 { padding-bottom: 16px; }

.pb24, .pb-3 { padding-bottom: 24px; }

.pb32, .pb-4 { padding-bottom: 32px; }

.pb40, .pb-5 { padding-bottom: 40px; }

.pb48, .pb-6 { padding-bottom: 48px; }

.pb56, .pb-7 { padding-bottom: 56px; }

.pb64, .pb-8 { padding-bottom: 64px; }

.pb72, .pb-9 { padding-bottom: 72px; }

.pb80, .pb-10 { padding-bottom: 80px; }

.pb88, .pb-11 { padding-bottom: 88px; }

.pb96, .pb-12 { padding-bottom: 96px; }

.pb104, .pb-13 { padding-bottom: 104px; }

.pb112, .pb-14 { padding-bottom: 112px; }

.pb120, .pb-15 { padding-bottom: 120px; }

.pl0, .pl-0 { padding-left: 0px; }

.pl8, .pl-1 { padding-left: 8px; }

.pl16, .pl-2 { padding-left: 16px; }

.pl24, .pl-3 { padding-left: 24px; }

.pl32, .pl-4 { padding-left: 32px; }

.pl40, .pl-5 { padding-left: 40px; }

.pl48, .pl-6 { padding-left: 48px; }

.pl56, .pl-7 { padding-left: 56px; }

.pl64, .pl-8 { padding-left: 64px; }

.pl72, .pl-9 { padding-left: 72px; }

.pl80, .pl-10 { padding-left: 80px; }

.pl88, .pl-11 { padding-left: 88px; }

.pl96, .pl-12 { padding-left: 96px; }

.pl104, .pl-13 { padding-left: 104px; }

.pl112, .pl-14 { padding-left: 112px; }

.pl120, .pl-15 { padding-left: 120px; }

.m0, .m-0 { margin: 0px; }

.m8, .m-1 { margin: 8px; }

.m16, .m-2 { margin: 16px; }

.m24, .m-3 { margin: 24px; }

.m32, .m-4 { margin: 32px; }

.m40, .m-5 { margin: 40px; }

.m48, .m-6 { margin: 48px; }

.m56, .m-7 { margin: 56px; }

.m64, .m-8 { margin: 64px; }

.m72, .m-9 { margin: 72px; }

.m80, .m-10 { margin: 80px; }

.m88, .m-11 { margin: 88px; }

.m96, .m-12 { margin: 96px; }

.m104, .m-13 { margin: 104px; }

.m112, .m-14 { margin: 112px; }

.m120, .m-15 { margin: 120px; }

.mh0, .mh-0 { margin-left: 0px; margin-right: 0px; }

.mh8, .mh-1 { margin-left: 8px; margin-right: 8px; }

.mh16, .mh-2 { margin-left: 16px; margin-right: 16px; }

.mh24, .mh-3 { margin-left: 24px; margin-right: 24px; }

.mh32, .mh-4 { margin-left: 32px; margin-right: 32px; }

.mh40, .mh-5 { margin-left: 40px; margin-right: 40px; }

.mh48, .mh-6 { margin-left: 48px; margin-right: 48px; }

.mh56, .mh-7 { margin-left: 56px; margin-right: 56px; }

.mh64, .mh-8 { margin-left: 64px; margin-right: 64px; }

.mh72, .mh-9 { margin-left: 72px; margin-right: 72px; }

.mh80, .mh-10 { margin-left: 80px; margin-right: 80px; }

.mh88, .mh-11 { margin-left: 88px; margin-right: 88px; }

.mh96, .mh-12 { margin-left: 96px; margin-right: 96px; }

.mh104, .mh-13 { margin-left: 104px; margin-right: 104px; }

.mh112, .mh-14 { margin-left: 112px; margin-right: 112px; }

.mh120, .mh-15 { margin-left: 120px; margin-right: 120px; }

.mv0, .mv-0 { margin-top: 0px; margin-bottom: 0px; }

.mv8, .mv-1 { margin-top: 8px; margin-bottom: 8px; }

.mv16, .mv-2 { margin-top: 16px; margin-bottom: 16px; }

.mv24, .mv-3 { margin-top: 24px; margin-bottom: 24px; }

.mv32, .mv-4 { margin-top: 32px; margin-bottom: 32px; }

.mv40, .mv-5 { margin-top: 40px; margin-bottom: 40px; }

.mv48, .mv-6 { margin-top: 48px; margin-bottom: 48px; }

.mv56, .mv-7 { margin-top: 56px; margin-bottom: 56px; }

.mv64, .mv-8 { margin-top: 64px; margin-bottom: 64px; }

.mv72, .mv-9 { margin-top: 72px; margin-bottom: 72px; }

.mv80, .mv-10 { margin-top: 80px; margin-bottom: 80px; }

.mv88, .mv-11 { margin-top: 88px; margin-bottom: 88px; }

.mv96, .mv-12 { margin-top: 96px; margin-bottom: 96px; }

.mv104, .mv-13 { margin-top: 104px; margin-bottom: 104px; }

.mv112, .mv-14 { margin-top: 112px; margin-bottom: 112px; }

.mv120, .mv-15 { margin-top: 120px; margin-bottom: 120px; }

.mt0, .mt-0 { margin-top: 0px; }

.mt8, .mt-1 { margin-top: 8px; }

.mt16, .mt-2 { margin-top: 16px; }

.mt24, .mt-3 { margin-top: 24px; }

.mt32, .mt-4 { margin-top: 32px; }

.mt40, .mt-5 { margin-top: 40px; }

.mt48, .mt-6 { margin-top: 48px; }

.mt56, .mt-7 { margin-top: 56px; }

.mt64, .mt-8 { margin-top: 64px; }

.mt72, .mt-9 { margin-top: 72px; }

.mt80, .mt-10 { margin-top: 80px; }

.mt88, .mt-11 { margin-top: 88px; }

.mt96, .mt-12 { margin-top: 96px; }

.mt104, .mt-13 { margin-top: 104px; }

.mt112, .mt-14 { margin-top: 112px; }

.mt120, .mt-15 { margin-top: 120px; }

.mr0, .mr-0 { margin-right: 0px; }

.mr8, .mr-1 { margin-right: 8px; }

.mr16, .mr-2 { margin-right: 16px; }

.mr24, .mr-3 { margin-right: 24px; }

.mr32, .mr-4 { margin-right: 32px; }

.mr40, .mr-5 { margin-right: 40px; }

.mr48, .mr-6 { margin-right: 48px; }

.mr56, .mr-7 { margin-right: 56px; }

.mr64, .mr-8 { margin-right: 64px; }

.mr72, .mr-9 { margin-right: 72px; }

.mr80, .mr-10 { margin-right: 80px; }

.mr88, .mr-11 { margin-right: 88px; }

.mr96, .mr-12 { margin-right: 96px; }

.mr104, .mr-13 { margin-right: 104px; }

.mr112, .mr-14 { margin-right: 112px; }

.mr120, .mr-15 { margin-right: 120px; }

.mb0, .mb-0 { margin-bottom: 0px; }

.mb8, .mb-1 { margin-bottom: 8px; }

.mb16, .mb-2 { margin-bottom: 16px; }

.mb24, .mb-3 { margin-bottom: 24px; }

.mb32, .mb-4 { margin-bottom: 32px; }

.mb40, .mb-5 { margin-bottom: 40px; }

.mb48, .mb-6 { margin-bottom: 48px; }

.mb56, .mb-7 { margin-bottom: 56px; }

.mb64, .mb-8 { margin-bottom: 64px; }

.mb72, .mb-9 { margin-bottom: 72px; }

.mb80, .mb-10 { margin-bottom: 80px; }

.mb88, .mb-11 { margin-bottom: 88px; }

.mb96, .mb-12 { margin-bottom: 96px; }

.mb104, .mb-13 { margin-bottom: 104px; }

.mb112, .mb-14 { margin-bottom: 112px; }

.mb120, .mb-15 { margin-bottom: 120px; }

.ml0, .ml-0 { margin-left: 0px; }

.ml8, .ml-1 { margin-left: 8px; }

.ml16, .ml-2 { margin-left: 16px; }

.ml24, .ml-3 { margin-left: 24px; }

.ml32, .ml-4 { margin-left: 32px; }

.ml40, .ml-5 { margin-left: 40px; }

.ml48, .ml-6 { margin-left: 48px; }

.ml56, .ml-7 { margin-left: 56px; }

.ml64, .ml-8 { margin-left: 64px; }

.ml72, .ml-9 { margin-left: 72px; }

.ml80, .ml-10 { margin-left: 80px; }

.ml88, .ml-11 { margin-left: 88px; }

.ml96, .ml-12 { margin-left: 96px; }

.ml104, .ml-13 { margin-left: 104px; }

.ml112, .ml-14 { margin-left: 112px; }

.ml120, .ml-15 { margin-left: 120px; }

body { font-family: "Fira Sans", arial, sans-serif; font-size: 16px; line-h=
eight: 24px; font-weight: 400; text-rendering: optimizelegibility; backface=
-visibility: hidden; -webkit-font-smoothing: subpixel-antialiased !importan=
t; }

a { color: rgb(92, 134, 174); }

a:hover, a:focus { }

.main-content { margin-top: 36px; }

.title-h3 { font-size: 24px; line-height: 36px; font-weight: bold; }

.title-h4 { color: rgb(0, 0, 0); font-size: 20px; line-height: 24px; font-w=
eight: bold; text-transform: none; }

h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 { color: rgb(76, 75, 7=
4); margin: 0px 0px 24px; font-weight: 500; }

.h1, h1 { font-size: 32px; line-height: 40px; }

.h2, h2 { font-size: 24px; line-height: 36px; }

.h3, h3 { font-size: 16px; line-height: 24px; }

.h4, h4 { font-size: 12px; line-height: 24px; text-transform: uppercase; co=
lor: rgb(135, 146, 191); }

p { color: rgb(80, 80, 80); margin-bottom: 12px; }

.uppercase { text-transform: uppercase; letter-spacing: 1px; }

.logo { font-size: 30px; font-weight: 500; color: rgb(51, 51, 51); }

.logo span { color: rgb(243, 244, 249); }

.navbar-phpfaq { background-color: rgb(159, 168, 204); color: rgb(243, 244,=
 249); border-radius: 0px; margin-bottom: 0px; border: none; }

.navbar-phpfaq .navbar-nav li a { color: rgb(243, 244, 249); font-size: 20p=
x; }

.navbar-phpfaq .navbar-nav li a:hover, .navbar-phpfaq .navbar-nav li a:focu=
s { background-color: transparent; }

.navbar-phpfaq .navbar-nav li.active a { background-color: rgb(82, 93, 135)=
; }

.crumbs { background-color: rgb(51, 51, 51); }

.crumbs .breadcrumb { margin-bottom: 0px; background-color: transparent; pa=
dding: 0px; }

.crumbs .breadcrumb > .active { color: rgb(243, 244, 249); }

.crumbs .breadcrumb a { color: rgb(243, 244, 249); line-height: 24px; }

.crumbs .breadcrumb > li { padding: 12px 0px; }

.crumbs .breadcrumb > li + li::before { content: ">"; padding: 0px 24px; co=
lor: rgb(157, 182, 206); }

.pager-phpfaq { margin-top: 24px; border-top: 1px dotted rgb(82, 93, 135); =
}

.pager-phpfaq ul { margin-left: -24px; padding-left: 0px; list-style: none;=
 text-align: left; }

.pager-phpfaq ul li { display: inline; }

.pager-phpfaq ul li a { display: inline-block; padding: 12px 24px; }

.pager-phpfaq ul li.prev a::before { content: "=C2=AB=C2=AB "; }

.pager-phpfaq ul li.next a::after { content: " =C2=BB=C2=BB"; }

.comments { background-color: rgb(202, 203, 217); }

.comments-list { list-style: none; padding-left: 0px; margin-bottom: 0px; }

.comments-list .comment { margin-bottom: 24px; }

.comments-list .comment-author { padding-bottom: 12px; }

.comments-list .comment-body, .comments-list .comment-reply { padding: 24px=
; }

.comments-list .comment-body { background-color: rgb(255, 255, 255); }

.comments-list .comment-reply { background-color: rgb(238, 237, 242); }

.comments-list .comment-reply h4 { margin-bottom: 12px; color: rgb(82, 93, =
135); }

.form-phpfaq .form-group { margin-bottom: 24px; }

.form-phpfaq .control-label { text-align: left; font-weight: normal; }

.form-phpfaq .form-control { border-radius: 0px; border: 1px solid rgb(170,=
 170, 170); line-height: 24px; }

.form-phpfaq .form-control:focus { border-color: rgb(92, 134, 174); box-sha=
dow: rgba(0, 0, 0, 0.075) 0px 1px 1px inset, rgba(92, 134, 174, 0.6) 0px 0p=
x 8px; }

.btn-phpfaq { background-color: rgb(92, 134, 174); color: rgb(243, 244, 249=
); border-radius: 0px; line-height: 24px; }

.c-light h1, .c-light h2, .c-light h3, .c-light h4, .c-light p, .c-light a =
{ color: rgb(243, 244, 249); }

.bg-primary { background-color: rgb(135, 146, 191); }

.bg-primary h1, .bg-primary h2, .bg-primary h3, .bg-primary h4, .bg-primary=
 p, .bg-primary a { color: rgb(243, 244, 249); }

.bg-primary-10 { background-color: rgb(211, 213, 230); }

.bg-primary-11 { background-color: rgb(243, 244, 249); }

.bg-secondary { background-color: rgb(121, 56, 96); }

.bg-secondary h1, .bg-secondary h2, .bg-secondary h3, .bg-secondary h4, .bg=
-secondary p, .bg-secondary a { color: rgb(243, 244, 249); }

.bg-link { background-color: rgb(92, 134, 174); }

.bg-link h1, .bg-link h2, .bg-link h3, .bg-link h4, .bg-link p, .bg-link a =
{ color: rgb(243, 244, 249); }

.link-list { margin-bottom: 0px; list-style: none; padding-left: 24px; posi=
tion: relative; }

.link-list li { margin-bottom: 8px; }

.link-list li.active ::before { position: absolute; left: 0px; content: ">"=
; }

.link-list li.active a { color: rgb(121, 56, 96); }

.last-comments-list { margin-bottom: 0px; list-style: none; padding-left: 0=
px; }

.last-comments-list li { margin-bottom: 8px; }

.last-comments-list li .comment-author { color: rgb(121, 56, 96); font-weig=
ht: bold; }

.footer { background-color: rgb(159, 168, 204); }

.footer h1, .footer h2, .footer h3, .footer h4, .footer p, .footer a { colo=
r: rgb(243, 244, 249); }

.footer .logo { padding: 12px 0px; }

.footer a { display: inline-block; }

.footer a.footer-link, .footer p { padding-top: 12px; margin-right: 12px; }

.footer .counter { margin: 6px 12px 6px 0px; }
------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://phpdelusions.net/img/badge-pdo.png

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
gg==

------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://phpdelusions.net/img/badge-mysqli.png

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
AAAASUVORK5CYII=

------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://phpdelusions.net/img/badge-sql-injection.png

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

------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: text/html
Content-ID: <frame-ABD77247F734ABB0FE2D976607614F45@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: text/html
Content-ID: <frame-F371D7F67508A055A468762899F03832@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.facebook.com/v2.5/plugins/like.php?action=like&app_id=&channel=https%3A%2F%2Fstaticxx.facebook.com%2Fx%2Fconnect%2Fxd_arbiter%2F%3Fversion%3D46%23cb%3Df1c118fd388f01c%26domain%3Dphpdelusions.net%26origin%3Dhttps%253A%252F%252Fphpdelusions.net%252Ff63cb3d735abdc%26relation%3Dparent.parent&container_width=42&href=http%3A%2F%2Fphpdelusions.net%2F%2Fpdo&layout=button_count&locale=en_US&sdk=joey&share=true&show_faces=false

<!DOCTYPE html><html lang=3D"en" id=3D"facebook" class=3D"svg no_js"><head>=
<meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><l=
ink rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-2ce6c580-2907-4f86=
-aeb8-81a15832d717@mhtml.blink" /><meta name=3D"referrer" content=3D"origin=
-when-crossorigin" id=3D"meta_referrer"><title>Facebook</title></head><body=
 dir=3D"ltr" class=3D"plugin _4mr9 chrome webkit win x1 Locale_en_US"><div =
class=3D"_li"><div class=3D"pluginSkinLight pluginFontHelvetica"><div><tabl=
e class=3D"uiGrid _51mz" cellspacing=3D"0" cellpadding=3D"0" id=3D"u_0_0"><=
tbody><tr class=3D"_51mx"><td class=3D"_51m- hCent"><div><form rel=3D"async=
" ajaxify=3D"/plugins/like/connect" method=3D"post" action=3D"https://www.f=
acebook.com/plugins/like/connect" id=3D"u_0_1"><button type=3D"submit" clas=
s=3D"inlineBlock _2tga _89n_ _8j9v" title=3D"Like (The only proper) PDO tut=
orial" id=3D"u_0_2"><span class=3D"_8f1i"></span><div class=3D""><span clas=
s=3D"_3jn- inlineBlock _2v7"><span class=3D"_3jn_"></span><span class=3D"_4=
9vg"><svg xmlns=3D"http://www.w3.org/2000/svg" viewBox=3D"0 0 16 16" class=
=3D"_1pbq" color=3D"#ffffff"><path fill=3D"#ffffff" fill-rule=3D"evenodd" d=
=3D"M4.55,7 C4.7984,7 5,7.23403636 5,7.52247273 L5,13.4775273
          C5,13.7659636 4.7984,14 4.55,14 L2.45,14 C2.2016,14 2,13.7659636
          2,13.4775273 L2,7.52247273 C2,7.23403636 2.2016,7 2.45,7 L4.55,7 =
Z
          M6.54470232,13.2 C6.24016877,13.1641086 6.01734614,12.8982791
          6,12.5737979 C6.01734614,12.5737979 6.01344187,9.66805666 6,8.143=
98693
          C6.01344187,7.61903931 6.10849456,6.68623352 6.39801308,6.2738427=
8
          C7.10556287,5.26600749 7.60281698,4.6079584 7.89206808,4.22570082
          C8.18126341,3.8435016 8.52813047,3.4708734 8.53777961,3.18572676
          C8.55077527,2.80206854 8.53655255,2.79471518 8.53777961,2.3555566=
6
          C8.53900667,1.91639814 8.74565444,1.5 9.27139313,1.5 C9.52544997,=
1.5
          9.7301456,1.55690094 9.91922413,1.80084547 C10.2223633,2.15596568
          10.4343097,2.71884727 10.4343097,3.60971169 C10.4343097,4.5005761=
2
          9.50989975,6.1729303 9.50815961,6.18 C9.50815961,6.18
          13.5457098,6.17908951 13.5464084,6.18 C14.1635544,6.17587601
          14.5,6.72543196 14.5,7.29718426 C14.5,7.83263667 14.1341135,8.278=
97346
          13.6539433,8.3540827 C13.9452023,8.49286263 14.1544715,8.82364675
          14.1544715,9.20555417 C14.1544715,9.68159617 13.8293011,10.078268=
7
          13.3983805,10.1458495 C13.6304619,10.2907572 13.7736931,10.551684=
5
          13.7736931,10.847511 C13.7736931,11.2459343 13.5138356,11.5808619
          13.1594388,11.6612236 C13.3701582,11.7991865 13.5063617,12.054394=
5
          13.5063617,12.3429843 C13.5063617,12.7952155 13.1715421,13.165684=
4
          12.7434661,13.2 L6.54470232,13.2 Z"></path></svg><img class=3D"_1=
pbs inlineBlock img" src=3D"https://www.facebook.com/rsrc.php/v3/y5/r/OqOE2=
1UvWe3.png" alt=3D"" width=3D"16" height=3D"16"></span></span><span class=
=3D"_49vh _2pi7">Like</span><span class=3D"_5n6h _2pih" id=3D"u_0_3">313</s=
pan></div></button></form></div></td><td class=3D"_51m- _2pir _51mw"><div><=
a class=3D"_2vmz" href=3D"https://www.facebook.com/sharer/sharer.php?u=3Dht=
tp%3A%2F%2Fphpdelusions.net%2Fpdo&amp;display=3Dpopup&amp;ref=3Dplugin&amp;=
src=3Dlike&amp;kid_directed_site=3D0" target=3D"_blank" id=3D"u_0_4"><butto=
n type=3D"submit" class=3D"inlineBlock _2tga _89n_ _8j9v" id=3D"u_0_5"><spa=
n class=3D"_8f1i"></span><div class=3D"_2n-v"><span class=3D"_49vh _2pi7">S=
hare</span></div></button></a></div></td></tr></tbody></table><span id=3D"j=
sbundle-loader">&nbsp;</span></div></div></div></body></html>
------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-2ce6c580-2907-4f86-aeb8-81a15832d717@mhtml.blink

@charset "utf-8";

._32qa button { opacity: 0.4; }

._59ov { height: 910px; position: relative; top: -10px; width: 100%; }

._5ti_ { background-size: cover; height: 100%; width: 100%; }

._5tj2 { height: 900px; }

._2mm3 ._5a8u .uiBoxGray { background: rgb(255, 255, 255); margin: 0px; pad=
ding: 12px; }

._2494 { height: 100vh; }

._2495 { margin-top: -10px; top: 10px; }

body.plugin { background: transparent; font-family: Helvetica, Arial, sans-=
serif; line-height: 1.28; overflow: hidden; text-size-adjust: none; }

.plugin, .plugin button, .plugin input, .plugin label, .plugin select, .plu=
gin td, .plugin textarea { font-size: 11px; }

html { touch-action: manipulation; }

body { background: rgb(255, 255, 255); color: rgb(28, 30, 33); direction: l=
tr; line-height: 1.34; margin: 0px; padding: 0px; unicode-bidi: embed; }

body, button, input, label, select, td, textarea { font-family: Helvetica, =
Arial, sans-serif; font-size: 12px; }

h1, h2, h3, h4, h5, h6 { color: rgb(28, 30, 33); font-size: 13px; font-weig=
ht: 600; margin: 0px; padding: 0px; }

h1 { font-size: 14px; }

h4, h5, h6 { font-size: 12px; }

p { margin: 1em 0px; }

b, strong { font-weight: 600; }

a { color: rgb(56, 88, 152); cursor: pointer; text-decoration: none; }

button { margin: 0px; }

a:hover { text-decoration: underline; }

img { border: 0px; }

td, td.label { text-align: left; }

dd { color: rgb(0, 0, 0); }

dt { color: rgb(96, 103, 112); }

ul { list-style-type: none; margin: 0px; padding: 0px; }

abbr { border-bottom: none; text-decoration: none; }

hr { background: rgb(218, 221, 225); border-width: 0px; color: rgb(218, 221=
, 225); height: 1px; }

.clearfix::after { clear: both; content: "."; display: block; font-size: 0p=
x; height: 0px; line-height: 0; visibility: hidden; }

.clearfix { zoom: 1; }

.datawrap { overflow-wrap: break-word; }

.word_break { display: inline-block; }

.flexchildwrap { min-width: 0px; overflow-wrap: break-word; }

.ellipsis { overflow: hidden; text-overflow: ellipsis; white-space: nowrap;=
 }

.aero { opacity: 0.5; }

.column { float: left; }

.center { margin-left: auto; margin-right: auto; }

#facebook .hidden_elem { display: none !important; }

#facebook .invisible_elem { visibility: hidden; }

#facebook .accessible_elem { clip: rect(1px, 1px, 1px, 1px); height: 1px; o=
verflow: hidden; position: absolute; white-space: nowrap; width: 1px; }

.direction_ltr { direction: ltr; }

.direction_rtl { direction: rtl; }

.text_align_ltr { text-align: left; }

.text_align_rtl { text-align: right; }

._8tm { padding: 0px; }

._2phz { padding: 4px; }

._2ph- { padding: 8px; }

._2ph_ { padding: 12px; }

._2pi0 { padding: 16px; }

._2pi1 { padding: 20px; }

._40c7 { padding: 24px; }

._2o1j { padding: 36px; }

._6buq { padding-bottom: 0px; padding-top: 0px; }

._2pi2 { padding-bottom: 4px; padding-top: 4px; }

._2pi3 { padding-bottom: 8px; padding-top: 8px; }

._2pi4 { padding-bottom: 12px; padding-top: 12px; }

._2pi5 { padding-bottom: 16px; padding-top: 16px; }

._2pi6 { padding-bottom: 20px; padding-top: 20px; }

._2o1k { padding-bottom: 24px; padding-top: 24px; }

._2o1l { padding-bottom: 36px; padding-top: 36px; }

._6bua { padding-left: 0px; padding-right: 0px; }

._2pi7 { padding-left: 4px; padding-right: 4px; }

._2pi8 { padding-left: 8px; padding-right: 8px; }

._2pi9 { padding-left: 12px; padding-right: 12px; }

._2pia { padding-left: 16px; padding-right: 16px; }

._2pib { padding-left: 20px; padding-right: 20px; }

._2o1m { padding-left: 24px; padding-right: 24px; }

._2o1n { padding-left: 36px; padding-right: 36px; }

._iky { padding-top: 0px; }

._2pic { padding-top: 4px; }

._2pid { padding-top: 8px; }

._2pie { padding-top: 12px; }

._2pif { padding-top: 16px; }

._2pig { padding-top: 20px; }

._2owm { padding-top: 24px; }

._div { padding-right: 0px; }

._2pih { padding-right: 4px; }

._2pii { padding-right: 8px; }

._2pij { padding-right: 12px; }

._2pik { padding-right: 16px; }

._2pil { padding-right: 20px; }

._31wk { padding-right: 24px; }

._2phb { padding-right: 32px; }

._au- { padding-bottom: 0px; }

._2pim { padding-bottom: 4px; }

._2pin { padding-bottom: 8px; }

._2pio { padding-bottom: 12px; }

._2pip { padding-bottom: 16px; }

._2piq { padding-bottom: 20px; }

._2o1p { padding-bottom: 24px; }

._4gao { padding-bottom: 32px; }

._1cvx { padding-left: 0px; }

._2pir { padding-left: 4px; }

._2pis { padding-left: 8px; }

._2pit { padding-left: 12px; }

._2piu { padding-left: 16px; }

._2piv { padding-left: 20px; }

._2o1q { padding-left: 24px; }

._2o1r { padding-left: 36px; }

._51mz { border: 0px; border-collapse: collapse; border-spacing: 0px; }

._5f0n { table-layout: fixed; width: 100%; }

.uiGrid .vTop { vertical-align: top; }

.uiGrid .vMid { vertical-align: middle; }

.uiGrid .vBot { vertical-align: bottom; }

.uiGrid .hLeft { text-align: left; }

.uiGrid .hCent { text-align: center; }

.uiGrid .hRght { text-align: right; }

._51mx:first-child > ._51m- { padding-top: 0px; }

._51mx:last-child > ._51m- { padding-bottom: 0px; }

._51mz ._51mw { padding-right: 0px; }

._51mz ._51m-:first-child { padding-left: 0px; }

._51mz._4r9u { border-radius: 50%; overflow: hidden; }

._2tga { background: rgb(66, 103, 178); border: 1px solid rgb(66, 103, 178)=
; color: rgb(255, 255, 255); cursor: pointer; font-family: Helvetica, Arial=
, sans-serif; -webkit-font-smoothing: antialiased; margin: 0px; position: r=
elative; user-select: none; white-space: nowrap; }

._89n_ { background: rgb(24, 119, 242); border: 0px; }

._2tga.active { background: rgb(64, 128, 255); border: 1px solid rgb(64, 12=
8, 255); }

._2tga._4kae.active, ._2tga._4kae.active:hover { background: rgb(87, 127, 1=
88); border: 1px solid rgb(87, 127, 188); }

._2tga._49ve { border-radius: 3px; font-size: 11px; height: 20px; padding: =
0px 0px 0px 2px; }

._2tga._8j9v { border-radius: 3px; font-size: 11px; height: 20px; padding: =
0px 6px; }

._2tga._3e2a { border-radius: 4px; font-size: 13px; height: 28px; padding: =
0px 4px 0px 6px; }

._2tga._8j9w { border-radius: 4px; font-size: 13px; height: 28px; padding: =
0px 8px; }

._2tga._5n6f { border-top-left-radius: 0px; border-top-right-radius: 0px; }

._2tga:hover { background: rgb(54, 88, 153); border: 1px solid rgb(54, 88, =
153); }

._89n_:hover { background: rgb(24, 119, 242); border: 0px; }

._2tga:active { background: rgb(87, 127, 188); border: 1px solid rgb(87, 12=
7, 188); }

._89n_:active { background: rgb(24, 119, 242); border: 0px; }

._2tga:focus { outline-color: transparent; outline-style: none; }

._2tga.active:hover { background: rgb(64, 128, 255); border: 1px solid rgb(=
64, 128, 255); }

._8f1i { background-color: rgb(9, 30, 66); border-radius: inherit; height: =
100%; left: 0px; opacity: 0; position: absolute; top: 0px; width: 100%; }

._8f1i:active { opacity: 0.3; }

._11qm { background: rgb(255, 255, 255); border: 1px solid rgb(204, 208, 21=
3); color: rgb(66, 103, 178); }

._11qm:hover { background: rgb(245, 246, 247); border: 1px solid rgb(204, 2=
08, 213); }

._11qm.active { border: 1px solid rgb(64, 128, 255); color: rgb(255, 255, 2=
55); }

._3oi2 { background: rgb(0, 132, 255); border: 1px solid rgb(0, 132, 255); =
color: rgb(255, 255, 255); }

._3oi2:hover { background: rgb(0, 119, 229); border: 1px solid rgb(0, 119, =
229); }

._3e2a ._3jn- { position: relative; top: -1px; }

._3jn- { height: 16px; vertical-align: middle; width: 16px; }

._3jn_ { background: none; display: none; height: 28px; left: -6px; positio=
n: absolute; top: -6px; width: 28px; }

@keyframes burst {=20
  0% { background-position: 0px 0px; }
  100% { background-position: -616px 0px; }
}

._2tga.is_animating ._3jn_ { animation: 0.24s steps(22) 0s 1 normal forward=
s running burst; background: url("https://www.facebook.com/rsrc.php/v3/yQ/r=
/GvVunJusdpv.png") 0px 0px / 616px 28px no-repeat; display: inline-block; z=
oom: 1; }

._49ve._2tga.is_animating ._3jn_ { left: -6px; position: relative; top: -6p=
x; }

._49vg, ._5n2y { vertical-align: middle; }

._89n_._49ve ._49vg._8a19 { padding-top: 2px; }

._89n_._3e2a ._49vg._8a19 { padding-top: 1px; }

._2tga ._5n2y, ._2tga.active ._49vg, ._2tga.active.is_animating ._5n2y { di=
splay: none; }

._2tga ._49vg, ._2tga.active ._5n2y, ._2tga.active:hover ._4kag { display: =
inline-block; zoom: 1; }

#facebook ._2tga span._49vh, #facebook ._2tga span._5n6h, ._49vh, ._5n6h { =
font-family: Helvetica, Arial, sans-serif; vertical-align: middle; }

._49vh { font-weight: bold; }

._5n6h { font-weight: normal; }

._5n6j { border-radius: 3px; height: 20px; line-height: 20px; }

._5n6k { border-radius: 4px; height: 30px; line-height: 30px; }

._5n6l { background: rgb(255, 255, 255); border-top: 1px solid rgb(141, 148=
, 158); border-right: 1px solid rgb(141, 148, 158); border-left: 1px solid =
rgb(141, 148, 158); border-image: initial; border-bottom: none; border-bott=
om-left-radius: 0px; border-bottom-right-radius: 0px; box-sizing: border-bo=
x; color: rgb(29, 33, 41); text-align: center; width: 100%; }

._2tga ._1pbq { height: 16px; width: 16px; }

.no_svg ._2tga ._1pbq, .svg ._2tga ._1pbs { display: none; }

._2n-v ._49vh { padding-left: 2px; }

._5f0v { outline: none; }

._3oxt { outline: rgb(59, 89, 152) dotted 1px; }

.webkit ._3oxt { outline: rgb(91, 157, 217) auto 5px; }

.win.webkit ._3oxt { outline-color: rgb(229, 151, 0); }

.uiLayer { outline: none; }

form { margin: 0px; padding: 0px; }

label { color: rgb(96, 103, 112); cursor: default; font-weight: 600; vertic=
al-align: middle; }

label input { font-weight: normal; }

textarea, .inputtext, .inputpassword { appearance: none; border: 1px solid =
rgb(204, 208, 213); border-radius: 0px; margin: 0px; padding: 3px; }

textarea { max-width: 100%; }

select { border: 1px solid rgb(204, 208, 213); padding: 2px; }

input, select, textarea { background-color: rgb(255, 255, 255); color: rgb(=
28, 30, 33); }

.inputtext, .inputpassword { padding-bottom: 4px; }

.inputtext:invalid, .inputpassword:invalid { box-shadow: none; }

.inputradio { margin: 0px 5px 0px 0px; padding: 0px; vertical-align: middle=
; }

.inputcheckbox { border: 0px; vertical-align: middle; }

.inputbutton, .inputsubmit { background-color: rgb(66, 103, 178); border-co=
lor: rgb(218, 221, 225) rgb(14, 31, 91) rgb(14, 31, 91) rgb(217, 223, 234);=
 border-style: solid; border-width: 1px; color: rgb(255, 255, 255); padding=
: 2px 15px 3px; text-align: center; }

.inputsubmit_disabled { background-color: rgb(153, 153, 153); border-bottom=
: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(102, 102, 102); color=
: rgb(255, 255, 255); }

.inputaux { background: rgb(235, 237, 240); border-color: rgb(235, 237, 240=
) rgb(102, 102, 102) rgb(102, 102, 102) rgb(231, 231, 231); color: rgb(0, 0=
, 0); }

.inputaux_disabled { color: rgb(153, 153, 153); }

.inputsearch { background: url("https://www.facebook.com/rsrc.php/v3/yV/r/I=
JYgcESal33.png") left 4px no-repeat rgb(255, 255, 255); padding-left: 17px;=
 }

.inlineBlock { display: inline-block; zoom: 1; }

._4jnw { margin: 0px; }

._3-8h { margin: 4px; }

._3-8i { margin: 8px; }

._3-8j { margin: 12px; }

._3-8k { margin: 16px; }

._3-8l { margin: 20px; }

._2-5b { margin: 24px; }

._1kbd { margin-bottom: 0px; margin-top: 0px; }

._3-8m { margin-bottom: 4px; margin-top: 4px; }

._3-8n { margin-bottom: 8px; margin-top: 8px; }

._3-8o { margin-bottom: 12px; margin-top: 12px; }

._3-8p { margin-bottom: 16px; margin-top: 16px; }

._3-8q { margin-bottom: 20px; margin-top: 20px; }

._2-ox { margin-bottom: 24px; margin-top: 24px; }

._1a4i { margin-left: 0px; margin-right: 0px; }

._3-8r { margin-left: 4px; margin-right: 4px; }

._3-8s { margin-left: 8px; margin-right: 8px; }

._3-8t { margin-left: 12px; margin-right: 12px; }

._3-8u { margin-left: 16px; margin-right: 16px; }

._3-8v { margin-left: 20px; margin-right: 20px; }

._6bu9 { margin-left: 24px; margin-right: 24px; }

._5soe { margin-top: 0px; }

._3-8w { margin-top: 4px; }

._3-8x { margin-top: 8px; }

._3-8y { margin-top: 12px; }

._3-8z { margin-top: 16px; }

._3-8- { margin-top: 20px; }

._4aws { margin-top: 24px; }

._2-jz { margin-right: 0px; }

._3-8_ { margin-right: 4px; }

._3-90 { margin-right: 8px; }

._3-91 { margin-right: 12px; }

._3-92 { margin-right: 16px; }

._3-93 { margin-right: 20px; }

._y8t { margin-right: 24px; }

._5emk { margin-bottom: 0px; }

._3-94 { margin-bottom: 4px; }

._3-95 { margin-bottom: 8px; }

._3-96 { margin-bottom: 12px; }

._3-97 { margin-bottom: 16px; }

._3-98 { margin-bottom: 20px; }

._20nr { margin-bottom: 24px; }

._av_ { margin-left: 0px; }

._3-99 { margin-left: 4px; }

._3-9a { margin-left: 8px; }

._3-9b { margin-left: 12px; }

._3-9c { margin-left: 16px; }

._3-9d { margin-left: 20px; }

._4m0t { margin-left: 24px; }

._4mr9 { user-select: none; }

._li._li._li { overflow: initial; }

._910i._li._li._li { overflow: hidden; }

._9053 ._li._li._li { overflow-x: hidden; }

._72b0 { position: relative; z-index: 0; }

.registration ._li._9bpz { background-color: rgb(240, 242, 245); }

._li ._9bp- { padding-top: 5px; text-align: center; }

._li ._9bp- .fb_logo { height: 100px; }

._4qba { font-style: inherit; }

._4qbb, ._4qbc, ._4qbd { background: none; font-style: inherit; padding: 0p=
x; width: auto; }

._4qbd { border-bottom: 1px solid rgb(255, 153, 153); }

._4qbb, ._4qbc { border-bottom: 1px solid rgb(153, 153, 153); }

._4qbb:hover, ._4qbc:hover, ._4qbd:hover { background-color: rgb(255, 204, =
204); border-top: 1px solid rgb(204, 204, 204); cursor: help; }
------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://www.facebook.com/rsrc.php/v3/y5/r/OqOE21UvWe3.png

iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAQAAAC1+jfqAAAABGdBTUEAALGPC/xhBQAAACBjSFJN
AAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElN
RQfjAhoHIAZgyLAFAAAAmElEQVQoz52RsQ1CMQxEL0iUdHRUrPDFGkzAHsyExByIGWi+BAUlpEFI
X588CrASkw8F58rn6O7sBPQbowFup03R8VmBDphaXyusNJY0+aaw4AYcCcb48YwzAOvM+QdbSlxo
LEMUipKWLk2nu2V4QSSncKi3SK7b14fyZ23zmmbRFwY989riJCm9da56ZIUIRDRU4Z/fdHgC6ryp
E5CyqrEAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTktMDItMjZUMTU6MzI6MDYtMDg6MDBKAfhMAAAA
JXRFWHRkYXRlOm1vZGlmeQAyMDE5LTAyLTI2VDE1OjMyOjA2LTA4OjAwO1xA8AAAAABJRU5ErkJg
gg==

------MultipartBoundary--zVHR1nsk7AoZgIdj1gQBb0bkySLIM0MPCad5j53FX2------
